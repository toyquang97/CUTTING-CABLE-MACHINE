
Cab_roling.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cf0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08006e00  08006e00  00016e00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007254  08007254  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007254  08007254  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007254  08007254  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007254  08007254  00017254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007258  08007258  00017258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800725c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000015c  200001e4  08007440  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08007440  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dba3  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022bc  00000000  00000000  0002ddb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e70  00000000  00000000  00030070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d88  00000000  00000000  00030ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a45  00000000  00000000  00031c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f92e  00000000  00000000  0004b6ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008eb69  00000000  00000000  0005afdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9b44  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e04  00000000  00000000  000e9b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006de8 	.word	0x08006de8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08006de8 	.word	0x08006de8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2lz>:
 8000a4c:	b538      	push	{r3, r4, r5, lr}
 8000a4e:	4605      	mov	r5, r0
 8000a50:	460c      	mov	r4, r1
 8000a52:	2200      	movs	r2, #0
 8000a54:	2300      	movs	r3, #0
 8000a56:	4628      	mov	r0, r5
 8000a58:	4621      	mov	r1, r4
 8000a5a:	f7ff ffaf 	bl	80009bc <__aeabi_dcmplt>
 8000a5e:	b928      	cbnz	r0, 8000a6c <__aeabi_d2lz+0x20>
 8000a60:	4628      	mov	r0, r5
 8000a62:	4621      	mov	r1, r4
 8000a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a68:	f000 b80a 	b.w	8000a80 <__aeabi_d2ulz>
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000a72:	f000 f805 	bl	8000a80 <__aeabi_d2ulz>
 8000a76:	4240      	negs	r0, r0
 8000a78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a7c:	bd38      	pop	{r3, r4, r5, pc}
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2ulz>:
 8000a80:	b5d0      	push	{r4, r6, r7, lr}
 8000a82:	2200      	movs	r2, #0
 8000a84:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <__aeabi_d2ulz+0x34>)
 8000a86:	4606      	mov	r6, r0
 8000a88:	460f      	mov	r7, r1
 8000a8a:	f7ff fd25 	bl	80004d8 <__aeabi_dmul>
 8000a8e:	f7ff ffbd 	bl	8000a0c <__aeabi_d2uiz>
 8000a92:	4604      	mov	r4, r0
 8000a94:	f7ff fca6 	bl	80003e4 <__aeabi_ui2d>
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4b07      	ldr	r3, [pc, #28]	; (8000ab8 <__aeabi_d2ulz+0x38>)
 8000a9c:	f7ff fd1c 	bl	80004d8 <__aeabi_dmul>
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	4630      	mov	r0, r6
 8000aa6:	4639      	mov	r1, r7
 8000aa8:	f7ff fb5e 	bl	8000168 <__aeabi_dsub>
 8000aac:	f7ff ffae 	bl	8000a0c <__aeabi_d2uiz>
 8000ab0:	4621      	mov	r1, r4
 8000ab2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ab4:	3df00000 	.word	0x3df00000
 8000ab8:	41f00000 	.word	0x41f00000

08000abc <HAL_UART_RxCpltCallback>:
#include "interrupt.h"



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 if(huart->Instance == huart1.Instance)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <HAL_UART_RxCpltCallback+0x20>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d101      	bne.n	8000ad4 <HAL_UART_RxCpltCallback+0x18>
 {
    readUart();
 8000ad0:	f000 fcb2 	bl	8001438 <readUart>
 }
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	200002b8 	.word	0x200002b8

08000ae0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  if(htim->Instance == htim2.Instance)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d101      	bne.n	8000af8 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
     getLenghtAndQty();
 8000af4:	f000 fcce 	bl	8001494 <getLenghtAndQty>
  }
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000228 	.word	0x20000228

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b08:	f000 fd76 	bl	80015f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0c:	f000 f820 	bl	8000b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b10:	f000 f966 	bl	8000de0 <MX_GPIO_Init>
  MX_CAN_Init();
 8000b14:	f000 f862 	bl	8000bdc <MX_CAN_Init>
  MX_TIM2_Init();
 8000b18:	f000 f896 	bl	8000c48 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b1c:	f000 f936 	bl	8000d8c <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000b20:	f000 f8e0 	bl	8000ce4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3 , TIM_CHANNEL_ALL);
 8000b24:	213c      	movs	r1, #60	; 0x3c
 8000b26:	4806      	ldr	r0, [pc, #24]	; (8000b40 <main+0x3c>)
 8000b28:	f002 f9a8 	bl	8002e7c <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim2);
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <main+0x40>)
 8000b2e:	f002 f8b1 	bl	8002c94 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8000b32:	2201      	movs	r2, #1
 8000b34:	4904      	ldr	r1, [pc, #16]	; (8000b48 <main+0x44>)
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <main+0x48>)
 8000b38:	f002 fdf7 	bl	800372a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
 8000b3c:	e7fe      	b.n	8000b3c <main+0x38>
 8000b3e:	bf00      	nop
 8000b40:	20000270 	.word	0x20000270
 8000b44:	20000228 	.word	0x20000228
 8000b48:	20000300 	.word	0x20000300
 8000b4c:	200002b8 	.word	0x200002b8

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b090      	sub	sp, #64	; 0x40
 8000b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	f107 0318 	add.w	r3, r7, #24
 8000b5a:	2228      	movs	r2, #40	; 0x28
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f003 fa24 	bl	8003fac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
 8000b6a:	605a      	str	r2, [r3, #4]
 8000b6c:	609a      	str	r2, [r3, #8]
 8000b6e:	60da      	str	r2, [r3, #12]
 8000b70:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b72:	2301      	movs	r3, #1
 8000b74:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b80:	2301      	movs	r3, #1
 8000b82:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b84:	2302      	movs	r3, #2
 8000b86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b8e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b92:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b94:	f107 0318 	add.w	r3, r7, #24
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 fc11 	bl	80023c0 <HAL_RCC_OscConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000ba4:	f000 f99e 	bl	8000ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba8:	230f      	movs	r3, #15
 8000baa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bac:	2302      	movs	r3, #2
 8000bae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bbe:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bc0:	1d3b      	adds	r3, r7, #4
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f001 fe7d 	bl	80028c4 <HAL_RCC_ClockConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000bd0:	f000 f988 	bl	8000ee4 <Error_Handler>
  }
}
 8000bd4:	bf00      	nop
 8000bd6:	3740      	adds	r7, #64	; 0x40
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_CAN_Init+0x64>)
 8000be2:	4a18      	ldr	r2, [pc, #96]	; (8000c44 <MX_CAN_Init+0x68>)
 8000be4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_CAN_Init+0x64>)
 8000be8:	2210      	movs	r2, #16
 8000bea:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_CAN_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_CAN_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_CAN_Init+0x64>)
 8000bfa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bfe:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_CAN_Init+0x64>)
 8000c02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c06:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000c08:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <MX_CAN_Init+0x64>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_CAN_Init+0x64>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <MX_CAN_Init+0x64>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_CAN_Init+0x64>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c20:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <MX_CAN_Init+0x64>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_CAN_Init+0x64>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c2c:	4804      	ldr	r0, [pc, #16]	; (8000c40 <MX_CAN_Init+0x64>)
 8000c2e:	f000 fd45 	bl	80016bc <HAL_CAN_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000c38:	f000 f954 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000200 	.word	0x20000200
 8000c44:	40006400 	.word	0x40006400

08000c48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c4e:	f107 0308 	add.w	r3, r7, #8
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c64:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <MX_TIM2_Init+0x98>)
 8000c66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <MX_TIM2_Init+0x98>)
 8000c6e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000c72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c74:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <MX_TIM2_Init+0x98>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <MX_TIM2_Init+0x98>)
 8000c7c:	f241 3287 	movw	r2, #4999	; 0x1387
 8000c80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <MX_TIM2_Init+0x98>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c88:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <MX_TIM2_Init+0x98>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c8e:	4814      	ldr	r0, [pc, #80]	; (8000ce0 <MX_TIM2_Init+0x98>)
 8000c90:	f001 ffb0 	bl	8002bf4 <HAL_TIM_Base_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c9a:	f000 f923 	bl	8000ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <MX_TIM2_Init+0x98>)
 8000cac:	f002 fa7c 	bl	80031a8 <HAL_TIM_ConfigClockSource>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000cb6:	f000 f915 	bl	8000ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <MX_TIM2_Init+0x98>)
 8000cc8:	f002 fc72 	bl	80035b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000cd2:	f000 f907 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cd6:	bf00      	nop
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000228 	.word	0x20000228

08000ce4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08c      	sub	sp, #48	; 0x30
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	2224      	movs	r2, #36	; 0x24
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f003 f95a 	bl	8003fac <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <MX_TIM3_Init+0xa0>)
 8000d02:	4a21      	ldr	r2, [pc, #132]	; (8000d88 <MX_TIM3_Init+0xa4>)
 8000d04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <MX_TIM3_Init+0xa0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <MX_TIM3_Init+0xa0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <MX_TIM3_Init+0xa0>)
 8000d14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <MX_TIM3_Init+0xa0>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d20:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <MX_TIM3_Init+0xa0>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d26:	2303      	movs	r3, #3
 8000d28:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	4619      	mov	r1, r3
 8000d50:	480c      	ldr	r0, [pc, #48]	; (8000d84 <MX_TIM3_Init+0xa0>)
 8000d52:	f001 fff1 	bl	8002d38 <HAL_TIM_Encoder_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000d5c:	f000 f8c2 	bl	8000ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d60:	2300      	movs	r3, #0
 8000d62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_TIM3_Init+0xa0>)
 8000d6e:	f002 fc1f 	bl	80035b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000d78:	f000 f8b4 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	3730      	adds	r7, #48	; 0x30
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000270 	.word	0x20000270
 8000d88:	40000400 	.word	0x40000400

08000d8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <MX_USART1_UART_Init+0x50>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000d98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b0e      	ldr	r3, [pc, #56]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b09      	ldr	r3, [pc, #36]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dc2:	4805      	ldr	r0, [pc, #20]	; (8000dd8 <MX_USART1_UART_Init+0x4c>)
 8000dc4:	f002 fc64 	bl	8003690 <HAL_UART_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000dce:	f000 f889 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	200002b8 	.word	0x200002b8
 8000ddc:	40013800 	.word	0x40013800

08000de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b088      	sub	sp, #32
 8000de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000df4:	4b38      	ldr	r3, [pc, #224]	; (8000ed8 <MX_GPIO_Init+0xf8>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a37      	ldr	r2, [pc, #220]	; (8000ed8 <MX_GPIO_Init+0xf8>)
 8000dfa:	f043 0320 	orr.w	r3, r3, #32
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b35      	ldr	r3, [pc, #212]	; (8000ed8 <MX_GPIO_Init+0xf8>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0320 	and.w	r3, r3, #32
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b32      	ldr	r3, [pc, #200]	; (8000ed8 <MX_GPIO_Init+0xf8>)
 8000e0e:	699b      	ldr	r3, [r3, #24]
 8000e10:	4a31      	ldr	r2, [pc, #196]	; (8000ed8 <MX_GPIO_Init+0xf8>)
 8000e12:	f043 0304 	orr.w	r3, r3, #4
 8000e16:	6193      	str	r3, [r2, #24]
 8000e18:	4b2f      	ldr	r3, [pc, #188]	; (8000ed8 <MX_GPIO_Init+0xf8>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f003 0304 	and.w	r3, r3, #4
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e24:	4b2c      	ldr	r3, [pc, #176]	; (8000ed8 <MX_GPIO_Init+0xf8>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a2b      	ldr	r2, [pc, #172]	; (8000ed8 <MX_GPIO_Init+0xf8>)
 8000e2a:	f043 0308 	orr.w	r3, r3, #8
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b29      	ldr	r3, [pc, #164]	; (8000ed8 <MX_GPIO_Init+0xf8>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f003 0308 	and.w	r3, r3, #8
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Buzzer_Out_Pin|HC595_SEL_Pin|USART2_TX_Pin|USART2_CLK_Pin
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f248 11b7 	movw	r1, #33207	; 0x81b7
 8000e42:	4826      	ldr	r0, [pc, #152]	; (8000edc <MX_GPIO_Init+0xfc>)
 8000e44:	f001 faa4 	bl	8002390 <HAL_GPIO_WritePin>
                          |SCK_Pin|MOSI_Pin|UART_DE_Pin|HC166_SEL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Buzzer_Out_Pin HC595_SEL_Pin MOSI_Pin UART_DE_Pin
                           HC166_SEL_Pin */
  GPIO_InitStruct.Pin = Buzzer_Out_Pin|HC595_SEL_Pin|MOSI_Pin|UART_DE_Pin
 8000e48:	f248 1383 	movw	r3, #33155	; 0x8183
 8000e4c:	613b      	str	r3, [r7, #16]
                          |HC166_SEL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5a:	f107 0310 	add.w	r3, r7, #16
 8000e5e:	4619      	mov	r1, r3
 8000e60:	481e      	ldr	r0, [pc, #120]	; (8000edc <MX_GPIO_Init+0xfc>)
 8000e62:	f001 f911 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_TX_Pin USART2_CLK_Pin SCK_Pin */
  GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_CLK_Pin|SCK_Pin;
 8000e66:	2334      	movs	r3, #52	; 0x34
 8000e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e72:	2303      	movs	r3, #3
 8000e74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0310 	add.w	r3, r7, #16
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4817      	ldr	r0, [pc, #92]	; (8000edc <MX_GPIO_Init+0xfc>)
 8000e7e:	f001 f903 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8000e82:	2340      	movs	r3, #64	; 0x40
 8000e84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 0310 	add.w	r3, r7, #16
 8000e92:	4619      	mov	r1, r3
 8000e94:	4811      	ldr	r0, [pc, #68]	; (8000edc <MX_GPIO_Init+0xfc>)
 8000e96:	f001 f8f7 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pins : IC_IN1_Pin IC_IN2_Pin IC_IN3_Pin IC_IN11_Pin
                           IC_IN12_Pin IC_IN13_Pin IC_IN14_Pin IC_IN4_Pin
                           IC_IN9_Pin IC_IN10_Pin */
  GPIO_InitStruct.Pin = IC_IN1_Pin|IC_IN2_Pin|IC_IN3_Pin|IC_IN11_Pin
 8000e9a:	f643 730f 	movw	r3, #16143	; 0x3f0f
 8000e9e:	613b      	str	r3, [r7, #16]
                          |IC_IN12_Pin|IC_IN13_Pin|IC_IN14_Pin|IC_IN4_Pin
                          |IC_IN9_Pin|IC_IN10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea8:	f107 0310 	add.w	r3, r7, #16
 8000eac:	4619      	mov	r1, r3
 8000eae:	480c      	ldr	r0, [pc, #48]	; (8000ee0 <MX_GPIO_Init+0x100>)
 8000eb0:	f001 f8ea 	bl	8002088 <HAL_GPIO_Init>

  /*Configure GPIO pin : NODE_ID_Pin */
  GPIO_InitStruct.Pin = NODE_ID_Pin;
 8000eb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NODE_ID_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	f107 0310 	add.w	r3, r7, #16
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_GPIO_Init+0x100>)
 8000eca:	f001 f8dd 	bl	8002088 <HAL_GPIO_Init>

}
 8000ece:	bf00      	nop
 8000ed0:	3720      	adds	r7, #32
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010800 	.word	0x40010800
 8000ee0:	40010c00 	.word	0x40010c00

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while(1)
 8000eec:	e7fe      	b.n	8000eec <Error_Handler+0x8>
	...

08000ef0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <HAL_MspInit+0x5c>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <HAL_MspInit+0x5c>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6193      	str	r3, [r2, #24]
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <HAL_MspInit+0x5c>)
 8000f04:	699b      	ldr	r3, [r3, #24]
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <HAL_MspInit+0x5c>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <HAL_MspInit+0x5c>)
 8000f14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f18:	61d3      	str	r3, [r2, #28]
 8000f1a:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <HAL_MspInit+0x5c>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_MspInit+0x60>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_MspInit+0x60>)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010000 	.word	0x40010000

08000f54 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b088      	sub	sp, #32
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a2c      	ldr	r2, [pc, #176]	; (8001020 <HAL_CAN_MspInit+0xcc>)
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d151      	bne.n	8001018 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f74:	4b2b      	ldr	r3, [pc, #172]	; (8001024 <HAL_CAN_MspInit+0xd0>)
 8000f76:	69db      	ldr	r3, [r3, #28]
 8000f78:	4a2a      	ldr	r2, [pc, #168]	; (8001024 <HAL_CAN_MspInit+0xd0>)
 8000f7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f7e:	61d3      	str	r3, [r2, #28]
 8000f80:	4b28      	ldr	r3, [pc, #160]	; (8001024 <HAL_CAN_MspInit+0xd0>)
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8c:	4b25      	ldr	r3, [pc, #148]	; (8001024 <HAL_CAN_MspInit+0xd0>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	4a24      	ldr	r2, [pc, #144]	; (8001024 <HAL_CAN_MspInit+0xd0>)
 8000f92:	f043 0304 	orr.w	r3, r3, #4
 8000f96:	6193      	str	r3, [r2, #24]
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <HAL_CAN_MspInit+0xd0>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	f003 0304 	and.w	r3, r3, #4
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000fa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000fa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 0310 	add.w	r3, r7, #16
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	481b      	ldr	r0, [pc, #108]	; (8001028 <HAL_CAN_MspInit+0xd4>)
 8000fba:	f001 f865 	bl	8002088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4815      	ldr	r0, [pc, #84]	; (8001028 <HAL_CAN_MspInit+0xd4>)
 8000fd4:	f001 f858 	bl	8002088 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2013      	movs	r0, #19
 8000fde:	f000 ff6c 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8000fe2:	2013      	movs	r0, #19
 8000fe4:	f000 ff85 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2100      	movs	r1, #0
 8000fec:	2014      	movs	r0, #20
 8000fee:	f000 ff64 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000ff2:	2014      	movs	r0, #20
 8000ff4:	f000 ff7d 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2015      	movs	r0, #21
 8000ffe:	f000 ff5c 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001002:	2015      	movs	r0, #21
 8001004:	f000 ff75 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2100      	movs	r1, #0
 800100c:	2016      	movs	r0, #22
 800100e:	f000 ff54 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001012:	2016      	movs	r0, #22
 8001014:	f000 ff6d 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001018:	bf00      	nop
 800101a:	3720      	adds	r7, #32
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40006400 	.word	0x40006400
 8001024:	40021000 	.word	0x40021000
 8001028:	40010800 	.word	0x40010800

0800102c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800103c:	d113      	bne.n	8001066 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <HAL_TIM_Base_MspInit+0x44>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a0b      	ldr	r2, [pc, #44]	; (8001070 <HAL_TIM_Base_MspInit+0x44>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	61d3      	str	r3, [r2, #28]
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <HAL_TIM_Base_MspInit+0x44>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2101      	movs	r1, #1
 800105a:	201c      	movs	r0, #28
 800105c:	f000 ff2d 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001060:	201c      	movs	r0, #28
 8001062:	f000 ff46 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a22      	ldr	r2, [pc, #136]	; (8001118 <HAL_TIM_Encoder_MspInit+0xa4>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d13d      	bne.n	8001110 <HAL_TIM_Encoder_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001094:	4b21      	ldr	r3, [pc, #132]	; (800111c <HAL_TIM_Encoder_MspInit+0xa8>)
 8001096:	69db      	ldr	r3, [r3, #28]
 8001098:	4a20      	ldr	r2, [pc, #128]	; (800111c <HAL_TIM_Encoder_MspInit+0xa8>)
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	61d3      	str	r3, [r2, #28]
 80010a0:	4b1e      	ldr	r3, [pc, #120]	; (800111c <HAL_TIM_Encoder_MspInit+0xa8>)
 80010a2:	69db      	ldr	r3, [r3, #28]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ac:	4b1b      	ldr	r3, [pc, #108]	; (800111c <HAL_TIM_Encoder_MspInit+0xa8>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a1a      	ldr	r2, [pc, #104]	; (800111c <HAL_TIM_Encoder_MspInit+0xa8>)
 80010b2:	f043 0308 	orr.w	r3, r3, #8
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b18      	ldr	r3, [pc, #96]	; (800111c <HAL_TIM_Encoder_MspInit+0xa8>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0308 	and.w	r3, r3, #8
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80010c4:	2330      	movs	r3, #48	; 0x30
 80010c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010cc:	2300      	movs	r3, #0
 80010ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	4812      	ldr	r0, [pc, #72]	; (8001120 <HAL_TIM_Encoder_MspInit+0xac>)
 80010d8:	f000 ffd6 	bl	8002088 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_TIM_Encoder_MspInit+0xb0>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
 80010ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ec:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <HAL_TIM_Encoder_MspInit+0xb0>)
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	6053      	str	r3, [r2, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	2101      	movs	r1, #1
 8001104:	201d      	movs	r0, #29
 8001106:	f000 fed8 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800110a:	201d      	movs	r0, #29
 800110c:	f000 fef1 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001110:	bf00      	nop
 8001112:	3728      	adds	r7, #40	; 0x28
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40000400 	.word	0x40000400
 800111c:	40021000 	.word	0x40021000
 8001120:	40010c00 	.word	0x40010c00
 8001124:	40010000 	.word	0x40010000

08001128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a20      	ldr	r2, [pc, #128]	; (80011c4 <HAL_UART_MspInit+0x9c>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d139      	bne.n	80011bc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001148:	4b1f      	ldr	r3, [pc, #124]	; (80011c8 <HAL_UART_MspInit+0xa0>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a1e      	ldr	r2, [pc, #120]	; (80011c8 <HAL_UART_MspInit+0xa0>)
 800114e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b1c      	ldr	r3, [pc, #112]	; (80011c8 <HAL_UART_MspInit+0xa0>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <HAL_UART_MspInit+0xa0>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a18      	ldr	r2, [pc, #96]	; (80011c8 <HAL_UART_MspInit+0xa0>)
 8001166:	f043 0304 	orr.w	r3, r3, #4
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <HAL_UART_MspInit+0xa0>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f003 0304 	and.w	r3, r3, #4
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001178:	f44f 7300 	mov.w	r3, #512	; 0x200
 800117c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117e:	2302      	movs	r3, #2
 8001180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0310 	add.w	r3, r7, #16
 800118a:	4619      	mov	r1, r3
 800118c:	480f      	ldr	r0, [pc, #60]	; (80011cc <HAL_UART_MspInit+0xa4>)
 800118e:	f000 ff7b 	bl	8002088 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001192:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001196:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	4619      	mov	r1, r3
 80011a6:	4809      	ldr	r0, [pc, #36]	; (80011cc <HAL_UART_MspInit+0xa4>)
 80011a8:	f000 ff6e 	bl	8002088 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2102      	movs	r1, #2
 80011b0:	2025      	movs	r0, #37	; 0x25
 80011b2:	f000 fe82 	bl	8001eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011b6:	2025      	movs	r0, #37	; 0x25
 80011b8:	f000 fe9b 	bl	8001ef2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011bc:	bf00      	nop
 80011be:	3720      	adds	r7, #32
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40013800 	.word	0x40013800
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010800 	.word	0x40010800

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <NMI_Handler+0x4>

080011d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <HardFault_Handler+0x4>

080011dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <MemManage_Handler+0x4>

080011e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <BusFault_Handler+0x4>

080011e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <UsageFault_Handler+0x4>

080011ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr

08001206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr

08001212 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001216:	f000 fa35 	bl	8001684 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8001226:	f000 fb44 	bl	80018b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000200 	.word	0x20000200

08001234 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001238:	4802      	ldr	r0, [pc, #8]	; (8001244 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800123a:	f000 fb3a 	bl	80018b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000200 	.word	0x20000200

08001248 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <CAN1_RX1_IRQHandler+0x10>)
 800124e:	f000 fb30 	bl	80018b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000200 	.word	0x20000200

0800125c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <CAN1_SCE_IRQHandler+0x10>)
 8001262:	f000 fb26 	bl	80018b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000200 	.word	0x20000200

08001270 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <TIM2_IRQHandler+0x10>)
 8001276:	f001 fe8f 	bl	8002f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	20000228 	.word	0x20000228

08001284 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <TIM3_IRQHandler+0x10>)
 800128a:	f001 fe85 	bl	8002f98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000270 	.word	0x20000270

08001298 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <USART1_IRQHandler+0x10>)
 800129e:	f002 fa75 	bl	800378c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200002b8 	.word	0x200002b8

080012ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
	return 1;
 80012b0:	2301      	movs	r3, #1
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <_kill>:

int _kill(int pid, int sig)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012c4:	f002 fe48 	bl	8003f58 <__errno>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2216      	movs	r2, #22
 80012cc:	601a      	str	r2, [r3, #0]
	return -1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <_exit>:

void _exit (int status)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b082      	sub	sp, #8
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012e2:	f04f 31ff 	mov.w	r1, #4294967295
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ffe7 	bl	80012ba <_kill>
	while (1) {}		/* Make sure we hang here */
 80012ec:	e7fe      	b.n	80012ec <_exit+0x12>

080012ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e00a      	b.n	8001316 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001300:	f3af 8000 	nop.w
 8001304:	4601      	mov	r1, r0
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	60ba      	str	r2, [r7, #8]
 800130c:	b2ca      	uxtb	r2, r1
 800130e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	3301      	adds	r3, #1
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	697a      	ldr	r2, [r7, #20]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	429a      	cmp	r2, r3
 800131c:	dbf0      	blt.n	8001300 <_read+0x12>
	}

return len;
 800131e:	687b      	ldr	r3, [r7, #4]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	e009      	b.n	800134e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	1c5a      	adds	r2, r3, #1
 800133e:	60ba      	str	r2, [r7, #8]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	4618      	mov	r0, r3
 8001344:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	3301      	adds	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	429a      	cmp	r2, r3
 8001354:	dbf1      	blt.n	800133a <_write+0x12>
	}
	return len;
 8001356:	687b      	ldr	r3, [r7, #4]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3718      	adds	r7, #24
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <_close>:

int _close(int file)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	return -1;
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
}
 800136c:	4618      	mov	r0, r3
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
 800137e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001386:	605a      	str	r2, [r3, #4]
	return 0;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <_isatty>:

int _isatty(int file)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	return 1;
 800139c:	2301      	movs	r3, #1
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
	return 0;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3714      	adds	r7, #20
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c8:	4a14      	ldr	r2, [pc, #80]	; (800141c <_sbrk+0x5c>)
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <_sbrk+0x60>)
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <_sbrk+0x64>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d102      	bne.n	80013e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013dc:	4b11      	ldr	r3, [pc, #68]	; (8001424 <_sbrk+0x64>)
 80013de:	4a12      	ldr	r2, [pc, #72]	; (8001428 <_sbrk+0x68>)
 80013e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <_sbrk+0x64>)
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d207      	bcs.n	8001400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f0:	f002 fdb2 	bl	8003f58 <__errno>
 80013f4:	4603      	mov	r3, r0
 80013f6:	220c      	movs	r2, #12
 80013f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	e009      	b.n	8001414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001400:	4b08      	ldr	r3, [pc, #32]	; (8001424 <_sbrk+0x64>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001406:	4b07      	ldr	r3, [pc, #28]	; (8001424 <_sbrk+0x64>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4413      	add	r3, r2
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <_sbrk+0x64>)
 8001410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001412:	68fb      	ldr	r3, [r7, #12]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20005000 	.word	0x20005000
 8001420:	00000400 	.word	0x00000400
 8001424:	200002fc 	.word	0x200002fc
 8001428:	20000340 	.word	0x20000340

0800142c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001430:	bf00      	nop
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <readUart>:
#define _UART_C

#include "uart.h"

void readUart(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
    lastReceviceTime = HAL_GetTick() + KeyTimeout;
 800143c:	f000 f934 	bl	80016a8 <HAL_GetTick>
 8001440:	4603      	mov	r3, r0
 8001442:	f203 53dc 	addw	r3, r3, #1500	; 0x5dc
 8001446:	4a0d      	ldr	r2, [pc, #52]	; (800147c <readUart+0x44>)
 8001448:	6013      	str	r3, [r2, #0]
    bufferData[countRxByte] = rxData;
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <readUart+0x48>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	461a      	mov	r2, r3
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <readUart+0x4c>)
 8001452:	7819      	ldrb	r1, [r3, #0]
 8001454:	4b0c      	ldr	r3, [pc, #48]	; (8001488 <readUart+0x50>)
 8001456:	5499      	strb	r1, [r3, r2]
    countRxByte++;
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <readUart+0x48>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	3301      	adds	r3, #1
 800145e:	b2da      	uxtb	r2, r3
 8001460:	4b07      	ldr	r3, [pc, #28]	; (8001480 <readUart+0x48>)
 8001462:	701a      	strb	r2, [r3, #0]
    totalCountbyte++;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <readUart+0x54>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	4a08      	ldr	r2, [pc, #32]	; (800148c <readUart+0x54>)
 800146c:	6013      	str	r3, [r2, #0]
    HAL_UART_Receive_IT(&PORD, &rxData, 1);
 800146e:	2201      	movs	r2, #1
 8001470:	4904      	ldr	r1, [pc, #16]	; (8001484 <readUart+0x4c>)
 8001472:	4807      	ldr	r0, [pc, #28]	; (8001490 <readUart+0x58>)
 8001474:	f002 f959 	bl	800372a <HAL_UART_Receive_IT>
}
 8001478:	bf00      	nop
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000004 	.word	0x20000004
 8001480:	20000320 	.word	0x20000320
 8001484:	20000300 	.word	0x20000300
 8001488:	20000304 	.word	0x20000304
 800148c:	2000031c 	.word	0x2000031c
 8001490:	200002b8 	.word	0x200002b8

08001494 <getLenghtAndQty>:

void getLenghtAndQty(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
  if(HAL_GetTick() > lastReceviceTime)
 800149a:	f000 f905 	bl	80016a8 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	4b39      	ldr	r3, [pc, #228]	; (8001588 <getLenghtAndQty+0xf4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d952      	bls.n	800154e <getLenghtAndQty+0xba>
  {
    lastReceviceTime = UINT_MAX;
 80014a8:	4b37      	ldr	r3, [pc, #220]	; (8001588 <getLenghtAndQty+0xf4>)
 80014aa:	f04f 32ff 	mov.w	r2, #4294967295
 80014ae:	601a      	str	r2, [r3, #0]
    rxData = 0;
 80014b0:	4b36      	ldr	r3, [pc, #216]	; (800158c <getLenghtAndQty+0xf8>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
    countRxByte = 0;
 80014b6:	4b36      	ldr	r3, [pc, #216]	; (8001590 <getLenghtAndQty+0xfc>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 10; i++)
 80014bc:	2300      	movs	r3, #0
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	e034      	b.n	800152c <getLenghtAndQty+0x98>
    {
      qtyCutData[i] = 0;
 80014c2:	4a34      	ldr	r2, [pc, #208]	; (8001594 <getLenghtAndQty+0x100>)
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4413      	add	r3, r2
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
      if(bufferData[i] == 32)
 80014cc:	4a32      	ldr	r2, [pc, #200]	; (8001598 <getLenghtAndQty+0x104>)
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4413      	add	r3, r2
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	2b20      	cmp	r3, #32
 80014d6:	d126      	bne.n	8001526 <getLenghtAndQty+0x92>
      {
        for(int j = 0; j < i; j++)
 80014d8:	2300      	movs	r3, #0
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	e00b      	b.n	80014f6 <getLenghtAndQty+0x62>
        {
          qtyCutData[j] = bufferData[j];
 80014de:	4a2e      	ldr	r2, [pc, #184]	; (8001598 <getLenghtAndQty+0x104>)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4413      	add	r3, r2
 80014e4:	7819      	ldrb	r1, [r3, #0]
 80014e6:	4a2b      	ldr	r2, [pc, #172]	; (8001594 <getLenghtAndQty+0x100>)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	4413      	add	r3, r2
 80014ec:	460a      	mov	r2, r1
 80014ee:	701a      	strb	r2, [r3, #0]
        for(int j = 0; j < i; j++)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	3301      	adds	r3, #1
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68ba      	ldr	r2, [r7, #8]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	dbef      	blt.n	80014de <getLenghtAndQty+0x4a>
        }
        for(int j = i + 1; j < 10; j++)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	3301      	adds	r3, #1
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	e00c      	b.n	8001520 <getLenghtAndQty+0x8c>
        {
          leghtCutData[j - i - 1] = bufferData[j];
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	3b01      	subs	r3, #1
 800150e:	4922      	ldr	r1, [pc, #136]	; (8001598 <getLenghtAndQty+0x104>)
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	440a      	add	r2, r1
 8001514:	7811      	ldrb	r1, [r2, #0]
 8001516:	4a21      	ldr	r2, [pc, #132]	; (800159c <getLenghtAndQty+0x108>)
 8001518:	54d1      	strb	r1, [r2, r3]
        for(int j = i + 1; j < 10; j++)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3301      	adds	r3, #1
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b09      	cmp	r3, #9
 8001524:	ddef      	ble.n	8001506 <getLenghtAndQty+0x72>
    for(int i = 0; i < 10; i++)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3301      	adds	r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2b09      	cmp	r3, #9
 8001530:	ddc7      	ble.n	80014c2 <getLenghtAndQty+0x2e>
        }
      }
    }
    for(int i = 0; i < 10; i++)
 8001532:	2300      	movs	r3, #0
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	e007      	b.n	8001548 <getLenghtAndQty+0xb4>
    {
      bufferData[i] = 0;
 8001538:	4a17      	ldr	r2, [pc, #92]	; (8001598 <getLenghtAndQty+0x104>)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	4413      	add	r3, r2
 800153e:	2200      	movs	r2, #0
 8001540:	701a      	strb	r2, [r3, #0]
    for(int i = 0; i < 10; i++)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	3301      	adds	r3, #1
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	2b09      	cmp	r3, #9
 800154c:	ddf4      	ble.n	8001538 <getLenghtAndQty+0xa4>
    }
  }
  leghtRequest = (atof((char*) (leghtCutData))) * 100;
 800154e:	4813      	ldr	r0, [pc, #76]	; (800159c <getLenghtAndQty+0x108>)
 8001550:	f002 fcfa 	bl	8003f48 <atof>
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <getLenghtAndQty+0x10c>)
 800155a:	f7fe ffbd 	bl	80004d8 <__aeabi_dmul>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff fa51 	bl	8000a0c <__aeabi_d2uiz>
 800156a:	4603      	mov	r3, r0
 800156c:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <getLenghtAndQty+0x110>)
 800156e:	6013      	str	r3, [r2, #0]
  quantityRequest = (atoi((char*) qtyCutData));
 8001570:	4808      	ldr	r0, [pc, #32]	; (8001594 <getLenghtAndQty+0x100>)
 8001572:	f002 fcec 	bl	8003f4e <atoi>
 8001576:	4603      	mov	r3, r0
 8001578:	b29a      	uxth	r2, r3
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <getLenghtAndQty+0x114>)
 800157c:	801a      	strh	r2, [r3, #0]
}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000004 	.word	0x20000004
 800158c:	20000300 	.word	0x20000300
 8001590:	20000320 	.word	0x20000320
 8001594:	20000318 	.word	0x20000318
 8001598:	20000304 	.word	0x20000304
 800159c:	20000310 	.word	0x20000310
 80015a0:	40590000 	.word	0x40590000
 80015a4:	20000324 	.word	0x20000324
 80015a8:	20000328 	.word	0x20000328

080015ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015ac:	480c      	ldr	r0, [pc, #48]	; (80015e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015ae:	490d      	ldr	r1, [pc, #52]	; (80015e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b4:	e002      	b.n	80015bc <LoopCopyDataInit>

080015b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ba:	3304      	adds	r3, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c0:	d3f9      	bcc.n	80015b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c2:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015c4:	4c0a      	ldr	r4, [pc, #40]	; (80015f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c8:	e001      	b.n	80015ce <LoopFillZerobss>

080015ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015cc:	3204      	adds	r2, #4

080015ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d0:	d3fb      	bcc.n	80015ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015d2:	f7ff ff2b 	bl	800142c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015d6:	f002 fcc5 	bl	8003f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015da:	f7ff fa93 	bl	8000b04 <main>
  bx lr
 80015de:	4770      	bx	lr
  ldr r0, =_sdata
 80015e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80015e8:	0800725c 	.word	0x0800725c
  ldr r2, =_sbss
 80015ec:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 80015f0:	20000340 	.word	0x20000340

080015f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015f4:	e7fe      	b.n	80015f4 <ADC1_2_IRQHandler>
	...

080015f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_Init+0x28>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_Init+0x28>)
 8001602:	f043 0310 	orr.w	r3, r3, #16
 8001606:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001608:	2003      	movs	r0, #3
 800160a:	f000 fc4b 	bl	8001ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160e:	2000      	movs	r0, #0
 8001610:	f000 f808 	bl	8001624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001614:	f7ff fc6c 	bl	8000ef0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40022000 	.word	0x40022000

08001624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <HAL_InitTick+0x54>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <HAL_InitTick+0x58>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	4619      	mov	r1, r3
 8001636:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800163a:	fbb3 f3f1 	udiv	r3, r3, r1
 800163e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001642:	4618      	mov	r0, r3
 8001644:	f000 fc63 	bl	8001f0e <HAL_SYSTICK_Config>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e00e      	b.n	8001670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b0f      	cmp	r3, #15
 8001656:	d80a      	bhi.n	800166e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001658:	2200      	movs	r2, #0
 800165a:	6879      	ldr	r1, [r7, #4]
 800165c:	f04f 30ff 	mov.w	r0, #4294967295
 8001660:	f000 fc2b 	bl	8001eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001664:	4a06      	ldr	r2, [pc, #24]	; (8001680 <HAL_InitTick+0x5c>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
 800166c:	e000      	b.n	8001670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000000 	.word	0x20000000
 800167c:	2000000c 	.word	0x2000000c
 8001680:	20000008 	.word	0x20000008

08001684 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_IncTick+0x1c>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	461a      	mov	r2, r3
 800168e:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <HAL_IncTick+0x20>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4413      	add	r3, r2
 8001694:	4a03      	ldr	r2, [pc, #12]	; (80016a4 <HAL_IncTick+0x20>)
 8001696:	6013      	str	r3, [r2, #0]
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	2000000c 	.word	0x2000000c
 80016a4:	2000032c 	.word	0x2000032c

080016a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return uwTick;
 80016ac:	4b02      	ldr	r3, [pc, #8]	; (80016b8 <HAL_GetTick+0x10>)
 80016ae:	681b      	ldr	r3, [r3, #0]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bc80      	pop	{r7}
 80016b6:	4770      	bx	lr
 80016b8:	2000032c 	.word	0x2000032c

080016bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e0ed      	b.n	80018aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fc3a 	bl	8000f54 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f042 0201 	orr.w	r2, r2, #1
 80016ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016f0:	f7ff ffda 	bl	80016a8 <HAL_GetTick>
 80016f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016f6:	e012      	b.n	800171e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016f8:	f7ff ffd6 	bl	80016a8 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b0a      	cmp	r3, #10
 8001704:	d90b      	bls.n	800171e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2205      	movs	r2, #5
 8001716:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e0c5      	b.n	80018aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0e5      	beq.n	80016f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0202 	bic.w	r2, r2, #2
 800173a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800173c:	f7ff ffb4 	bl	80016a8 <HAL_GetTick>
 8001740:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001742:	e012      	b.n	800176a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001744:	f7ff ffb0 	bl	80016a8 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b0a      	cmp	r3, #10
 8001750:	d90b      	bls.n	800176a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001756:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2205      	movs	r2, #5
 8001762:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e09f      	b.n	80018aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1e5      	bne.n	8001744 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7e1b      	ldrb	r3, [r3, #24]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d108      	bne.n	8001792 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	e007      	b.n	80017a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80017a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	7e5b      	ldrb	r3, [r3, #25]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d108      	bne.n	80017bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	e007      	b.n	80017cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	7e9b      	ldrb	r3, [r3, #26]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d108      	bne.n	80017e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f042 0220 	orr.w	r2, r2, #32
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	e007      	b.n	80017f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0220 	bic.w	r2, r2, #32
 80017f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	7edb      	ldrb	r3, [r3, #27]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d108      	bne.n	8001810 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f022 0210 	bic.w	r2, r2, #16
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e007      	b.n	8001820 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0210 	orr.w	r2, r2, #16
 800181e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	7f1b      	ldrb	r3, [r3, #28]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d108      	bne.n	800183a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0208 	orr.w	r2, r2, #8
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	e007      	b.n	800184a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0208 	bic.w	r2, r2, #8
 8001848:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	7f5b      	ldrb	r3, [r3, #29]
 800184e:	2b01      	cmp	r3, #1
 8001850:	d108      	bne.n	8001864 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f042 0204 	orr.w	r2, r2, #4
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	e007      	b.n	8001874 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0204 	bic.w	r2, r2, #4
 8001872:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	431a      	orrs	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	431a      	orrs	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	ea42 0103 	orr.w	r1, r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	1e5a      	subs	r2, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b08a      	sub	sp, #40	; 0x28
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d07c      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d023      	beq.n	800194a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2201      	movs	r2, #1
 8001908:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f983 	bl	8001c20 <HAL_CAN_TxMailbox0CompleteCallback>
 800191a:	e016      	b.n	800194a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	2b00      	cmp	r3, #0
 8001924:	d004      	beq.n	8001930 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001928:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
 800192e:	e00c      	b.n	800194a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b00      	cmp	r3, #0
 8001938:	d004      	beq.n	8001944 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
 8001942:	e002      	b.n	800194a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 f986 	bl	8001c56 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800194a:	69bb      	ldr	r3, [r7, #24]
 800194c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001950:	2b00      	cmp	r3, #0
 8001952:	d024      	beq.n	800199e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f44f 7280 	mov.w	r2, #256	; 0x100
 800195c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f962 	bl	8001c32 <HAL_CAN_TxMailbox1CompleteCallback>
 800196e:	e016      	b.n	800199e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001976:	2b00      	cmp	r3, #0
 8001978:	d004      	beq.n	8001984 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
 8001982:	e00c      	b.n	800199e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800198a:	2b00      	cmp	r3, #0
 800198c:	d004      	beq.n	8001998 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
 8001996:	e002      	b.n	800199e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f000 f965 	bl	8001c68 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d024      	beq.n	80019f2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d003      	beq.n	80019c4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f941 	bl	8001c44 <HAL_CAN_TxMailbox2CompleteCallback>
 80019c2:	e016      	b.n	80019f2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d004      	beq.n	80019d8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
 80019d6:	e00c      	b.n	80019f2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d004      	beq.n	80019ec <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ea:	e002      	b.n	80019f2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f000 f944 	bl	8001c7a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	f003 0308 	and.w	r3, r3, #8
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d00c      	beq.n	8001a16 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	f003 0310 	and.w	r3, r3, #16
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d007      	beq.n	8001a16 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2210      	movs	r2, #16
 8001a14:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a16:	6a3b      	ldr	r3, [r7, #32]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d00b      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f003 0308 	and.w	r3, r3, #8
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d006      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2208      	movs	r2, #8
 8001a30:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f000 f933 	bl	8001c9e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d009      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d002      	beq.n	8001a56 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 f91b 	bl	8001c8c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001a56:	6a3b      	ldr	r3, [r7, #32]
 8001a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00c      	beq.n	8001a7a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d007      	beq.n	8001a7a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a70:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2210      	movs	r2, #16
 8001a78:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001a7a:	6a3b      	ldr	r3, [r7, #32]
 8001a7c:	f003 0320 	and.w	r3, r3, #32
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d00b      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2208      	movs	r2, #8
 8001a94:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f000 f913 	bl	8001cc2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001a9c:	6a3b      	ldr	r3, [r7, #32]
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d009      	beq.n	8001aba <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	691b      	ldr	r3, [r3, #16]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f8fb 	bl	8001cb0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00b      	beq.n	8001adc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f003 0310 	and.w	r3, r3, #16
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2210      	movs	r2, #16
 8001ad4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f8fc 	bl	8001cd4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00b      	beq.n	8001afe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d006      	beq.n	8001afe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2208      	movs	r2, #8
 8001af6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f000 f8f4 	bl	8001ce6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001afe:	6a3b      	ldr	r3, [r7, #32]
 8001b00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d07b      	beq.n	8001c00 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f003 0304 	and.w	r3, r3, #4
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d072      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b2e:	6a3b      	ldr	r3, [r7, #32]
 8001b30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d003      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	f043 0304 	orr.w	r3, r3, #4
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d043      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d03e      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001b80:	2b60      	cmp	r3, #96	; 0x60
 8001b82:	d02b      	beq.n	8001bdc <HAL_CAN_IRQHandler+0x32a>
 8001b84:	2b60      	cmp	r3, #96	; 0x60
 8001b86:	d82e      	bhi.n	8001be6 <HAL_CAN_IRQHandler+0x334>
 8001b88:	2b50      	cmp	r3, #80	; 0x50
 8001b8a:	d022      	beq.n	8001bd2 <HAL_CAN_IRQHandler+0x320>
 8001b8c:	2b50      	cmp	r3, #80	; 0x50
 8001b8e:	d82a      	bhi.n	8001be6 <HAL_CAN_IRQHandler+0x334>
 8001b90:	2b40      	cmp	r3, #64	; 0x40
 8001b92:	d019      	beq.n	8001bc8 <HAL_CAN_IRQHandler+0x316>
 8001b94:	2b40      	cmp	r3, #64	; 0x40
 8001b96:	d826      	bhi.n	8001be6 <HAL_CAN_IRQHandler+0x334>
 8001b98:	2b30      	cmp	r3, #48	; 0x30
 8001b9a:	d010      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x30c>
 8001b9c:	2b30      	cmp	r3, #48	; 0x30
 8001b9e:	d822      	bhi.n	8001be6 <HAL_CAN_IRQHandler+0x334>
 8001ba0:	2b10      	cmp	r3, #16
 8001ba2:	d002      	beq.n	8001baa <HAL_CAN_IRQHandler+0x2f8>
 8001ba4:	2b20      	cmp	r3, #32
 8001ba6:	d005      	beq.n	8001bb4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ba8:	e01d      	b.n	8001be6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bac:	f043 0308 	orr.w	r3, r3, #8
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bb2:	e019      	b.n	8001be8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb6:	f043 0310 	orr.w	r3, r3, #16
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bbc:	e014      	b.n	8001be8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	f043 0320 	orr.w	r3, r3, #32
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bc6:	e00f      	b.n	8001be8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bd0:	e00a      	b.n	8001be8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001bda:	e005      	b.n	8001be8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001be4:	e000      	b.n	8001be8 <HAL_CAN_IRQHandler+0x336>
            break;
 8001be6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	699a      	ldr	r2, [r3, #24]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001bf6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d008      	beq.n	8001c18 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	431a      	orrs	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 f870 	bl	8001cf8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c18:	bf00      	nop
 8001c1a:	3728      	adds	r7, #40	; 0x28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr

08001c56 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr

08001cb0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr

08001cc2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	b083      	sub	sp, #12
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc80      	pop	{r7}
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr

08001ce6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b083      	sub	sp, #12
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr
	...

08001d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3e:	4a04      	ldr	r2, [pc, #16]	; (8001d50 <__NVIC_SetPriorityGrouping+0x44>)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	60d3      	str	r3, [r2, #12]
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bc80      	pop	{r7}
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	e000ed00 	.word	0xe000ed00

08001d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d58:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <__NVIC_GetPriorityGrouping+0x18>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	0a1b      	lsrs	r3, r3, #8
 8001d5e:	f003 0307 	and.w	r3, r3, #7
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bc80      	pop	{r7}
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	db0b      	blt.n	8001d9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d82:	79fb      	ldrb	r3, [r7, #7]
 8001d84:	f003 021f 	and.w	r2, r3, #31
 8001d88:	4906      	ldr	r1, [pc, #24]	; (8001da4 <__NVIC_EnableIRQ+0x34>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	2001      	movs	r0, #1
 8001d92:	fa00 f202 	lsl.w	r2, r0, r2
 8001d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bc80      	pop	{r7}
 8001da2:	4770      	bx	lr
 8001da4:	e000e100 	.word	0xe000e100

08001da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	db0a      	blt.n	8001dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	490c      	ldr	r1, [pc, #48]	; (8001df4 <__NVIC_SetPriority+0x4c>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	0112      	lsls	r2, r2, #4
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	440b      	add	r3, r1
 8001dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dd0:	e00a      	b.n	8001de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	4908      	ldr	r1, [pc, #32]	; (8001df8 <__NVIC_SetPriority+0x50>)
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	3b04      	subs	r3, #4
 8001de0:	0112      	lsls	r2, r2, #4
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	440b      	add	r3, r1
 8001de6:	761a      	strb	r2, [r3, #24]
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000e100 	.word	0xe000e100
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b089      	sub	sp, #36	; 0x24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	f003 0307 	and.w	r3, r3, #7
 8001e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f1c3 0307 	rsb	r3, r3, #7
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	bf28      	it	cs
 8001e1a:	2304      	movcs	r3, #4
 8001e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3304      	adds	r3, #4
 8001e22:	2b06      	cmp	r3, #6
 8001e24:	d902      	bls.n	8001e2c <NVIC_EncodePriority+0x30>
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3b03      	subs	r3, #3
 8001e2a:	e000      	b.n	8001e2e <NVIC_EncodePriority+0x32>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e30:	f04f 32ff 	mov.w	r2, #4294967295
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	401a      	ands	r2, r3
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e44:	f04f 31ff 	mov.w	r1, #4294967295
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4e:	43d9      	mvns	r1, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e54:	4313      	orrs	r3, r2
         );
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3724      	adds	r7, #36	; 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bc80      	pop	{r7}
 8001e5e:	4770      	bx	lr

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e70:	d301      	bcc.n	8001e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e72:	2301      	movs	r3, #1
 8001e74:	e00f      	b.n	8001e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e76:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <SysTick_Config+0x40>)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e7e:	210f      	movs	r1, #15
 8001e80:	f04f 30ff 	mov.w	r0, #4294967295
 8001e84:	f7ff ff90 	bl	8001da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <SysTick_Config+0x40>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e8e:	4b04      	ldr	r3, [pc, #16]	; (8001ea0 <SysTick_Config+0x40>)
 8001e90:	2207      	movs	r2, #7
 8001e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	e000e010 	.word	0xe000e010

08001ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f7ff ff2d 	bl	8001d0c <__NVIC_SetPriorityGrouping>
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
 8001ec6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ecc:	f7ff ff42 	bl	8001d54 <__NVIC_GetPriorityGrouping>
 8001ed0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	6978      	ldr	r0, [r7, #20]
 8001ed8:	f7ff ff90 	bl	8001dfc <NVIC_EncodePriority>
 8001edc:	4602      	mov	r2, r0
 8001ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff ff5f 	bl	8001da8 <__NVIC_SetPriority>
}
 8001eea:	bf00      	nop
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff ff35 	bl	8001d70 <__NVIC_EnableIRQ>
}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ffa2 	bl	8001e60 <SysTick_Config>
 8001f1c:	4603      	mov	r3, r0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b085      	sub	sp, #20
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d008      	beq.n	8001f4e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2204      	movs	r2, #4
 8001f40:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e020      	b.n	8001f90 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 020e 	bic.w	r2, r2, #14
 8001f5c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0201 	bic.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f76:	2101      	movs	r1, #1
 8001f78:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
	...

08001f9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d005      	beq.n	8001fbe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	e051      	b.n	8002062 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 020e 	bic.w	r2, r2, #14
 8001fcc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0201 	bic.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a22      	ldr	r2, [pc, #136]	; (800206c <HAL_DMA_Abort_IT+0xd0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d029      	beq.n	800203c <HAL_DMA_Abort_IT+0xa0>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a20      	ldr	r2, [pc, #128]	; (8002070 <HAL_DMA_Abort_IT+0xd4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d022      	beq.n	8002038 <HAL_DMA_Abort_IT+0x9c>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1f      	ldr	r2, [pc, #124]	; (8002074 <HAL_DMA_Abort_IT+0xd8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d01a      	beq.n	8002032 <HAL_DMA_Abort_IT+0x96>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1d      	ldr	r2, [pc, #116]	; (8002078 <HAL_DMA_Abort_IT+0xdc>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d012      	beq.n	800202c <HAL_DMA_Abort_IT+0x90>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1c      	ldr	r2, [pc, #112]	; (800207c <HAL_DMA_Abort_IT+0xe0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d00a      	beq.n	8002026 <HAL_DMA_Abort_IT+0x8a>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a1a      	ldr	r2, [pc, #104]	; (8002080 <HAL_DMA_Abort_IT+0xe4>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d102      	bne.n	8002020 <HAL_DMA_Abort_IT+0x84>
 800201a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800201e:	e00e      	b.n	800203e <HAL_DMA_Abort_IT+0xa2>
 8002020:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002024:	e00b      	b.n	800203e <HAL_DMA_Abort_IT+0xa2>
 8002026:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800202a:	e008      	b.n	800203e <HAL_DMA_Abort_IT+0xa2>
 800202c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002030:	e005      	b.n	800203e <HAL_DMA_Abort_IT+0xa2>
 8002032:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002036:	e002      	b.n	800203e <HAL_DMA_Abort_IT+0xa2>
 8002038:	2310      	movs	r3, #16
 800203a:	e000      	b.n	800203e <HAL_DMA_Abort_IT+0xa2>
 800203c:	2301      	movs	r3, #1
 800203e:	4a11      	ldr	r2, [pc, #68]	; (8002084 <HAL_DMA_Abort_IT+0xe8>)
 8002040:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	4798      	blx	r3
    } 
  }
  return status;
 8002062:	7bfb      	ldrb	r3, [r7, #15]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40020008 	.word	0x40020008
 8002070:	4002001c 	.word	0x4002001c
 8002074:	40020030 	.word	0x40020030
 8002078:	40020044 	.word	0x40020044
 800207c:	40020058 	.word	0x40020058
 8002080:	4002006c 	.word	0x4002006c
 8002084:	40020000 	.word	0x40020000

08002088 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002088:	b480      	push	{r7}
 800208a:	b08b      	sub	sp, #44	; 0x2c
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002092:	2300      	movs	r3, #0
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209a:	e169      	b.n	8002370 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800209c:	2201      	movs	r2, #1
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	69fa      	ldr	r2, [r7, #28]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	f040 8158 	bne.w	800236a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	4a9a      	ldr	r2, [pc, #616]	; (8002328 <HAL_GPIO_Init+0x2a0>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d05e      	beq.n	8002182 <HAL_GPIO_Init+0xfa>
 80020c4:	4a98      	ldr	r2, [pc, #608]	; (8002328 <HAL_GPIO_Init+0x2a0>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d875      	bhi.n	80021b6 <HAL_GPIO_Init+0x12e>
 80020ca:	4a98      	ldr	r2, [pc, #608]	; (800232c <HAL_GPIO_Init+0x2a4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d058      	beq.n	8002182 <HAL_GPIO_Init+0xfa>
 80020d0:	4a96      	ldr	r2, [pc, #600]	; (800232c <HAL_GPIO_Init+0x2a4>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d86f      	bhi.n	80021b6 <HAL_GPIO_Init+0x12e>
 80020d6:	4a96      	ldr	r2, [pc, #600]	; (8002330 <HAL_GPIO_Init+0x2a8>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d052      	beq.n	8002182 <HAL_GPIO_Init+0xfa>
 80020dc:	4a94      	ldr	r2, [pc, #592]	; (8002330 <HAL_GPIO_Init+0x2a8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d869      	bhi.n	80021b6 <HAL_GPIO_Init+0x12e>
 80020e2:	4a94      	ldr	r2, [pc, #592]	; (8002334 <HAL_GPIO_Init+0x2ac>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d04c      	beq.n	8002182 <HAL_GPIO_Init+0xfa>
 80020e8:	4a92      	ldr	r2, [pc, #584]	; (8002334 <HAL_GPIO_Init+0x2ac>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d863      	bhi.n	80021b6 <HAL_GPIO_Init+0x12e>
 80020ee:	4a92      	ldr	r2, [pc, #584]	; (8002338 <HAL_GPIO_Init+0x2b0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d046      	beq.n	8002182 <HAL_GPIO_Init+0xfa>
 80020f4:	4a90      	ldr	r2, [pc, #576]	; (8002338 <HAL_GPIO_Init+0x2b0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d85d      	bhi.n	80021b6 <HAL_GPIO_Init+0x12e>
 80020fa:	2b12      	cmp	r3, #18
 80020fc:	d82a      	bhi.n	8002154 <HAL_GPIO_Init+0xcc>
 80020fe:	2b12      	cmp	r3, #18
 8002100:	d859      	bhi.n	80021b6 <HAL_GPIO_Init+0x12e>
 8002102:	a201      	add	r2, pc, #4	; (adr r2, 8002108 <HAL_GPIO_Init+0x80>)
 8002104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002108:	08002183 	.word	0x08002183
 800210c:	0800215d 	.word	0x0800215d
 8002110:	0800216f 	.word	0x0800216f
 8002114:	080021b1 	.word	0x080021b1
 8002118:	080021b7 	.word	0x080021b7
 800211c:	080021b7 	.word	0x080021b7
 8002120:	080021b7 	.word	0x080021b7
 8002124:	080021b7 	.word	0x080021b7
 8002128:	080021b7 	.word	0x080021b7
 800212c:	080021b7 	.word	0x080021b7
 8002130:	080021b7 	.word	0x080021b7
 8002134:	080021b7 	.word	0x080021b7
 8002138:	080021b7 	.word	0x080021b7
 800213c:	080021b7 	.word	0x080021b7
 8002140:	080021b7 	.word	0x080021b7
 8002144:	080021b7 	.word	0x080021b7
 8002148:	080021b7 	.word	0x080021b7
 800214c:	08002165 	.word	0x08002165
 8002150:	08002179 	.word	0x08002179
 8002154:	4a79      	ldr	r2, [pc, #484]	; (800233c <HAL_GPIO_Init+0x2b4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d013      	beq.n	8002182 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800215a:	e02c      	b.n	80021b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	623b      	str	r3, [r7, #32]
          break;
 8002162:	e029      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	3304      	adds	r3, #4
 800216a:	623b      	str	r3, [r7, #32]
          break;
 800216c:	e024      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	68db      	ldr	r3, [r3, #12]
 8002172:	3308      	adds	r3, #8
 8002174:	623b      	str	r3, [r7, #32]
          break;
 8002176:	e01f      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	330c      	adds	r3, #12
 800217e:	623b      	str	r3, [r7, #32]
          break;
 8002180:	e01a      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d102      	bne.n	8002190 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800218a:	2304      	movs	r3, #4
 800218c:	623b      	str	r3, [r7, #32]
          break;
 800218e:	e013      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d105      	bne.n	80021a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002198:	2308      	movs	r3, #8
 800219a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	611a      	str	r2, [r3, #16]
          break;
 80021a2:	e009      	b.n	80021b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021a4:	2308      	movs	r3, #8
 80021a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	615a      	str	r2, [r3, #20]
          break;
 80021ae:	e003      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80021b0:	2300      	movs	r3, #0
 80021b2:	623b      	str	r3, [r7, #32]
          break;
 80021b4:	e000      	b.n	80021b8 <HAL_GPIO_Init+0x130>
          break;
 80021b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	2bff      	cmp	r3, #255	; 0xff
 80021bc:	d801      	bhi.n	80021c2 <HAL_GPIO_Init+0x13a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	e001      	b.n	80021c6 <HAL_GPIO_Init+0x13e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3304      	adds	r3, #4
 80021c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	2bff      	cmp	r3, #255	; 0xff
 80021cc:	d802      	bhi.n	80021d4 <HAL_GPIO_Init+0x14c>
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	e002      	b.n	80021da <HAL_GPIO_Init+0x152>
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	3b08      	subs	r3, #8
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	210f      	movs	r1, #15
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	401a      	ands	r2, r3
 80021ec:	6a39      	ldr	r1, [r7, #32]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	fa01 f303 	lsl.w	r3, r1, r3
 80021f4:	431a      	orrs	r2, r3
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 80b1 	beq.w	800236a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002208:	4b4d      	ldr	r3, [pc, #308]	; (8002340 <HAL_GPIO_Init+0x2b8>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	4a4c      	ldr	r2, [pc, #304]	; (8002340 <HAL_GPIO_Init+0x2b8>)
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	6193      	str	r3, [r2, #24]
 8002214:	4b4a      	ldr	r3, [pc, #296]	; (8002340 <HAL_GPIO_Init+0x2b8>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002220:	4a48      	ldr	r2, [pc, #288]	; (8002344 <HAL_GPIO_Init+0x2bc>)
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	3302      	adds	r3, #2
 8002228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	220f      	movs	r2, #15
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	4013      	ands	r3, r2
 8002242:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a40      	ldr	r2, [pc, #256]	; (8002348 <HAL_GPIO_Init+0x2c0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d013      	beq.n	8002274 <HAL_GPIO_Init+0x1ec>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a3f      	ldr	r2, [pc, #252]	; (800234c <HAL_GPIO_Init+0x2c4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d00d      	beq.n	8002270 <HAL_GPIO_Init+0x1e8>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	4a3e      	ldr	r2, [pc, #248]	; (8002350 <HAL_GPIO_Init+0x2c8>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d007      	beq.n	800226c <HAL_GPIO_Init+0x1e4>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a3d      	ldr	r2, [pc, #244]	; (8002354 <HAL_GPIO_Init+0x2cc>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d101      	bne.n	8002268 <HAL_GPIO_Init+0x1e0>
 8002264:	2303      	movs	r3, #3
 8002266:	e006      	b.n	8002276 <HAL_GPIO_Init+0x1ee>
 8002268:	2304      	movs	r3, #4
 800226a:	e004      	b.n	8002276 <HAL_GPIO_Init+0x1ee>
 800226c:	2302      	movs	r3, #2
 800226e:	e002      	b.n	8002276 <HAL_GPIO_Init+0x1ee>
 8002270:	2301      	movs	r3, #1
 8002272:	e000      	b.n	8002276 <HAL_GPIO_Init+0x1ee>
 8002274:	2300      	movs	r3, #0
 8002276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002278:	f002 0203 	and.w	r2, r2, #3
 800227c:	0092      	lsls	r2, r2, #2
 800227e:	4093      	lsls	r3, r2
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002286:	492f      	ldr	r1, [pc, #188]	; (8002344 <HAL_GPIO_Init+0x2bc>)
 8002288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228a:	089b      	lsrs	r3, r3, #2
 800228c:	3302      	adds	r3, #2
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d006      	beq.n	80022ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022a0:	4b2d      	ldr	r3, [pc, #180]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	492c      	ldr	r1, [pc, #176]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]
 80022ac:	e006      	b.n	80022bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022ae:	4b2a      	ldr	r3, [pc, #168]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	4928      	ldr	r1, [pc, #160]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d006      	beq.n	80022d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80022c8:	4b23      	ldr	r3, [pc, #140]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	4922      	ldr	r1, [pc, #136]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
 80022d4:	e006      	b.n	80022e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022d6:	4b20      	ldr	r3, [pc, #128]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	43db      	mvns	r3, r3
 80022de:	491e      	ldr	r1, [pc, #120]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d006      	beq.n	80022fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	4918      	ldr	r1, [pc, #96]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]
 80022fc:	e006      	b.n	800230c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022fe:	4b16      	ldr	r3, [pc, #88]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	43db      	mvns	r3, r3
 8002306:	4914      	ldr	r1, [pc, #80]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 8002308:	4013      	ands	r3, r2
 800230a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d021      	beq.n	800235c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002318:	4b0f      	ldr	r3, [pc, #60]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	490e      	ldr	r1, [pc, #56]	; (8002358 <HAL_GPIO_Init+0x2d0>)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	4313      	orrs	r3, r2
 8002322:	60cb      	str	r3, [r1, #12]
 8002324:	e021      	b.n	800236a <HAL_GPIO_Init+0x2e2>
 8002326:	bf00      	nop
 8002328:	10320000 	.word	0x10320000
 800232c:	10310000 	.word	0x10310000
 8002330:	10220000 	.word	0x10220000
 8002334:	10210000 	.word	0x10210000
 8002338:	10120000 	.word	0x10120000
 800233c:	10110000 	.word	0x10110000
 8002340:	40021000 	.word	0x40021000
 8002344:	40010000 	.word	0x40010000
 8002348:	40010800 	.word	0x40010800
 800234c:	40010c00 	.word	0x40010c00
 8002350:	40011000 	.word	0x40011000
 8002354:	40011400 	.word	0x40011400
 8002358:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <HAL_GPIO_Init+0x304>)
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	43db      	mvns	r3, r3
 8002364:	4909      	ldr	r1, [pc, #36]	; (800238c <HAL_GPIO_Init+0x304>)
 8002366:	4013      	ands	r3, r2
 8002368:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	3301      	adds	r3, #1
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002376:	fa22 f303 	lsr.w	r3, r2, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	f47f ae8e 	bne.w	800209c <HAL_GPIO_Init+0x14>
  }
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	372c      	adds	r7, #44	; 0x2c
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr
 800238c:	40010400 	.word	0x40010400

08002390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	807b      	strh	r3, [r7, #2]
 800239c:	4613      	mov	r3, r2
 800239e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023a0:	787b      	ldrb	r3, [r7, #1]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a6:	887a      	ldrh	r2, [r7, #2]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80023ac:	e003      	b.n	80023b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023ae:	887b      	ldrh	r3, [r7, #2]
 80023b0:	041a      	lsls	r2, r3, #16
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	611a      	str	r2, [r3, #16]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bc80      	pop	{r7}
 80023be:	4770      	bx	lr

080023c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e272      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 8087 	beq.w	80024ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023e0:	4b92      	ldr	r3, [pc, #584]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d00c      	beq.n	8002406 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023ec:	4b8f      	ldr	r3, [pc, #572]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 030c 	and.w	r3, r3, #12
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d112      	bne.n	800241e <HAL_RCC_OscConfig+0x5e>
 80023f8:	4b8c      	ldr	r3, [pc, #560]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002404:	d10b      	bne.n	800241e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002406:	4b89      	ldr	r3, [pc, #548]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d06c      	beq.n	80024ec <HAL_RCC_OscConfig+0x12c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d168      	bne.n	80024ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e24c      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002426:	d106      	bne.n	8002436 <HAL_RCC_OscConfig+0x76>
 8002428:	4b80      	ldr	r3, [pc, #512]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a7f      	ldr	r2, [pc, #508]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800242e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	e02e      	b.n	8002494 <HAL_RCC_OscConfig+0xd4>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10c      	bne.n	8002458 <HAL_RCC_OscConfig+0x98>
 800243e:	4b7b      	ldr	r3, [pc, #492]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a7a      	ldr	r2, [pc, #488]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	4b78      	ldr	r3, [pc, #480]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a77      	ldr	r2, [pc, #476]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002454:	6013      	str	r3, [r2, #0]
 8002456:	e01d      	b.n	8002494 <HAL_RCC_OscConfig+0xd4>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002460:	d10c      	bne.n	800247c <HAL_RCC_OscConfig+0xbc>
 8002462:	4b72      	ldr	r3, [pc, #456]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a71      	ldr	r2, [pc, #452]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	4b6f      	ldr	r3, [pc, #444]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a6e      	ldr	r2, [pc, #440]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e00b      	b.n	8002494 <HAL_RCC_OscConfig+0xd4>
 800247c:	4b6b      	ldr	r3, [pc, #428]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a6a      	ldr	r2, [pc, #424]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002486:	6013      	str	r3, [r2, #0]
 8002488:	4b68      	ldr	r3, [pc, #416]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a67      	ldr	r2, [pc, #412]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 800248e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002492:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d013      	beq.n	80024c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249c:	f7ff f904 	bl	80016a8 <HAL_GetTick>
 80024a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	e008      	b.n	80024b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a4:	f7ff f900 	bl	80016a8 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b64      	cmp	r3, #100	; 0x64
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e200      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	4b5d      	ldr	r3, [pc, #372]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0f0      	beq.n	80024a4 <HAL_RCC_OscConfig+0xe4>
 80024c2:	e014      	b.n	80024ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c4:	f7ff f8f0 	bl	80016a8 <HAL_GetTick>
 80024c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ca:	e008      	b.n	80024de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024cc:	f7ff f8ec 	bl	80016a8 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b64      	cmp	r3, #100	; 0x64
 80024d8:	d901      	bls.n	80024de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024da:	2303      	movs	r3, #3
 80024dc:	e1ec      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	4b53      	ldr	r3, [pc, #332]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x10c>
 80024ea:	e000      	b.n	80024ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d063      	beq.n	80025c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024fa:	4b4c      	ldr	r3, [pc, #304]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00b      	beq.n	800251e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002506:	4b49      	ldr	r3, [pc, #292]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 030c 	and.w	r3, r3, #12
 800250e:	2b08      	cmp	r3, #8
 8002510:	d11c      	bne.n	800254c <HAL_RCC_OscConfig+0x18c>
 8002512:	4b46      	ldr	r3, [pc, #280]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d116      	bne.n	800254c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251e:	4b43      	ldr	r3, [pc, #268]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d005      	beq.n	8002536 <HAL_RCC_OscConfig+0x176>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d001      	beq.n	8002536 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e1c0      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002536:	4b3d      	ldr	r3, [pc, #244]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4939      	ldr	r1, [pc, #228]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002546:	4313      	orrs	r3, r2
 8002548:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800254a:	e03a      	b.n	80025c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d020      	beq.n	8002596 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002554:	4b36      	ldr	r3, [pc, #216]	; (8002630 <HAL_RCC_OscConfig+0x270>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255a:	f7ff f8a5 	bl	80016a8 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002562:	f7ff f8a1 	bl	80016a8 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e1a1      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	4b2d      	ldr	r3, [pc, #180]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002580:	4b2a      	ldr	r3, [pc, #168]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	4927      	ldr	r1, [pc, #156]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 8002590:	4313      	orrs	r3, r2
 8002592:	600b      	str	r3, [r1, #0]
 8002594:	e015      	b.n	80025c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002596:	4b26      	ldr	r3, [pc, #152]	; (8002630 <HAL_RCC_OscConfig+0x270>)
 8002598:	2200      	movs	r2, #0
 800259a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7ff f884 	bl	80016a8 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a4:	f7ff f880 	bl	80016a8 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e180      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d1f0      	bne.n	80025a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0308 	and.w	r3, r3, #8
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d03a      	beq.n	8002644 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d019      	beq.n	800260a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025d6:	4b17      	ldr	r3, [pc, #92]	; (8002634 <HAL_RCC_OscConfig+0x274>)
 80025d8:	2201      	movs	r2, #1
 80025da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025dc:	f7ff f864 	bl	80016a8 <HAL_GetTick>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025e4:	f7ff f860 	bl	80016a8 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e160      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	4b0d      	ldr	r3, [pc, #52]	; (800262c <HAL_RCC_OscConfig+0x26c>)
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d0f0      	beq.n	80025e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002602:	2001      	movs	r0, #1
 8002604:	f000 fad8 	bl	8002bb8 <RCC_Delay>
 8002608:	e01c      	b.n	8002644 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_RCC_OscConfig+0x274>)
 800260c:	2200      	movs	r2, #0
 800260e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002610:	f7ff f84a 	bl	80016a8 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002616:	e00f      	b.n	8002638 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002618:	f7ff f846 	bl	80016a8 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b02      	cmp	r3, #2
 8002624:	d908      	bls.n	8002638 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e146      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
 800262a:	bf00      	nop
 800262c:	40021000 	.word	0x40021000
 8002630:	42420000 	.word	0x42420000
 8002634:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002638:	4b92      	ldr	r3, [pc, #584]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d1e9      	bne.n	8002618 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	f000 80a6 	beq.w	800279e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002652:	2300      	movs	r3, #0
 8002654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002656:	4b8b      	ldr	r3, [pc, #556]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10d      	bne.n	800267e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002662:	4b88      	ldr	r3, [pc, #544]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	4a87      	ldr	r2, [pc, #540]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800266c:	61d3      	str	r3, [r2, #28]
 800266e:	4b85      	ldr	r3, [pc, #532]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002676:	60bb      	str	r3, [r7, #8]
 8002678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800267a:	2301      	movs	r3, #1
 800267c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267e:	4b82      	ldr	r3, [pc, #520]	; (8002888 <HAL_RCC_OscConfig+0x4c8>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d118      	bne.n	80026bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800268a:	4b7f      	ldr	r3, [pc, #508]	; (8002888 <HAL_RCC_OscConfig+0x4c8>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a7e      	ldr	r2, [pc, #504]	; (8002888 <HAL_RCC_OscConfig+0x4c8>)
 8002690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002696:	f7ff f807 	bl	80016a8 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800269e:	f7ff f803 	bl	80016a8 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b64      	cmp	r3, #100	; 0x64
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e103      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	4b75      	ldr	r3, [pc, #468]	; (8002888 <HAL_RCC_OscConfig+0x4c8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d106      	bne.n	80026d2 <HAL_RCC_OscConfig+0x312>
 80026c4:	4b6f      	ldr	r3, [pc, #444]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	4a6e      	ldr	r2, [pc, #440]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6213      	str	r3, [r2, #32]
 80026d0:	e02d      	b.n	800272e <HAL_RCC_OscConfig+0x36e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10c      	bne.n	80026f4 <HAL_RCC_OscConfig+0x334>
 80026da:	4b6a      	ldr	r3, [pc, #424]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	4a69      	ldr	r2, [pc, #420]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	6213      	str	r3, [r2, #32]
 80026e6:	4b67      	ldr	r3, [pc, #412]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	6a1b      	ldr	r3, [r3, #32]
 80026ea:	4a66      	ldr	r2, [pc, #408]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026ec:	f023 0304 	bic.w	r3, r3, #4
 80026f0:	6213      	str	r3, [r2, #32]
 80026f2:	e01c      	b.n	800272e <HAL_RCC_OscConfig+0x36e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	2b05      	cmp	r3, #5
 80026fa:	d10c      	bne.n	8002716 <HAL_RCC_OscConfig+0x356>
 80026fc:	4b61      	ldr	r3, [pc, #388]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4a60      	ldr	r2, [pc, #384]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002702:	f043 0304 	orr.w	r3, r3, #4
 8002706:	6213      	str	r3, [r2, #32]
 8002708:	4b5e      	ldr	r3, [pc, #376]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 800270a:	6a1b      	ldr	r3, [r3, #32]
 800270c:	4a5d      	ldr	r2, [pc, #372]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 800270e:	f043 0301 	orr.w	r3, r3, #1
 8002712:	6213      	str	r3, [r2, #32]
 8002714:	e00b      	b.n	800272e <HAL_RCC_OscConfig+0x36e>
 8002716:	4b5b      	ldr	r3, [pc, #364]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	4a5a      	ldr	r2, [pc, #360]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	f023 0301 	bic.w	r3, r3, #1
 8002720:	6213      	str	r3, [r2, #32]
 8002722:	4b58      	ldr	r3, [pc, #352]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	4a57      	ldr	r2, [pc, #348]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	f023 0304 	bic.w	r3, r3, #4
 800272c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d015      	beq.n	8002762 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002736:	f7fe ffb7 	bl	80016a8 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273c:	e00a      	b.n	8002754 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f7fe ffb3 	bl	80016a8 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	; 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e0b1      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002754:	4b4b      	ldr	r3, [pc, #300]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ee      	beq.n	800273e <HAL_RCC_OscConfig+0x37e>
 8002760:	e014      	b.n	800278c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002762:	f7fe ffa1 	bl	80016a8 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002768:	e00a      	b.n	8002780 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276a:	f7fe ff9d 	bl	80016a8 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	; 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e09b      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002780:	4b40      	ldr	r3, [pc, #256]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1ee      	bne.n	800276a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800278c:	7dfb      	ldrb	r3, [r7, #23]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d105      	bne.n	800279e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002792:	4b3c      	ldr	r3, [pc, #240]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	4a3b      	ldr	r2, [pc, #236]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800279c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	69db      	ldr	r3, [r3, #28]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f000 8087 	beq.w	80028b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027a8:	4b36      	ldr	r3, [pc, #216]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	f003 030c 	and.w	r3, r3, #12
 80027b0:	2b08      	cmp	r3, #8
 80027b2:	d061      	beq.n	8002878 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d146      	bne.n	800284a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027bc:	4b33      	ldr	r3, [pc, #204]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c2:	f7fe ff71 	bl	80016a8 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ca:	f7fe ff6d 	bl	80016a8 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e06d      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027dc:	4b29      	ldr	r3, [pc, #164]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
 80027ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f0:	d108      	bne.n	8002804 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	4921      	ldr	r1, [pc, #132]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002804:	4b1f      	ldr	r3, [pc, #124]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a19      	ldr	r1, [r3, #32]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	430b      	orrs	r3, r1
 8002816:	491b      	ldr	r1, [pc, #108]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	4313      	orrs	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 800281e:	2201      	movs	r2, #1
 8002820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002822:	f7fe ff41 	bl	80016a8 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282a:	f7fe ff3d 	bl	80016a8 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e03d      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800283c:	4b11      	ldr	r3, [pc, #68]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0x46a>
 8002848:	e035      	b.n	80028b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <HAL_RCC_OscConfig+0x4cc>)
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7fe ff2a 	bl	80016a8 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002858:	f7fe ff26 	bl	80016a8 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b02      	cmp	r3, #2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e026      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0x498>
 8002876:	e01e      	b.n	80028b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d107      	bne.n	8002890 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e019      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
 8002884:	40021000 	.word	0x40021000
 8002888:	40007000 	.word	0x40007000
 800288c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_OscConfig+0x500>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d001      	beq.n	80028b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000

080028c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0d0      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d8:	4b6a      	ldr	r3, [pc, #424]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d910      	bls.n	8002908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b67      	ldr	r3, [pc, #412]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f023 0207 	bic.w	r2, r3, #7
 80028ee:	4965      	ldr	r1, [pc, #404]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f6:	4b63      	ldr	r3, [pc, #396]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0307 	and.w	r3, r3, #7
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	429a      	cmp	r2, r3
 8002902:	d001      	beq.n	8002908 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0b8      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d020      	beq.n	8002956 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002920:	4b59      	ldr	r3, [pc, #356]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	4a58      	ldr	r2, [pc, #352]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800292a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002938:	4b53      	ldr	r3, [pc, #332]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	4a52      	ldr	r2, [pc, #328]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 800293e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002942:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002944:	4b50      	ldr	r3, [pc, #320]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	494d      	ldr	r1, [pc, #308]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	4313      	orrs	r3, r2
 8002954:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d040      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d107      	bne.n	800297a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800296a:	4b47      	ldr	r3, [pc, #284]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d115      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e07f      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b02      	cmp	r3, #2
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002982:	4b41      	ldr	r3, [pc, #260]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e073      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002992:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e06b      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a2:	4b39      	ldr	r3, [pc, #228]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f023 0203 	bic.w	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4936      	ldr	r1, [pc, #216]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b4:	f7fe fe78 	bl	80016a8 <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029bc:	f7fe fe74 	bl	80016a8 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e053      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	4b2d      	ldr	r3, [pc, #180]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f003 020c 	and.w	r2, r3, #12
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d1eb      	bne.n	80029bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029e4:	4b27      	ldr	r3, [pc, #156]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d210      	bcs.n	8002a14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b24      	ldr	r3, [pc, #144]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 0207 	bic.w	r2, r3, #7
 80029fa:	4922      	ldr	r1, [pc, #136]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b20      	ldr	r3, [pc, #128]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 0307 	and.w	r3, r3, #7
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e032      	b.n	8002a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d008      	beq.n	8002a32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a20:	4b19      	ldr	r3, [pc, #100]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4916      	ldr	r1, [pc, #88]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d009      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a3e:	4b12      	ldr	r3, [pc, #72]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	490e      	ldr	r1, [pc, #56]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a52:	f000 f821 	bl	8002a98 <HAL_RCC_GetSysClockFreq>
 8002a56:	4602      	mov	r2, r0
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	490a      	ldr	r1, [pc, #40]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a64:	5ccb      	ldrb	r3, [r1, r3]
 8002a66:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6a:	4a09      	ldr	r2, [pc, #36]	; (8002a90 <HAL_RCC_ClockConfig+0x1cc>)
 8002a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a6e:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <HAL_RCC_ClockConfig+0x1d0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fe fdd6 	bl	8001624 <HAL_InitTick>

  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40022000 	.word	0x40022000
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	08006e10 	.word	0x08006e10
 8002a90:	20000000 	.word	0x20000000
 8002a94:	20000008 	.word	0x20000008

08002a98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a98:	b490      	push	{r4, r7}
 8002a9a:	b08a      	sub	sp, #40	; 0x28
 8002a9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a9e:	4b29      	ldr	r3, [pc, #164]	; (8002b44 <HAL_RCC_GetSysClockFreq+0xac>)
 8002aa0:	1d3c      	adds	r4, r7, #4
 8002aa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002aa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002aa8:	f240 2301 	movw	r3, #513	; 0x201
 8002aac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002ac2:	4b21      	ldr	r3, [pc, #132]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d002      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d003      	beq.n	8002ade <HAL_RCC_GetSysClockFreq+0x46>
 8002ad6:	e02b      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ad8:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002ada:	623b      	str	r3, [r7, #32]
      break;
 8002adc:	e02b      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	0c9b      	lsrs	r3, r3, #18
 8002ae2:	f003 030f 	and.w	r3, r3, #15
 8002ae6:	3328      	adds	r3, #40	; 0x28
 8002ae8:	443b      	add	r3, r7
 8002aea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002aee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d012      	beq.n	8002b20 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	0c5b      	lsrs	r3, r3, #17
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	3328      	adds	r3, #40	; 0x28
 8002b06:	443b      	add	r3, r7
 8002b08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002b0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	4a0e      	ldr	r2, [pc, #56]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b12:	fb03 f202 	mul.w	r2, r3, r2
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1e:	e004      	b.n	8002b2a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	4a0b      	ldr	r2, [pc, #44]	; (8002b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b24:	fb02 f303 	mul.w	r3, r2, r3
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	623b      	str	r3, [r7, #32]
      break;
 8002b2e:	e002      	b.n	8002b36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002b32:	623b      	str	r3, [r7, #32]
      break;
 8002b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b36:	6a3b      	ldr	r3, [r7, #32]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3728      	adds	r7, #40	; 0x28
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bc90      	pop	{r4, r7}
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	08006e00 	.word	0x08006e00
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	007a1200 	.word	0x007a1200
 8002b50:	003d0900 	.word	0x003d0900

08002b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b58:	4b02      	ldr	r3, [pc, #8]	; (8002b64 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	20000000 	.word	0x20000000

08002b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b6c:	f7ff fff2 	bl	8002b54 <HAL_RCC_GetHCLKFreq>
 8002b70:	4602      	mov	r2, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	0a1b      	lsrs	r3, r3, #8
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4903      	ldr	r1, [pc, #12]	; (8002b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b7e:	5ccb      	ldrb	r3, [r1, r3]
 8002b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000
 8002b8c:	08006e20 	.word	0x08006e20

08002b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b94:	f7ff ffde 	bl	8002b54 <HAL_RCC_GetHCLKFreq>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	0adb      	lsrs	r3, r3, #11
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	4903      	ldr	r1, [pc, #12]	; (8002bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ba6:	5ccb      	ldrb	r3, [r1, r3]
 8002ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	08006e20 	.word	0x08006e20

08002bb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <RCC_Delay+0x34>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <RCC_Delay+0x38>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	0a5b      	lsrs	r3, r3, #9
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bd4:	bf00      	nop
  }
  while (Delay --);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1e5a      	subs	r2, r3, #1
 8002bda:	60fa      	str	r2, [r7, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f9      	bne.n	8002bd4 <RCC_Delay+0x1c>
}
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	10624dd3 	.word	0x10624dd3

08002bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e041      	b.n	8002c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe fa06 	bl	800102c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	4619      	mov	r1, r3
 8002c32:	4610      	mov	r0, r2
 8002c34:	f000 fba0 	bl	8003378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d001      	beq.n	8002cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e03a      	b.n	8002d22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f042 0201 	orr.w	r2, r2, #1
 8002cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a18      	ldr	r2, [pc, #96]	; (8002d2c <HAL_TIM_Base_Start_IT+0x98>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00e      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x58>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd6:	d009      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x58>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a14      	ldr	r2, [pc, #80]	; (8002d30 <HAL_TIM_Base_Start_IT+0x9c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d004      	beq.n	8002cec <HAL_TIM_Base_Start_IT+0x58>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a13      	ldr	r2, [pc, #76]	; (8002d34 <HAL_TIM_Base_Start_IT+0xa0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d111      	bne.n	8002d10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2b06      	cmp	r3, #6
 8002cfc:	d010      	beq.n	8002d20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0201 	orr.w	r2, r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d0e:	e007      	b.n	8002d20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f042 0201 	orr.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bc80      	pop	{r7}
 8002d2a:	4770      	bx	lr
 8002d2c:	40012c00 	.word	0x40012c00
 8002d30:	40000400 	.word	0x40000400
 8002d34:	40000800 	.word	0x40000800

08002d38 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b086      	sub	sp, #24
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d101      	bne.n	8002d4c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e093      	b.n	8002e74 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d106      	bne.n	8002d66 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7fe f987 	bl	8001074 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d7c:	f023 0307 	bic.w	r3, r3, #7
 8002d80:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	f000 faf3 	bl	8003378 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dba:	f023 0303 	bic.w	r3, r3, #3
 8002dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	021b      	lsls	r3, r3, #8
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002dd8:	f023 030c 	bic.w	r3, r3, #12
 8002ddc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002de4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002de8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	4313      	orrs	r3, r2
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	011a      	lsls	r2, r3, #4
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	031b      	lsls	r3, r3, #12
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002e16:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	695b      	ldr	r3, [r3, #20]
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	4313      	orrs	r3, r2
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2201      	movs	r2, #1
 8002e46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e8c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e94:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e9c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002ea4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d110      	bne.n	8002ece <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d102      	bne.n	8002eb8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002eb2:	7b7b      	ldrb	r3, [r7, #13]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d001      	beq.n	8002ebc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e069      	b.n	8002f90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2202      	movs	r2, #2
 8002ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ecc:	e031      	b.n	8002f32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d110      	bne.n	8002ef6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ed4:	7bbb      	ldrb	r3, [r7, #14]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d102      	bne.n	8002ee0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002eda:	7b3b      	ldrb	r3, [r7, #12]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d001      	beq.n	8002ee4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e055      	b.n	8002f90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ef4:	e01d      	b.n	8002f32 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d108      	bne.n	8002f0e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002efc:	7bbb      	ldrb	r3, [r7, #14]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d105      	bne.n	8002f0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002f02:	7b7b      	ldrb	r3, [r7, #13]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d102      	bne.n	8002f0e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002f08:	7b3b      	ldrb	r3, [r7, #12]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d001      	beq.n	8002f12 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e03e      	b.n	8002f90 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2202      	movs	r2, #2
 8002f16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2202      	movs	r2, #2
 8002f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d003      	beq.n	8002f40 <HAL_TIM_Encoder_Start+0xc4>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b04      	cmp	r3, #4
 8002f3c:	d008      	beq.n	8002f50 <HAL_TIM_Encoder_Start+0xd4>
 8002f3e:	e00f      	b.n	8002f60 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2201      	movs	r2, #1
 8002f46:	2100      	movs	r1, #0
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 fb0d 	bl	8003568 <TIM_CCxChannelCmd>
      break;
 8002f4e:	e016      	b.n	8002f7e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2201      	movs	r2, #1
 8002f56:	2104      	movs	r1, #4
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fb05 	bl	8003568 <TIM_CCxChannelCmd>
      break;
 8002f5e:	e00e      	b.n	8002f7e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2201      	movs	r2, #1
 8002f66:	2100      	movs	r1, #0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fafd 	bl	8003568 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2201      	movs	r2, #1
 8002f74:	2104      	movs	r1, #4
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 faf6 	bl	8003568 <TIM_CCxChannelCmd>
      break;
 8002f7c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0201 	orr.w	r2, r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d122      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d11b      	bne.n	8002ff4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f06f 0202 	mvn.w	r2, #2
 8002fc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d003      	beq.n	8002fe2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f000 f9b1 	bl	8003342 <HAL_TIM_IC_CaptureCallback>
 8002fe0:	e005      	b.n	8002fee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f9a4 	bl	8003330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f9b3 	bl	8003354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f003 0304 	and.w	r3, r3, #4
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d122      	bne.n	8003048 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	f003 0304 	and.w	r3, r3, #4
 800300c:	2b04      	cmp	r3, #4
 800300e:	d11b      	bne.n	8003048 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f06f 0204 	mvn.w	r2, #4
 8003018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2202      	movs	r2, #2
 800301e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 f987 	bl	8003342 <HAL_TIM_IC_CaptureCallback>
 8003034:	e005      	b.n	8003042 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f97a 	bl	8003330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f989 	bl	8003354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b08      	cmp	r3, #8
 8003054:	d122      	bne.n	800309c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	2b08      	cmp	r3, #8
 8003062:	d11b      	bne.n	800309c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f06f 0208 	mvn.w	r2, #8
 800306c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2204      	movs	r2, #4
 8003072:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 f95d 	bl	8003342 <HAL_TIM_IC_CaptureCallback>
 8003088:	e005      	b.n	8003096 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f950 	bl	8003330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f000 f95f 	bl	8003354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f003 0310 	and.w	r3, r3, #16
 80030a6:	2b10      	cmp	r3, #16
 80030a8:	d122      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0310 	and.w	r3, r3, #16
 80030b4:	2b10      	cmp	r3, #16
 80030b6:	d11b      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0210 	mvn.w	r2, #16
 80030c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2208      	movs	r2, #8
 80030c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	69db      	ldr	r3, [r3, #28]
 80030ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f933 	bl	8003342 <HAL_TIM_IC_CaptureCallback>
 80030dc:	e005      	b.n	80030ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f926 	bl	8003330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f935 	bl	8003354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d10e      	bne.n	800311c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	2b01      	cmp	r3, #1
 800310a:	d107      	bne.n	800311c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0201 	mvn.w	r2, #1
 8003114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f7fd fce2 	bl	8000ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003126:	2b80      	cmp	r3, #128	; 0x80
 8003128:	d10e      	bne.n	8003148 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003134:	2b80      	cmp	r3, #128	; 0x80
 8003136:	d107      	bne.n	8003148 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fa9b 	bl	800367e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003152:	2b40      	cmp	r3, #64	; 0x40
 8003154:	d10e      	bne.n	8003174 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	d107      	bne.n	8003174 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800316c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f8f9 	bl	8003366 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b20      	cmp	r3, #32
 8003180:	d10e      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b20      	cmp	r3, #32
 800318e:	d107      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0220 	mvn.w	r2, #32
 8003198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fa66 	bl	800366c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_TIM_ConfigClockSource+0x18>
 80031bc:	2302      	movs	r3, #2
 80031be:	e0b3      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x180>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2202      	movs	r2, #2
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031de:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031e6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f8:	d03e      	beq.n	8003278 <HAL_TIM_ConfigClockSource+0xd0>
 80031fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031fe:	f200 8087 	bhi.w	8003310 <HAL_TIM_ConfigClockSource+0x168>
 8003202:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003206:	f000 8085 	beq.w	8003314 <HAL_TIM_ConfigClockSource+0x16c>
 800320a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320e:	d87f      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x168>
 8003210:	2b70      	cmp	r3, #112	; 0x70
 8003212:	d01a      	beq.n	800324a <HAL_TIM_ConfigClockSource+0xa2>
 8003214:	2b70      	cmp	r3, #112	; 0x70
 8003216:	d87b      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x168>
 8003218:	2b60      	cmp	r3, #96	; 0x60
 800321a:	d050      	beq.n	80032be <HAL_TIM_ConfigClockSource+0x116>
 800321c:	2b60      	cmp	r3, #96	; 0x60
 800321e:	d877      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x168>
 8003220:	2b50      	cmp	r3, #80	; 0x50
 8003222:	d03c      	beq.n	800329e <HAL_TIM_ConfigClockSource+0xf6>
 8003224:	2b50      	cmp	r3, #80	; 0x50
 8003226:	d873      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x168>
 8003228:	2b40      	cmp	r3, #64	; 0x40
 800322a:	d058      	beq.n	80032de <HAL_TIM_ConfigClockSource+0x136>
 800322c:	2b40      	cmp	r3, #64	; 0x40
 800322e:	d86f      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x168>
 8003230:	2b30      	cmp	r3, #48	; 0x30
 8003232:	d064      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0x156>
 8003234:	2b30      	cmp	r3, #48	; 0x30
 8003236:	d86b      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x168>
 8003238:	2b20      	cmp	r3, #32
 800323a:	d060      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0x156>
 800323c:	2b20      	cmp	r3, #32
 800323e:	d867      	bhi.n	8003310 <HAL_TIM_ConfigClockSource+0x168>
 8003240:	2b00      	cmp	r3, #0
 8003242:	d05c      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0x156>
 8003244:	2b10      	cmp	r3, #16
 8003246:	d05a      	beq.n	80032fe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003248:	e062      	b.n	8003310 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	6899      	ldr	r1, [r3, #8]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	f000 f966 	bl	800352a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800326c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	609a      	str	r2, [r3, #8]
      break;
 8003276:	e04e      	b.n	8003316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	6899      	ldr	r1, [r3, #8]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f000 f94f 	bl	800352a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689a      	ldr	r2, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800329a:	609a      	str	r2, [r3, #8]
      break;
 800329c:	e03b      	b.n	8003316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6818      	ldr	r0, [r3, #0]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	6859      	ldr	r1, [r3, #4]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	461a      	mov	r2, r3
 80032ac:	f000 f8c6 	bl	800343c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2150      	movs	r1, #80	; 0x50
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 f91d 	bl	80034f6 <TIM_ITRx_SetConfig>
      break;
 80032bc:	e02b      	b.n	8003316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6859      	ldr	r1, [r3, #4]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	461a      	mov	r2, r3
 80032cc:	f000 f8e4 	bl	8003498 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2160      	movs	r1, #96	; 0x60
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f90d 	bl	80034f6 <TIM_ITRx_SetConfig>
      break;
 80032dc:	e01b      	b.n	8003316 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6818      	ldr	r0, [r3, #0]
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	6859      	ldr	r1, [r3, #4]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	461a      	mov	r2, r3
 80032ec:	f000 f8a6 	bl	800343c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2140      	movs	r1, #64	; 0x40
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 f8fd 	bl	80034f6 <TIM_ITRx_SetConfig>
      break;
 80032fc:	e00b      	b.n	8003316 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4619      	mov	r1, r3
 8003308:	4610      	mov	r0, r2
 800330a:	f000 f8f4 	bl	80034f6 <TIM_ITRx_SetConfig>
        break;
 800330e:	e002      	b.n	8003316 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003310:	bf00      	nop
 8003312:	e000      	b.n	8003316 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003314:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003338:	bf00      	nop
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr

08003342 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr

08003366 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr

08003378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003378:	b480      	push	{r7}
 800337a:	b085      	sub	sp, #20
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a29      	ldr	r2, [pc, #164]	; (8003430 <TIM_Base_SetConfig+0xb8>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d00b      	beq.n	80033a8 <TIM_Base_SetConfig+0x30>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003396:	d007      	beq.n	80033a8 <TIM_Base_SetConfig+0x30>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a26      	ldr	r2, [pc, #152]	; (8003434 <TIM_Base_SetConfig+0xbc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d003      	beq.n	80033a8 <TIM_Base_SetConfig+0x30>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a25      	ldr	r2, [pc, #148]	; (8003438 <TIM_Base_SetConfig+0xc0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d108      	bne.n	80033ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a1c      	ldr	r2, [pc, #112]	; (8003430 <TIM_Base_SetConfig+0xb8>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00b      	beq.n	80033da <TIM_Base_SetConfig+0x62>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c8:	d007      	beq.n	80033da <TIM_Base_SetConfig+0x62>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a19      	ldr	r2, [pc, #100]	; (8003434 <TIM_Base_SetConfig+0xbc>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d003      	beq.n	80033da <TIM_Base_SetConfig+0x62>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a18      	ldr	r2, [pc, #96]	; (8003438 <TIM_Base_SetConfig+0xc0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d108      	bne.n	80033ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a07      	ldr	r2, [pc, #28]	; (8003430 <TIM_Base_SetConfig+0xb8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d103      	bne.n	8003420 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	615a      	str	r2, [r3, #20]
}
 8003426:	bf00      	nop
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr
 8003430:	40012c00 	.word	0x40012c00
 8003434:	40000400 	.word	0x40000400
 8003438:	40000800 	.word	0x40000800

0800343c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a1b      	ldr	r3, [r3, #32]
 8003452:	f023 0201 	bic.w	r2, r3, #1
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4313      	orrs	r3, r2
 8003470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f023 030a 	bic.w	r3, r3, #10
 8003478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	4313      	orrs	r3, r2
 8003480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	621a      	str	r2, [r3, #32]
}
 800348e:	bf00      	nop
 8003490:	371c      	adds	r7, #28
 8003492:	46bd      	mov	sp, r7
 8003494:	bc80      	pop	{r7}
 8003496:	4770      	bx	lr

08003498 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	f023 0210 	bic.w	r2, r3, #16
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80034c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	031b      	lsls	r3, r3, #12
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80034d4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	4313      	orrs	r3, r2
 80034de:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	697a      	ldr	r2, [r7, #20]
 80034e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	693a      	ldr	r2, [r7, #16]
 80034ea:	621a      	str	r2, [r3, #32]
}
 80034ec:	bf00      	nop
 80034ee:	371c      	adds	r7, #28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr

080034f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034f6:	b480      	push	{r7}
 80034f8:	b085      	sub	sp, #20
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
 80034fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800350e:	683a      	ldr	r2, [r7, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	f043 0307 	orr.w	r3, r3, #7
 8003518:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	609a      	str	r2, [r3, #8]
}
 8003520:	bf00      	nop
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	bc80      	pop	{r7}
 8003528:	4770      	bx	lr

0800352a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800352a:	b480      	push	{r7}
 800352c:	b087      	sub	sp, #28
 800352e:	af00      	add	r7, sp, #0
 8003530:	60f8      	str	r0, [r7, #12]
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003544:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	021a      	lsls	r2, r3, #8
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	431a      	orrs	r2, r3
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	4313      	orrs	r3, r2
 8003552:	697a      	ldr	r2, [r7, #20]
 8003554:	4313      	orrs	r3, r2
 8003556:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	609a      	str	r2, [r3, #8]
}
 800355e:	bf00      	nop
 8003560:	371c      	adds	r7, #28
 8003562:	46bd      	mov	sp, r7
 8003564:	bc80      	pop	{r7}
 8003566:	4770      	bx	lr

08003568 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f003 031f 	and.w	r3, r3, #31
 800357a:	2201      	movs	r2, #1
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6a1a      	ldr	r2, [r3, #32]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	43db      	mvns	r3, r3
 800358a:	401a      	ands	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6a1a      	ldr	r2, [r3, #32]
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	f003 031f 	and.w	r3, r3, #31
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	fa01 f303 	lsl.w	r3, r1, r3
 80035a0:	431a      	orrs	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	621a      	str	r2, [r3, #32]
}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr

080035b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d101      	bne.n	80035c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035c4:	2302      	movs	r3, #2
 80035c6:	e046      	b.n	8003656 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a16      	ldr	r2, [pc, #88]	; (8003660 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d00e      	beq.n	800362a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003614:	d009      	beq.n	800362a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a12      	ldr	r2, [pc, #72]	; (8003664 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d004      	beq.n	800362a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a10      	ldr	r2, [pc, #64]	; (8003668 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d10c      	bne.n	8003644 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003630:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	4313      	orrs	r3, r2
 800363a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	bc80      	pop	{r7}
 800365e:	4770      	bx	lr
 8003660:	40012c00 	.word	0x40012c00
 8003664:	40000400 	.word	0x40000400
 8003668:	40000800 	.word	0x40000800

0800366c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr

0800367e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	bc80      	pop	{r7}
 800368e:	4770      	bx	lr

08003690 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e03f      	b.n	8003722 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7fd fd36 	bl	8001128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2224      	movs	r2, #36	; 0x24
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fba9 	bl	8003e2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	691a      	ldr	r2, [r3, #16]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80036e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003708:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b084      	sub	sp, #16
 800372e:	af00      	add	r7, sp, #0
 8003730:	60f8      	str	r0, [r7, #12]
 8003732:	60b9      	str	r1, [r7, #8]
 8003734:	4613      	mov	r3, r2
 8003736:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b20      	cmp	r3, #32
 8003742:	d11d      	bne.n	8003780 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d002      	beq.n	8003750 <HAL_UART_Receive_IT+0x26>
 800374a:	88fb      	ldrh	r3, [r7, #6]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e016      	b.n	8003782 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_UART_Receive_IT+0x38>
 800375e:	2302      	movs	r3, #2
 8003760:	e00f      	b.n	8003782 <HAL_UART_Receive_IT+0x58>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	461a      	mov	r2, r3
 8003774:	68b9      	ldr	r1, [r7, #8]
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 f9cf 	bl	8003b1a <UART_Start_Receive_IT>
 800377c:	4603      	mov	r3, r0
 800377e:	e000      	b.n	8003782 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003780:	2302      	movs	r3, #2
  }
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b08a      	sub	sp, #40	; 0x28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	f003 030f 	and.w	r3, r3, #15
 80037ba:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10d      	bne.n	80037de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	f003 0320 	and.w	r3, r3, #32
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d008      	beq.n	80037de <HAL_UART_IRQHandler+0x52>
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fa7f 	bl	8003cda <UART_Receive_IT>
      return;
 80037dc:	e17b      	b.n	8003ad6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	f000 80b1 	beq.w	8003948 <HAL_UART_IRQHandler+0x1bc>
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d105      	bne.n	80037fc <HAL_UART_IRQHandler+0x70>
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 80a6 	beq.w	8003948 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00a      	beq.n	800381c <HAL_UART_IRQHandler+0x90>
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380c:	2b00      	cmp	r3, #0
 800380e:	d005      	beq.n	800381c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	f043 0201 	orr.w	r2, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <HAL_UART_IRQHandler+0xb0>
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003834:	f043 0202 	orr.w	r2, r3, #2
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HAL_UART_IRQHandler+0xd0>
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	f043 0204 	orr.w	r2, r3, #4
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800385c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00f      	beq.n	8003886 <HAL_UART_IRQHandler+0xfa>
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	f003 0320 	and.w	r3, r3, #32
 800386c:	2b00      	cmp	r3, #0
 800386e:	d104      	bne.n	800387a <HAL_UART_IRQHandler+0xee>
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d005      	beq.n	8003886 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f043 0208 	orr.w	r2, r3, #8
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 811e 	beq.w	8003acc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <HAL_UART_IRQHandler+0x11e>
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	f003 0320 	and.w	r3, r3, #32
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fa18 	bl	8003cda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	695b      	ldr	r3, [r3, #20]
 80038b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf14      	ite	ne
 80038b8:	2301      	movne	r3, #1
 80038ba:	2300      	moveq	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d102      	bne.n	80038d2 <HAL_UART_IRQHandler+0x146>
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d031      	beq.n	8003936 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f95a 	bl	8003b8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d023      	beq.n	800392e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038f4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d013      	beq.n	8003926 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003902:	4a76      	ldr	r2, [pc, #472]	; (8003adc <HAL_UART_IRQHandler+0x350>)
 8003904:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800390a:	4618      	mov	r0, r3
 800390c:	f7fe fb46 	bl	8001f9c <HAL_DMA_Abort_IT>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d016      	beq.n	8003944 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800391a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003920:	4610      	mov	r0, r2
 8003922:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003924:	e00e      	b.n	8003944 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 f8e3 	bl	8003af2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800392c:	e00a      	b.n	8003944 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f8df 	bl	8003af2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003934:	e006      	b.n	8003944 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 f8db 	bl	8003af2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003942:	e0c3      	b.n	8003acc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003944:	bf00      	nop
    return;
 8003946:	e0c1      	b.n	8003acc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394c:	2b01      	cmp	r3, #1
 800394e:	f040 80a1 	bne.w	8003a94 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8003952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003954:	f003 0310 	and.w	r3, r3, #16
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 809b 	beq.w	8003a94 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8095 	beq.w	8003a94 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800396a:	2300      	movs	r3, #0
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398a:	2b00      	cmp	r3, #0
 800398c:	d04e      	beq.n	8003a2c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003998:	8a3b      	ldrh	r3, [r7, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 8098 	beq.w	8003ad0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039a4:	8a3a      	ldrh	r2, [r7, #16]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	f080 8092 	bcs.w	8003ad0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	8a3a      	ldrh	r2, [r7, #16]
 80039b0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d02b      	beq.n	8003a14 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68da      	ldr	r2, [r3, #12]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039ca:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695a      	ldr	r2, [r3, #20]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0201 	bic.w	r2, r2, #1
 80039da:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695a      	ldr	r2, [r3, #20]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039ea:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2220      	movs	r2, #32
 80039f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0210 	bic.w	r2, r2, #16
 8003a08:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe fa89 	bl	8001f26 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	4619      	mov	r1, r3
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f000 f86d 	bl	8003b04 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a2a:	e051      	b.n	8003ad0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d047      	beq.n	8003ad4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003a44:	8a7b      	ldrh	r3, [r7, #18]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d044      	beq.n	8003ad4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003a58:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695a      	ldr	r2, [r3, #20]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0201 	bic.w	r2, r2, #1
 8003a68:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0210 	bic.w	r2, r2, #16
 8003a86:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a88:	8a7b      	ldrh	r3, [r7, #18]
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f839 	bl	8003b04 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003a92:	e01f      	b.n	8003ad4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d008      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x324>
 8003a9e:	6a3b      	ldr	r3, [r7, #32]
 8003aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 f8af 	bl	8003c0c <UART_Transmit_IT>
    return;
 8003aae:	e012      	b.n	8003ad6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00d      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x34a>
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f8f0 	bl	8003caa <UART_EndTransmit_IT>
    return;
 8003aca:	e004      	b.n	8003ad6 <HAL_UART_IRQHandler+0x34a>
    return;
 8003acc:	bf00      	nop
 8003ace:	e002      	b.n	8003ad6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003ad0:	bf00      	nop
 8003ad2:	e000      	b.n	8003ad6 <HAL_UART_IRQHandler+0x34a>
      return;
 8003ad4:	bf00      	nop
  }
}
 8003ad6:	3728      	adds	r7, #40	; 0x28
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	08003be5 	.word	0x08003be5

08003ae0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr

08003af2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bc80      	pop	{r7}
 8003b02:	4770      	bx	lr

08003b04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr

08003b1a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	b085      	sub	sp, #20
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	4613      	mov	r3, r2
 8003b26:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	88fa      	ldrh	r2, [r7, #6]
 8003b32:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	88fa      	ldrh	r2, [r7, #6]
 8003b38:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2222      	movs	r2, #34	; 0x22
 8003b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68da      	ldr	r2, [r3, #12]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b5e:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0201 	orr.w	r2, r2, #1
 8003b6e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68da      	ldr	r2, [r3, #12]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0220 	orr.w	r2, r2, #32
 8003b7e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bc80      	pop	{r7}
 8003b8a:	4770      	bx	lr

08003b8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003ba2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695a      	ldr	r2, [r3, #20]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0201 	bic.w	r2, r2, #1
 8003bb2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d107      	bne.n	8003bcc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0210 	bic.w	r2, r2, #16
 8003bca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bc80      	pop	{r7}
 8003be2:	4770      	bx	lr

08003be4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f7ff ff77 	bl	8003af2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c04:	bf00      	nop
 8003c06:	3710      	adds	r7, #16
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b21      	cmp	r3, #33	; 0x21
 8003c1e:	d13e      	bne.n	8003c9e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c28:	d114      	bne.n	8003c54 <UART_Transmit_IT+0x48>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d110      	bne.n	8003c54 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	881b      	ldrh	r3, [r3, #0]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c46:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a1b      	ldr	r3, [r3, #32]
 8003c4c:	1c9a      	adds	r2, r3, #2
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	621a      	str	r2, [r3, #32]
 8003c52:	e008      	b.n	8003c66 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	1c59      	adds	r1, r3, #1
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6211      	str	r1, [r2, #32]
 8003c5e:	781a      	ldrb	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	4619      	mov	r1, r3
 8003c74:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10f      	bne.n	8003c9a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e000      	b.n	8003ca0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c9e:	2302      	movs	r3, #2
  }
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr

08003caa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b082      	sub	sp, #8
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7ff ff08 	bl	8003ae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b086      	sub	sp, #24
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b22      	cmp	r3, #34	; 0x22
 8003cec:	f040 8099 	bne.w	8003e22 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cf8:	d117      	bne.n	8003d2a <UART_Receive_IT+0x50>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d113      	bne.n	8003d2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d0a:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d18:	b29a      	uxth	r2, r3
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d22:	1c9a      	adds	r2, r3, #2
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	629a      	str	r2, [r3, #40]	; 0x28
 8003d28:	e026      	b.n	8003d78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2e:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d3c:	d007      	beq.n	8003d4e <UART_Receive_IT+0x74>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10a      	bne.n	8003d5c <UART_Receive_IT+0x82>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	701a      	strb	r2, [r3, #0]
 8003d5a:	e008      	b.n	8003d6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	4619      	mov	r1, r3
 8003d86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d148      	bne.n	8003e1e <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0220 	bic.w	r2, r2, #32
 8003d9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	68da      	ldr	r2, [r3, #12]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003daa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	695a      	ldr	r2, [r3, #20]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0201 	bic.w	r2, r2, #1
 8003dba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d123      	bne.n	8003e14 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f022 0210 	bic.w	r2, r2, #16
 8003de0:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0310 	and.w	r3, r3, #16
 8003dec:	2b10      	cmp	r3, #16
 8003dee:	d10a      	bne.n	8003e06 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003df0:	2300      	movs	r3, #0
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60fb      	str	r3, [r7, #12]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	60fb      	str	r3, [r7, #12]
 8003e04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f7ff fe79 	bl	8003b04 <HAL_UARTEx_RxEventCallback>
 8003e12:	e002      	b.n	8003e1a <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7fc fe51 	bl	8000abc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e002      	b.n	8003e24 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	e000      	b.n	8003e24 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003e22:	2302      	movs	r3, #2
  }
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e66:	f023 030c 	bic.w	r3, r3, #12
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6812      	ldr	r2, [r2, #0]
 8003e6e:	68b9      	ldr	r1, [r7, #8]
 8003e70:	430b      	orrs	r3, r1
 8003e72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699a      	ldr	r2, [r3, #24]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	430a      	orrs	r2, r1
 8003e88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a2c      	ldr	r2, [pc, #176]	; (8003f40 <UART_SetConfig+0x114>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d103      	bne.n	8003e9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003e94:	f7fe fe7c 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	e002      	b.n	8003ea2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003e9c:	f7fe fe64 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8003ea0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009a      	lsls	r2, r3, #2
 8003eac:	441a      	add	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb8:	4a22      	ldr	r2, [pc, #136]	; (8003f44 <UART_SetConfig+0x118>)
 8003eba:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebe:	095b      	lsrs	r3, r3, #5
 8003ec0:	0119      	lsls	r1, r3, #4
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	009a      	lsls	r2, r3, #2
 8003ecc:	441a      	add	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ed8:	4b1a      	ldr	r3, [pc, #104]	; (8003f44 <UART_SetConfig+0x118>)
 8003eda:	fba3 0302 	umull	r0, r3, r3, r2
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	2064      	movs	r0, #100	; 0x64
 8003ee2:	fb00 f303 	mul.w	r3, r0, r3
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	3332      	adds	r3, #50	; 0x32
 8003eec:	4a15      	ldr	r2, [pc, #84]	; (8003f44 <UART_SetConfig+0x118>)
 8003eee:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ef8:	4419      	add	r1, r3
 8003efa:	68fa      	ldr	r2, [r7, #12]
 8003efc:	4613      	mov	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	009a      	lsls	r2, r3, #2
 8003f04:	441a      	add	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f10:	4b0c      	ldr	r3, [pc, #48]	; (8003f44 <UART_SetConfig+0x118>)
 8003f12:	fba3 0302 	umull	r0, r3, r3, r2
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	2064      	movs	r0, #100	; 0x64
 8003f1a:	fb00 f303 	mul.w	r3, r0, r3
 8003f1e:	1ad3      	subs	r3, r2, r3
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	3332      	adds	r3, #50	; 0x32
 8003f24:	4a07      	ldr	r2, [pc, #28]	; (8003f44 <UART_SetConfig+0x118>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	f003 020f 	and.w	r2, r3, #15
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	440a      	add	r2, r1
 8003f36:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f38:	bf00      	nop
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40013800 	.word	0x40013800
 8003f44:	51eb851f 	.word	0x51eb851f

08003f48 <atof>:
 8003f48:	2100      	movs	r1, #0
 8003f4a:	f000 be41 	b.w	8004bd0 <strtod>

08003f4e <atoi>:
 8003f4e:	220a      	movs	r2, #10
 8003f50:	2100      	movs	r1, #0
 8003f52:	f000 bec5 	b.w	8004ce0 <strtol>
	...

08003f58 <__errno>:
 8003f58:	4b01      	ldr	r3, [pc, #4]	; (8003f60 <__errno+0x8>)
 8003f5a:	6818      	ldr	r0, [r3, #0]
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	20000010 	.word	0x20000010

08003f64 <__libc_init_array>:
 8003f64:	b570      	push	{r4, r5, r6, lr}
 8003f66:	2600      	movs	r6, #0
 8003f68:	4d0c      	ldr	r5, [pc, #48]	; (8003f9c <__libc_init_array+0x38>)
 8003f6a:	4c0d      	ldr	r4, [pc, #52]	; (8003fa0 <__libc_init_array+0x3c>)
 8003f6c:	1b64      	subs	r4, r4, r5
 8003f6e:	10a4      	asrs	r4, r4, #2
 8003f70:	42a6      	cmp	r6, r4
 8003f72:	d109      	bne.n	8003f88 <__libc_init_array+0x24>
 8003f74:	f002 ff38 	bl	8006de8 <_init>
 8003f78:	2600      	movs	r6, #0
 8003f7a:	4d0a      	ldr	r5, [pc, #40]	; (8003fa4 <__libc_init_array+0x40>)
 8003f7c:	4c0a      	ldr	r4, [pc, #40]	; (8003fa8 <__libc_init_array+0x44>)
 8003f7e:	1b64      	subs	r4, r4, r5
 8003f80:	10a4      	asrs	r4, r4, #2
 8003f82:	42a6      	cmp	r6, r4
 8003f84:	d105      	bne.n	8003f92 <__libc_init_array+0x2e>
 8003f86:	bd70      	pop	{r4, r5, r6, pc}
 8003f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f8c:	4798      	blx	r3
 8003f8e:	3601      	adds	r6, #1
 8003f90:	e7ee      	b.n	8003f70 <__libc_init_array+0xc>
 8003f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f96:	4798      	blx	r3
 8003f98:	3601      	adds	r6, #1
 8003f9a:	e7f2      	b.n	8003f82 <__libc_init_array+0x1e>
 8003f9c:	08007254 	.word	0x08007254
 8003fa0:	08007254 	.word	0x08007254
 8003fa4:	08007254 	.word	0x08007254
 8003fa8:	08007258 	.word	0x08007258

08003fac <memset>:
 8003fac:	4603      	mov	r3, r0
 8003fae:	4402      	add	r2, r0
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d100      	bne.n	8003fb6 <memset+0xa>
 8003fb4:	4770      	bx	lr
 8003fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003fba:	e7f9      	b.n	8003fb0 <memset+0x4>

08003fbc <sulp>:
 8003fbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc0:	460f      	mov	r7, r1
 8003fc2:	4690      	mov	r8, r2
 8003fc4:	f001 fd8c 	bl	8005ae0 <__ulp>
 8003fc8:	4604      	mov	r4, r0
 8003fca:	460d      	mov	r5, r1
 8003fcc:	f1b8 0f00 	cmp.w	r8, #0
 8003fd0:	d011      	beq.n	8003ff6 <sulp+0x3a>
 8003fd2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8003fd6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	dd0b      	ble.n	8003ff6 <sulp+0x3a>
 8003fde:	2400      	movs	r4, #0
 8003fe0:	051b      	lsls	r3, r3, #20
 8003fe2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003fe6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003fea:	4622      	mov	r2, r4
 8003fec:	462b      	mov	r3, r5
 8003fee:	f7fc fa73 	bl	80004d8 <__aeabi_dmul>
 8003ff2:	4604      	mov	r4, r0
 8003ff4:	460d      	mov	r5, r1
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	4629      	mov	r1, r5
 8003ffa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004000 <_strtod_l>:
 8004000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004004:	469b      	mov	fp, r3
 8004006:	2300      	movs	r3, #0
 8004008:	b09f      	sub	sp, #124	; 0x7c
 800400a:	931a      	str	r3, [sp, #104]	; 0x68
 800400c:	4b9e      	ldr	r3, [pc, #632]	; (8004288 <_strtod_l+0x288>)
 800400e:	4682      	mov	sl, r0
 8004010:	681f      	ldr	r7, [r3, #0]
 8004012:	460e      	mov	r6, r1
 8004014:	4638      	mov	r0, r7
 8004016:	9215      	str	r2, [sp, #84]	; 0x54
 8004018:	f7fc f89a 	bl	8000150 <strlen>
 800401c:	f04f 0800 	mov.w	r8, #0
 8004020:	4604      	mov	r4, r0
 8004022:	f04f 0900 	mov.w	r9, #0
 8004026:	9619      	str	r6, [sp, #100]	; 0x64
 8004028:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800402a:	781a      	ldrb	r2, [r3, #0]
 800402c:	2a2b      	cmp	r2, #43	; 0x2b
 800402e:	d04c      	beq.n	80040ca <_strtod_l+0xca>
 8004030:	d83a      	bhi.n	80040a8 <_strtod_l+0xa8>
 8004032:	2a0d      	cmp	r2, #13
 8004034:	d833      	bhi.n	800409e <_strtod_l+0x9e>
 8004036:	2a08      	cmp	r2, #8
 8004038:	d833      	bhi.n	80040a2 <_strtod_l+0xa2>
 800403a:	2a00      	cmp	r2, #0
 800403c:	d03d      	beq.n	80040ba <_strtod_l+0xba>
 800403e:	2300      	movs	r3, #0
 8004040:	930a      	str	r3, [sp, #40]	; 0x28
 8004042:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004044:	782b      	ldrb	r3, [r5, #0]
 8004046:	2b30      	cmp	r3, #48	; 0x30
 8004048:	f040 80aa 	bne.w	80041a0 <_strtod_l+0x1a0>
 800404c:	786b      	ldrb	r3, [r5, #1]
 800404e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004052:	2b58      	cmp	r3, #88	; 0x58
 8004054:	d166      	bne.n	8004124 <_strtod_l+0x124>
 8004056:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004058:	4650      	mov	r0, sl
 800405a:	9301      	str	r3, [sp, #4]
 800405c:	ab1a      	add	r3, sp, #104	; 0x68
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	4a8a      	ldr	r2, [pc, #552]	; (800428c <_strtod_l+0x28c>)
 8004062:	f8cd b008 	str.w	fp, [sp, #8]
 8004066:	ab1b      	add	r3, sp, #108	; 0x6c
 8004068:	a919      	add	r1, sp, #100	; 0x64
 800406a:	f000 feab 	bl	8004dc4 <__gethex>
 800406e:	f010 0607 	ands.w	r6, r0, #7
 8004072:	4604      	mov	r4, r0
 8004074:	d005      	beq.n	8004082 <_strtod_l+0x82>
 8004076:	2e06      	cmp	r6, #6
 8004078:	d129      	bne.n	80040ce <_strtod_l+0xce>
 800407a:	2300      	movs	r3, #0
 800407c:	3501      	adds	r5, #1
 800407e:	9519      	str	r5, [sp, #100]	; 0x64
 8004080:	930a      	str	r3, [sp, #40]	; 0x28
 8004082:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004084:	2b00      	cmp	r3, #0
 8004086:	f040 858a 	bne.w	8004b9e <_strtod_l+0xb9e>
 800408a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800408c:	b1d3      	cbz	r3, 80040c4 <_strtod_l+0xc4>
 800408e:	4642      	mov	r2, r8
 8004090:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004094:	4610      	mov	r0, r2
 8004096:	4619      	mov	r1, r3
 8004098:	b01f      	add	sp, #124	; 0x7c
 800409a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800409e:	2a20      	cmp	r2, #32
 80040a0:	d1cd      	bne.n	800403e <_strtod_l+0x3e>
 80040a2:	3301      	adds	r3, #1
 80040a4:	9319      	str	r3, [sp, #100]	; 0x64
 80040a6:	e7bf      	b.n	8004028 <_strtod_l+0x28>
 80040a8:	2a2d      	cmp	r2, #45	; 0x2d
 80040aa:	d1c8      	bne.n	800403e <_strtod_l+0x3e>
 80040ac:	2201      	movs	r2, #1
 80040ae:	920a      	str	r2, [sp, #40]	; 0x28
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	9219      	str	r2, [sp, #100]	; 0x64
 80040b4:	785b      	ldrb	r3, [r3, #1]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1c3      	bne.n	8004042 <_strtod_l+0x42>
 80040ba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80040bc:	9619      	str	r6, [sp, #100]	; 0x64
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f040 856b 	bne.w	8004b9a <_strtod_l+0xb9a>
 80040c4:	4642      	mov	r2, r8
 80040c6:	464b      	mov	r3, r9
 80040c8:	e7e4      	b.n	8004094 <_strtod_l+0x94>
 80040ca:	2200      	movs	r2, #0
 80040cc:	e7ef      	b.n	80040ae <_strtod_l+0xae>
 80040ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80040d0:	b13a      	cbz	r2, 80040e2 <_strtod_l+0xe2>
 80040d2:	2135      	movs	r1, #53	; 0x35
 80040d4:	a81c      	add	r0, sp, #112	; 0x70
 80040d6:	f001 fe07 	bl	8005ce8 <__copybits>
 80040da:	4650      	mov	r0, sl
 80040dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80040de:	f001 f9cf 	bl	8005480 <_Bfree>
 80040e2:	3e01      	subs	r6, #1
 80040e4:	2e04      	cmp	r6, #4
 80040e6:	d806      	bhi.n	80040f6 <_strtod_l+0xf6>
 80040e8:	e8df f006 	tbb	[pc, r6]
 80040ec:	1714030a 	.word	0x1714030a
 80040f0:	0a          	.byte	0x0a
 80040f1:	00          	.byte	0x00
 80040f2:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80040f6:	0721      	lsls	r1, r4, #28
 80040f8:	d5c3      	bpl.n	8004082 <_strtod_l+0x82>
 80040fa:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80040fe:	e7c0      	b.n	8004082 <_strtod_l+0x82>
 8004100:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004102:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004106:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800410a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800410e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004112:	e7f0      	b.n	80040f6 <_strtod_l+0xf6>
 8004114:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8004290 <_strtod_l+0x290>
 8004118:	e7ed      	b.n	80040f6 <_strtod_l+0xf6>
 800411a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800411e:	f04f 38ff 	mov.w	r8, #4294967295
 8004122:	e7e8      	b.n	80040f6 <_strtod_l+0xf6>
 8004124:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004126:	1c5a      	adds	r2, r3, #1
 8004128:	9219      	str	r2, [sp, #100]	; 0x64
 800412a:	785b      	ldrb	r3, [r3, #1]
 800412c:	2b30      	cmp	r3, #48	; 0x30
 800412e:	d0f9      	beq.n	8004124 <_strtod_l+0x124>
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0a6      	beq.n	8004082 <_strtod_l+0x82>
 8004134:	2301      	movs	r3, #1
 8004136:	9307      	str	r3, [sp, #28]
 8004138:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800413a:	220a      	movs	r2, #10
 800413c:	9308      	str	r3, [sp, #32]
 800413e:	2300      	movs	r3, #0
 8004140:	469b      	mov	fp, r3
 8004142:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004146:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004148:	7805      	ldrb	r5, [r0, #0]
 800414a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800414e:	b2d9      	uxtb	r1, r3
 8004150:	2909      	cmp	r1, #9
 8004152:	d927      	bls.n	80041a4 <_strtod_l+0x1a4>
 8004154:	4622      	mov	r2, r4
 8004156:	4639      	mov	r1, r7
 8004158:	f001 fec8 	bl	8005eec <strncmp>
 800415c:	2800      	cmp	r0, #0
 800415e:	d033      	beq.n	80041c8 <_strtod_l+0x1c8>
 8004160:	2000      	movs	r0, #0
 8004162:	462a      	mov	r2, r5
 8004164:	465c      	mov	r4, fp
 8004166:	4603      	mov	r3, r0
 8004168:	9004      	str	r0, [sp, #16]
 800416a:	2a65      	cmp	r2, #101	; 0x65
 800416c:	d001      	beq.n	8004172 <_strtod_l+0x172>
 800416e:	2a45      	cmp	r2, #69	; 0x45
 8004170:	d114      	bne.n	800419c <_strtod_l+0x19c>
 8004172:	b91c      	cbnz	r4, 800417c <_strtod_l+0x17c>
 8004174:	9a07      	ldr	r2, [sp, #28]
 8004176:	4302      	orrs	r2, r0
 8004178:	d09f      	beq.n	80040ba <_strtod_l+0xba>
 800417a:	2400      	movs	r4, #0
 800417c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800417e:	1c72      	adds	r2, r6, #1
 8004180:	9219      	str	r2, [sp, #100]	; 0x64
 8004182:	7872      	ldrb	r2, [r6, #1]
 8004184:	2a2b      	cmp	r2, #43	; 0x2b
 8004186:	d079      	beq.n	800427c <_strtod_l+0x27c>
 8004188:	2a2d      	cmp	r2, #45	; 0x2d
 800418a:	f000 8083 	beq.w	8004294 <_strtod_l+0x294>
 800418e:	2700      	movs	r7, #0
 8004190:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004194:	2909      	cmp	r1, #9
 8004196:	f240 8083 	bls.w	80042a0 <_strtod_l+0x2a0>
 800419a:	9619      	str	r6, [sp, #100]	; 0x64
 800419c:	2500      	movs	r5, #0
 800419e:	e09f      	b.n	80042e0 <_strtod_l+0x2e0>
 80041a0:	2300      	movs	r3, #0
 80041a2:	e7c8      	b.n	8004136 <_strtod_l+0x136>
 80041a4:	f1bb 0f08 	cmp.w	fp, #8
 80041a8:	bfd5      	itete	le
 80041aa:	9906      	ldrle	r1, [sp, #24]
 80041ac:	9905      	ldrgt	r1, [sp, #20]
 80041ae:	fb02 3301 	mlale	r3, r2, r1, r3
 80041b2:	fb02 3301 	mlagt	r3, r2, r1, r3
 80041b6:	f100 0001 	add.w	r0, r0, #1
 80041ba:	bfd4      	ite	le
 80041bc:	9306      	strle	r3, [sp, #24]
 80041be:	9305      	strgt	r3, [sp, #20]
 80041c0:	f10b 0b01 	add.w	fp, fp, #1
 80041c4:	9019      	str	r0, [sp, #100]	; 0x64
 80041c6:	e7be      	b.n	8004146 <_strtod_l+0x146>
 80041c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80041ca:	191a      	adds	r2, r3, r4
 80041cc:	9219      	str	r2, [sp, #100]	; 0x64
 80041ce:	5d1a      	ldrb	r2, [r3, r4]
 80041d0:	f1bb 0f00 	cmp.w	fp, #0
 80041d4:	d036      	beq.n	8004244 <_strtod_l+0x244>
 80041d6:	465c      	mov	r4, fp
 80041d8:	9004      	str	r0, [sp, #16]
 80041da:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80041de:	2b09      	cmp	r3, #9
 80041e0:	d912      	bls.n	8004208 <_strtod_l+0x208>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e7c1      	b.n	800416a <_strtod_l+0x16a>
 80041e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80041e8:	3001      	adds	r0, #1
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	9219      	str	r2, [sp, #100]	; 0x64
 80041ee:	785a      	ldrb	r2, [r3, #1]
 80041f0:	2a30      	cmp	r2, #48	; 0x30
 80041f2:	d0f8      	beq.n	80041e6 <_strtod_l+0x1e6>
 80041f4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	f200 84d5 	bhi.w	8004ba8 <_strtod_l+0xba8>
 80041fe:	9004      	str	r0, [sp, #16]
 8004200:	2000      	movs	r0, #0
 8004202:	4604      	mov	r4, r0
 8004204:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004206:	9308      	str	r3, [sp, #32]
 8004208:	3a30      	subs	r2, #48	; 0x30
 800420a:	f100 0301 	add.w	r3, r0, #1
 800420e:	d013      	beq.n	8004238 <_strtod_l+0x238>
 8004210:	9904      	ldr	r1, [sp, #16]
 8004212:	1905      	adds	r5, r0, r4
 8004214:	4419      	add	r1, r3
 8004216:	9104      	str	r1, [sp, #16]
 8004218:	4623      	mov	r3, r4
 800421a:	210a      	movs	r1, #10
 800421c:	42ab      	cmp	r3, r5
 800421e:	d113      	bne.n	8004248 <_strtod_l+0x248>
 8004220:	1823      	adds	r3, r4, r0
 8004222:	2b08      	cmp	r3, #8
 8004224:	f104 0401 	add.w	r4, r4, #1
 8004228:	4404      	add	r4, r0
 800422a:	dc1b      	bgt.n	8004264 <_strtod_l+0x264>
 800422c:	230a      	movs	r3, #10
 800422e:	9906      	ldr	r1, [sp, #24]
 8004230:	fb03 2301 	mla	r3, r3, r1, r2
 8004234:	9306      	str	r3, [sp, #24]
 8004236:	2300      	movs	r3, #0
 8004238:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800423a:	4618      	mov	r0, r3
 800423c:	1c51      	adds	r1, r2, #1
 800423e:	9119      	str	r1, [sp, #100]	; 0x64
 8004240:	7852      	ldrb	r2, [r2, #1]
 8004242:	e7ca      	b.n	80041da <_strtod_l+0x1da>
 8004244:	4658      	mov	r0, fp
 8004246:	e7d3      	b.n	80041f0 <_strtod_l+0x1f0>
 8004248:	2b08      	cmp	r3, #8
 800424a:	dc04      	bgt.n	8004256 <_strtod_l+0x256>
 800424c:	9f06      	ldr	r7, [sp, #24]
 800424e:	434f      	muls	r7, r1
 8004250:	9706      	str	r7, [sp, #24]
 8004252:	3301      	adds	r3, #1
 8004254:	e7e2      	b.n	800421c <_strtod_l+0x21c>
 8004256:	1c5f      	adds	r7, r3, #1
 8004258:	2f10      	cmp	r7, #16
 800425a:	bfde      	ittt	le
 800425c:	9f05      	ldrle	r7, [sp, #20]
 800425e:	434f      	mulle	r7, r1
 8004260:	9705      	strle	r7, [sp, #20]
 8004262:	e7f6      	b.n	8004252 <_strtod_l+0x252>
 8004264:	2c10      	cmp	r4, #16
 8004266:	bfdf      	itttt	le
 8004268:	230a      	movle	r3, #10
 800426a:	9905      	ldrle	r1, [sp, #20]
 800426c:	fb03 2301 	mlale	r3, r3, r1, r2
 8004270:	9305      	strle	r3, [sp, #20]
 8004272:	e7e0      	b.n	8004236 <_strtod_l+0x236>
 8004274:	2300      	movs	r3, #0
 8004276:	9304      	str	r3, [sp, #16]
 8004278:	2301      	movs	r3, #1
 800427a:	e77b      	b.n	8004174 <_strtod_l+0x174>
 800427c:	2700      	movs	r7, #0
 800427e:	1cb2      	adds	r2, r6, #2
 8004280:	9219      	str	r2, [sp, #100]	; 0x64
 8004282:	78b2      	ldrb	r2, [r6, #2]
 8004284:	e784      	b.n	8004190 <_strtod_l+0x190>
 8004286:	bf00      	nop
 8004288:	08007000 	.word	0x08007000
 800428c:	08006e38 	.word	0x08006e38
 8004290:	7ff00000 	.word	0x7ff00000
 8004294:	2701      	movs	r7, #1
 8004296:	e7f2      	b.n	800427e <_strtod_l+0x27e>
 8004298:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800429a:	1c51      	adds	r1, r2, #1
 800429c:	9119      	str	r1, [sp, #100]	; 0x64
 800429e:	7852      	ldrb	r2, [r2, #1]
 80042a0:	2a30      	cmp	r2, #48	; 0x30
 80042a2:	d0f9      	beq.n	8004298 <_strtod_l+0x298>
 80042a4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80042a8:	2908      	cmp	r1, #8
 80042aa:	f63f af77 	bhi.w	800419c <_strtod_l+0x19c>
 80042ae:	f04f 0e0a 	mov.w	lr, #10
 80042b2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80042b6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80042b8:	9209      	str	r2, [sp, #36]	; 0x24
 80042ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80042bc:	1c51      	adds	r1, r2, #1
 80042be:	9119      	str	r1, [sp, #100]	; 0x64
 80042c0:	7852      	ldrb	r2, [r2, #1]
 80042c2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80042c6:	2d09      	cmp	r5, #9
 80042c8:	d935      	bls.n	8004336 <_strtod_l+0x336>
 80042ca:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80042cc:	1b49      	subs	r1, r1, r5
 80042ce:	2908      	cmp	r1, #8
 80042d0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80042d4:	dc02      	bgt.n	80042dc <_strtod_l+0x2dc>
 80042d6:	4565      	cmp	r5, ip
 80042d8:	bfa8      	it	ge
 80042da:	4665      	movge	r5, ip
 80042dc:	b107      	cbz	r7, 80042e0 <_strtod_l+0x2e0>
 80042de:	426d      	negs	r5, r5
 80042e0:	2c00      	cmp	r4, #0
 80042e2:	d14c      	bne.n	800437e <_strtod_l+0x37e>
 80042e4:	9907      	ldr	r1, [sp, #28]
 80042e6:	4301      	orrs	r1, r0
 80042e8:	f47f aecb 	bne.w	8004082 <_strtod_l+0x82>
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f47f aee4 	bne.w	80040ba <_strtod_l+0xba>
 80042f2:	2a69      	cmp	r2, #105	; 0x69
 80042f4:	d026      	beq.n	8004344 <_strtod_l+0x344>
 80042f6:	dc23      	bgt.n	8004340 <_strtod_l+0x340>
 80042f8:	2a49      	cmp	r2, #73	; 0x49
 80042fa:	d023      	beq.n	8004344 <_strtod_l+0x344>
 80042fc:	2a4e      	cmp	r2, #78	; 0x4e
 80042fe:	f47f aedc 	bne.w	80040ba <_strtod_l+0xba>
 8004302:	499d      	ldr	r1, [pc, #628]	; (8004578 <_strtod_l+0x578>)
 8004304:	a819      	add	r0, sp, #100	; 0x64
 8004306:	f000 ffab 	bl	8005260 <__match>
 800430a:	2800      	cmp	r0, #0
 800430c:	f43f aed5 	beq.w	80040ba <_strtod_l+0xba>
 8004310:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b28      	cmp	r3, #40	; 0x28
 8004316:	d12c      	bne.n	8004372 <_strtod_l+0x372>
 8004318:	4998      	ldr	r1, [pc, #608]	; (800457c <_strtod_l+0x57c>)
 800431a:	aa1c      	add	r2, sp, #112	; 0x70
 800431c:	a819      	add	r0, sp, #100	; 0x64
 800431e:	f000 ffb3 	bl	8005288 <__hexnan>
 8004322:	2805      	cmp	r0, #5
 8004324:	d125      	bne.n	8004372 <_strtod_l+0x372>
 8004326:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004328:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800432c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004330:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8004334:	e6a5      	b.n	8004082 <_strtod_l+0x82>
 8004336:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800433a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800433e:	e7bc      	b.n	80042ba <_strtod_l+0x2ba>
 8004340:	2a6e      	cmp	r2, #110	; 0x6e
 8004342:	e7dc      	b.n	80042fe <_strtod_l+0x2fe>
 8004344:	498e      	ldr	r1, [pc, #568]	; (8004580 <_strtod_l+0x580>)
 8004346:	a819      	add	r0, sp, #100	; 0x64
 8004348:	f000 ff8a 	bl	8005260 <__match>
 800434c:	2800      	cmp	r0, #0
 800434e:	f43f aeb4 	beq.w	80040ba <_strtod_l+0xba>
 8004352:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004354:	498b      	ldr	r1, [pc, #556]	; (8004584 <_strtod_l+0x584>)
 8004356:	3b01      	subs	r3, #1
 8004358:	a819      	add	r0, sp, #100	; 0x64
 800435a:	9319      	str	r3, [sp, #100]	; 0x64
 800435c:	f000 ff80 	bl	8005260 <__match>
 8004360:	b910      	cbnz	r0, 8004368 <_strtod_l+0x368>
 8004362:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004364:	3301      	adds	r3, #1
 8004366:	9319      	str	r3, [sp, #100]	; 0x64
 8004368:	f04f 0800 	mov.w	r8, #0
 800436c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8004588 <_strtod_l+0x588>
 8004370:	e687      	b.n	8004082 <_strtod_l+0x82>
 8004372:	4886      	ldr	r0, [pc, #536]	; (800458c <_strtod_l+0x58c>)
 8004374:	f001 fda4 	bl	8005ec0 <nan>
 8004378:	4680      	mov	r8, r0
 800437a:	4689      	mov	r9, r1
 800437c:	e681      	b.n	8004082 <_strtod_l+0x82>
 800437e:	9b04      	ldr	r3, [sp, #16]
 8004380:	f1bb 0f00 	cmp.w	fp, #0
 8004384:	bf08      	it	eq
 8004386:	46a3      	moveq	fp, r4
 8004388:	1aeb      	subs	r3, r5, r3
 800438a:	2c10      	cmp	r4, #16
 800438c:	9806      	ldr	r0, [sp, #24]
 800438e:	4626      	mov	r6, r4
 8004390:	9307      	str	r3, [sp, #28]
 8004392:	bfa8      	it	ge
 8004394:	2610      	movge	r6, #16
 8004396:	f7fc f825 	bl	80003e4 <__aeabi_ui2d>
 800439a:	2c09      	cmp	r4, #9
 800439c:	4680      	mov	r8, r0
 800439e:	4689      	mov	r9, r1
 80043a0:	dd13      	ble.n	80043ca <_strtod_l+0x3ca>
 80043a2:	4b7b      	ldr	r3, [pc, #492]	; (8004590 <_strtod_l+0x590>)
 80043a4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80043a8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80043ac:	f7fc f894 	bl	80004d8 <__aeabi_dmul>
 80043b0:	4680      	mov	r8, r0
 80043b2:	9805      	ldr	r0, [sp, #20]
 80043b4:	4689      	mov	r9, r1
 80043b6:	f7fc f815 	bl	80003e4 <__aeabi_ui2d>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4640      	mov	r0, r8
 80043c0:	4649      	mov	r1, r9
 80043c2:	f7fb fed3 	bl	800016c <__adddf3>
 80043c6:	4680      	mov	r8, r0
 80043c8:	4689      	mov	r9, r1
 80043ca:	2c0f      	cmp	r4, #15
 80043cc:	dc36      	bgt.n	800443c <_strtod_l+0x43c>
 80043ce:	9b07      	ldr	r3, [sp, #28]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f43f ae56 	beq.w	8004082 <_strtod_l+0x82>
 80043d6:	dd22      	ble.n	800441e <_strtod_l+0x41e>
 80043d8:	2b16      	cmp	r3, #22
 80043da:	dc09      	bgt.n	80043f0 <_strtod_l+0x3f0>
 80043dc:	496c      	ldr	r1, [pc, #432]	; (8004590 <_strtod_l+0x590>)
 80043de:	4642      	mov	r2, r8
 80043e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80043e4:	464b      	mov	r3, r9
 80043e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80043ea:	f7fc f875 	bl	80004d8 <__aeabi_dmul>
 80043ee:	e7c3      	b.n	8004378 <_strtod_l+0x378>
 80043f0:	9a07      	ldr	r2, [sp, #28]
 80043f2:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80043f6:	4293      	cmp	r3, r2
 80043f8:	db20      	blt.n	800443c <_strtod_l+0x43c>
 80043fa:	4d65      	ldr	r5, [pc, #404]	; (8004590 <_strtod_l+0x590>)
 80043fc:	f1c4 040f 	rsb	r4, r4, #15
 8004400:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004404:	4642      	mov	r2, r8
 8004406:	e9d1 0100 	ldrd	r0, r1, [r1]
 800440a:	464b      	mov	r3, r9
 800440c:	f7fc f864 	bl	80004d8 <__aeabi_dmul>
 8004410:	9b07      	ldr	r3, [sp, #28]
 8004412:	1b1c      	subs	r4, r3, r4
 8004414:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004418:	e9d5 2300 	ldrd	r2, r3, [r5]
 800441c:	e7e5      	b.n	80043ea <_strtod_l+0x3ea>
 800441e:	9b07      	ldr	r3, [sp, #28]
 8004420:	3316      	adds	r3, #22
 8004422:	db0b      	blt.n	800443c <_strtod_l+0x43c>
 8004424:	9b04      	ldr	r3, [sp, #16]
 8004426:	4640      	mov	r0, r8
 8004428:	1b5d      	subs	r5, r3, r5
 800442a:	4b59      	ldr	r3, [pc, #356]	; (8004590 <_strtod_l+0x590>)
 800442c:	4649      	mov	r1, r9
 800442e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004432:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004436:	f7fc f979 	bl	800072c <__aeabi_ddiv>
 800443a:	e79d      	b.n	8004378 <_strtod_l+0x378>
 800443c:	9b07      	ldr	r3, [sp, #28]
 800443e:	1ba6      	subs	r6, r4, r6
 8004440:	441e      	add	r6, r3
 8004442:	2e00      	cmp	r6, #0
 8004444:	dd74      	ble.n	8004530 <_strtod_l+0x530>
 8004446:	f016 030f 	ands.w	r3, r6, #15
 800444a:	d00a      	beq.n	8004462 <_strtod_l+0x462>
 800444c:	4950      	ldr	r1, [pc, #320]	; (8004590 <_strtod_l+0x590>)
 800444e:	4642      	mov	r2, r8
 8004450:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004454:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004458:	464b      	mov	r3, r9
 800445a:	f7fc f83d 	bl	80004d8 <__aeabi_dmul>
 800445e:	4680      	mov	r8, r0
 8004460:	4689      	mov	r9, r1
 8004462:	f036 060f 	bics.w	r6, r6, #15
 8004466:	d052      	beq.n	800450e <_strtod_l+0x50e>
 8004468:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800446c:	dd27      	ble.n	80044be <_strtod_l+0x4be>
 800446e:	f04f 0b00 	mov.w	fp, #0
 8004472:	f8cd b010 	str.w	fp, [sp, #16]
 8004476:	f8cd b020 	str.w	fp, [sp, #32]
 800447a:	f8cd b018 	str.w	fp, [sp, #24]
 800447e:	2322      	movs	r3, #34	; 0x22
 8004480:	f04f 0800 	mov.w	r8, #0
 8004484:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8004588 <_strtod_l+0x588>
 8004488:	f8ca 3000 	str.w	r3, [sl]
 800448c:	9b08      	ldr	r3, [sp, #32]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f43f adf7 	beq.w	8004082 <_strtod_l+0x82>
 8004494:	4650      	mov	r0, sl
 8004496:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004498:	f000 fff2 	bl	8005480 <_Bfree>
 800449c:	4650      	mov	r0, sl
 800449e:	9906      	ldr	r1, [sp, #24]
 80044a0:	f000 ffee 	bl	8005480 <_Bfree>
 80044a4:	4650      	mov	r0, sl
 80044a6:	9904      	ldr	r1, [sp, #16]
 80044a8:	f000 ffea 	bl	8005480 <_Bfree>
 80044ac:	4650      	mov	r0, sl
 80044ae:	9908      	ldr	r1, [sp, #32]
 80044b0:	f000 ffe6 	bl	8005480 <_Bfree>
 80044b4:	4659      	mov	r1, fp
 80044b6:	4650      	mov	r0, sl
 80044b8:	f000 ffe2 	bl	8005480 <_Bfree>
 80044bc:	e5e1      	b.n	8004082 <_strtod_l+0x82>
 80044be:	4b35      	ldr	r3, [pc, #212]	; (8004594 <_strtod_l+0x594>)
 80044c0:	4640      	mov	r0, r8
 80044c2:	9305      	str	r3, [sp, #20]
 80044c4:	2300      	movs	r3, #0
 80044c6:	4649      	mov	r1, r9
 80044c8:	461f      	mov	r7, r3
 80044ca:	1136      	asrs	r6, r6, #4
 80044cc:	2e01      	cmp	r6, #1
 80044ce:	dc21      	bgt.n	8004514 <_strtod_l+0x514>
 80044d0:	b10b      	cbz	r3, 80044d6 <_strtod_l+0x4d6>
 80044d2:	4680      	mov	r8, r0
 80044d4:	4689      	mov	r9, r1
 80044d6:	4b2f      	ldr	r3, [pc, #188]	; (8004594 <_strtod_l+0x594>)
 80044d8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80044dc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80044e0:	4642      	mov	r2, r8
 80044e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044e6:	464b      	mov	r3, r9
 80044e8:	f7fb fff6 	bl	80004d8 <__aeabi_dmul>
 80044ec:	4b26      	ldr	r3, [pc, #152]	; (8004588 <_strtod_l+0x588>)
 80044ee:	460a      	mov	r2, r1
 80044f0:	400b      	ands	r3, r1
 80044f2:	4929      	ldr	r1, [pc, #164]	; (8004598 <_strtod_l+0x598>)
 80044f4:	4680      	mov	r8, r0
 80044f6:	428b      	cmp	r3, r1
 80044f8:	d8b9      	bhi.n	800446e <_strtod_l+0x46e>
 80044fa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80044fe:	428b      	cmp	r3, r1
 8004500:	bf86      	itte	hi
 8004502:	f04f 38ff 	movhi.w	r8, #4294967295
 8004506:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800459c <_strtod_l+0x59c>
 800450a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800450e:	2300      	movs	r3, #0
 8004510:	9305      	str	r3, [sp, #20]
 8004512:	e07f      	b.n	8004614 <_strtod_l+0x614>
 8004514:	07f2      	lsls	r2, r6, #31
 8004516:	d505      	bpl.n	8004524 <_strtod_l+0x524>
 8004518:	9b05      	ldr	r3, [sp, #20]
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	f7fb ffdb 	bl	80004d8 <__aeabi_dmul>
 8004522:	2301      	movs	r3, #1
 8004524:	9a05      	ldr	r2, [sp, #20]
 8004526:	3701      	adds	r7, #1
 8004528:	3208      	adds	r2, #8
 800452a:	1076      	asrs	r6, r6, #1
 800452c:	9205      	str	r2, [sp, #20]
 800452e:	e7cd      	b.n	80044cc <_strtod_l+0x4cc>
 8004530:	d0ed      	beq.n	800450e <_strtod_l+0x50e>
 8004532:	4276      	negs	r6, r6
 8004534:	f016 020f 	ands.w	r2, r6, #15
 8004538:	d00a      	beq.n	8004550 <_strtod_l+0x550>
 800453a:	4b15      	ldr	r3, [pc, #84]	; (8004590 <_strtod_l+0x590>)
 800453c:	4640      	mov	r0, r8
 800453e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004542:	4649      	mov	r1, r9
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	f7fc f8f0 	bl	800072c <__aeabi_ddiv>
 800454c:	4680      	mov	r8, r0
 800454e:	4689      	mov	r9, r1
 8004550:	1136      	asrs	r6, r6, #4
 8004552:	d0dc      	beq.n	800450e <_strtod_l+0x50e>
 8004554:	2e1f      	cmp	r6, #31
 8004556:	dd23      	ble.n	80045a0 <_strtod_l+0x5a0>
 8004558:	f04f 0b00 	mov.w	fp, #0
 800455c:	f8cd b010 	str.w	fp, [sp, #16]
 8004560:	f8cd b020 	str.w	fp, [sp, #32]
 8004564:	f8cd b018 	str.w	fp, [sp, #24]
 8004568:	2322      	movs	r3, #34	; 0x22
 800456a:	f04f 0800 	mov.w	r8, #0
 800456e:	f04f 0900 	mov.w	r9, #0
 8004572:	f8ca 3000 	str.w	r3, [sl]
 8004576:	e789      	b.n	800448c <_strtod_l+0x48c>
 8004578:	08006e35 	.word	0x08006e35
 800457c:	08006e4c 	.word	0x08006e4c
 8004580:	08006e2c 	.word	0x08006e2c
 8004584:	08006e2f 	.word	0x08006e2f
 8004588:	7ff00000 	.word	0x7ff00000
 800458c:	080071bf 	.word	0x080071bf
 8004590:	080070b0 	.word	0x080070b0
 8004594:	08007088 	.word	0x08007088
 8004598:	7ca00000 	.word	0x7ca00000
 800459c:	7fefffff 	.word	0x7fefffff
 80045a0:	f016 0310 	ands.w	r3, r6, #16
 80045a4:	bf18      	it	ne
 80045a6:	236a      	movne	r3, #106	; 0x6a
 80045a8:	4640      	mov	r0, r8
 80045aa:	9305      	str	r3, [sp, #20]
 80045ac:	4649      	mov	r1, r9
 80045ae:	2300      	movs	r3, #0
 80045b0:	4fb0      	ldr	r7, [pc, #704]	; (8004874 <_strtod_l+0x874>)
 80045b2:	07f2      	lsls	r2, r6, #31
 80045b4:	d504      	bpl.n	80045c0 <_strtod_l+0x5c0>
 80045b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ba:	f7fb ff8d 	bl	80004d8 <__aeabi_dmul>
 80045be:	2301      	movs	r3, #1
 80045c0:	1076      	asrs	r6, r6, #1
 80045c2:	f107 0708 	add.w	r7, r7, #8
 80045c6:	d1f4      	bne.n	80045b2 <_strtod_l+0x5b2>
 80045c8:	b10b      	cbz	r3, 80045ce <_strtod_l+0x5ce>
 80045ca:	4680      	mov	r8, r0
 80045cc:	4689      	mov	r9, r1
 80045ce:	9b05      	ldr	r3, [sp, #20]
 80045d0:	b1c3      	cbz	r3, 8004604 <_strtod_l+0x604>
 80045d2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80045d6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80045da:	2b00      	cmp	r3, #0
 80045dc:	4649      	mov	r1, r9
 80045de:	dd11      	ble.n	8004604 <_strtod_l+0x604>
 80045e0:	2b1f      	cmp	r3, #31
 80045e2:	f340 8127 	ble.w	8004834 <_strtod_l+0x834>
 80045e6:	2b34      	cmp	r3, #52	; 0x34
 80045e8:	bfd8      	it	le
 80045ea:	f04f 33ff 	movle.w	r3, #4294967295
 80045ee:	f04f 0800 	mov.w	r8, #0
 80045f2:	bfcf      	iteee	gt
 80045f4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80045f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80045fc:	fa03 f202 	lslle.w	r2, r3, r2
 8004600:	ea02 0901 	andle.w	r9, r2, r1
 8004604:	2200      	movs	r2, #0
 8004606:	2300      	movs	r3, #0
 8004608:	4640      	mov	r0, r8
 800460a:	4649      	mov	r1, r9
 800460c:	f7fc f9cc 	bl	80009a8 <__aeabi_dcmpeq>
 8004610:	2800      	cmp	r0, #0
 8004612:	d1a1      	bne.n	8004558 <_strtod_l+0x558>
 8004614:	9b06      	ldr	r3, [sp, #24]
 8004616:	465a      	mov	r2, fp
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	4650      	mov	r0, sl
 800461c:	4623      	mov	r3, r4
 800461e:	9908      	ldr	r1, [sp, #32]
 8004620:	f000 ff96 	bl	8005550 <__s2b>
 8004624:	9008      	str	r0, [sp, #32]
 8004626:	2800      	cmp	r0, #0
 8004628:	f43f af21 	beq.w	800446e <_strtod_l+0x46e>
 800462c:	9b04      	ldr	r3, [sp, #16]
 800462e:	f04f 0b00 	mov.w	fp, #0
 8004632:	1b5d      	subs	r5, r3, r5
 8004634:	9b07      	ldr	r3, [sp, #28]
 8004636:	f8cd b010 	str.w	fp, [sp, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	bfb4      	ite	lt
 800463e:	462b      	movlt	r3, r5
 8004640:	2300      	movge	r3, #0
 8004642:	930e      	str	r3, [sp, #56]	; 0x38
 8004644:	9b07      	ldr	r3, [sp, #28]
 8004646:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800464a:	9314      	str	r3, [sp, #80]	; 0x50
 800464c:	9b08      	ldr	r3, [sp, #32]
 800464e:	4650      	mov	r0, sl
 8004650:	6859      	ldr	r1, [r3, #4]
 8004652:	f000 fed5 	bl	8005400 <_Balloc>
 8004656:	9006      	str	r0, [sp, #24]
 8004658:	2800      	cmp	r0, #0
 800465a:	f43f af10 	beq.w	800447e <_strtod_l+0x47e>
 800465e:	9b08      	ldr	r3, [sp, #32]
 8004660:	300c      	adds	r0, #12
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	f103 010c 	add.w	r1, r3, #12
 8004668:	3202      	adds	r2, #2
 800466a:	0092      	lsls	r2, r2, #2
 800466c:	f000 feba 	bl	80053e4 <memcpy>
 8004670:	ab1c      	add	r3, sp, #112	; 0x70
 8004672:	9301      	str	r3, [sp, #4]
 8004674:	ab1b      	add	r3, sp, #108	; 0x6c
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	4642      	mov	r2, r8
 800467a:	464b      	mov	r3, r9
 800467c:	4650      	mov	r0, sl
 800467e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 8004682:	f001 faa7 	bl	8005bd4 <__d2b>
 8004686:	901a      	str	r0, [sp, #104]	; 0x68
 8004688:	2800      	cmp	r0, #0
 800468a:	f43f aef8 	beq.w	800447e <_strtod_l+0x47e>
 800468e:	2101      	movs	r1, #1
 8004690:	4650      	mov	r0, sl
 8004692:	f000 fff5 	bl	8005680 <__i2b>
 8004696:	4603      	mov	r3, r0
 8004698:	9004      	str	r0, [sp, #16]
 800469a:	2800      	cmp	r0, #0
 800469c:	f43f aeef 	beq.w	800447e <_strtod_l+0x47e>
 80046a0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80046a2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80046a4:	2d00      	cmp	r5, #0
 80046a6:	bfab      	itete	ge
 80046a8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80046aa:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80046ac:	18ee      	addge	r6, r5, r3
 80046ae:	1b5c      	sublt	r4, r3, r5
 80046b0:	9b05      	ldr	r3, [sp, #20]
 80046b2:	bfa8      	it	ge
 80046b4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80046b6:	eba5 0503 	sub.w	r5, r5, r3
 80046ba:	4415      	add	r5, r2
 80046bc:	4b6e      	ldr	r3, [pc, #440]	; (8004878 <_strtod_l+0x878>)
 80046be:	f105 35ff 	add.w	r5, r5, #4294967295
 80046c2:	bfb8      	it	lt
 80046c4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80046c6:	429d      	cmp	r5, r3
 80046c8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80046cc:	f280 80c4 	bge.w	8004858 <_strtod_l+0x858>
 80046d0:	1b5b      	subs	r3, r3, r5
 80046d2:	2b1f      	cmp	r3, #31
 80046d4:	f04f 0701 	mov.w	r7, #1
 80046d8:	eba2 0203 	sub.w	r2, r2, r3
 80046dc:	f300 80b1 	bgt.w	8004842 <_strtod_l+0x842>
 80046e0:	2500      	movs	r5, #0
 80046e2:	fa07 f303 	lsl.w	r3, r7, r3
 80046e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80046e8:	18b7      	adds	r7, r6, r2
 80046ea:	9b05      	ldr	r3, [sp, #20]
 80046ec:	42be      	cmp	r6, r7
 80046ee:	4414      	add	r4, r2
 80046f0:	441c      	add	r4, r3
 80046f2:	4633      	mov	r3, r6
 80046f4:	bfa8      	it	ge
 80046f6:	463b      	movge	r3, r7
 80046f8:	42a3      	cmp	r3, r4
 80046fa:	bfa8      	it	ge
 80046fc:	4623      	movge	r3, r4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	bfc2      	ittt	gt
 8004702:	1aff      	subgt	r7, r7, r3
 8004704:	1ae4      	subgt	r4, r4, r3
 8004706:	1af6      	subgt	r6, r6, r3
 8004708:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800470a:	2b00      	cmp	r3, #0
 800470c:	dd17      	ble.n	800473e <_strtod_l+0x73e>
 800470e:	461a      	mov	r2, r3
 8004710:	4650      	mov	r0, sl
 8004712:	9904      	ldr	r1, [sp, #16]
 8004714:	f001 f872 	bl	80057fc <__pow5mult>
 8004718:	9004      	str	r0, [sp, #16]
 800471a:	2800      	cmp	r0, #0
 800471c:	f43f aeaf 	beq.w	800447e <_strtod_l+0x47e>
 8004720:	4601      	mov	r1, r0
 8004722:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004724:	4650      	mov	r0, sl
 8004726:	f000 ffc1 	bl	80056ac <__multiply>
 800472a:	9009      	str	r0, [sp, #36]	; 0x24
 800472c:	2800      	cmp	r0, #0
 800472e:	f43f aea6 	beq.w	800447e <_strtod_l+0x47e>
 8004732:	4650      	mov	r0, sl
 8004734:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004736:	f000 fea3 	bl	8005480 <_Bfree>
 800473a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800473c:	931a      	str	r3, [sp, #104]	; 0x68
 800473e:	2f00      	cmp	r7, #0
 8004740:	f300 808e 	bgt.w	8004860 <_strtod_l+0x860>
 8004744:	9b07      	ldr	r3, [sp, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	dd08      	ble.n	800475c <_strtod_l+0x75c>
 800474a:	4650      	mov	r0, sl
 800474c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800474e:	9906      	ldr	r1, [sp, #24]
 8004750:	f001 f854 	bl	80057fc <__pow5mult>
 8004754:	9006      	str	r0, [sp, #24]
 8004756:	2800      	cmp	r0, #0
 8004758:	f43f ae91 	beq.w	800447e <_strtod_l+0x47e>
 800475c:	2c00      	cmp	r4, #0
 800475e:	dd08      	ble.n	8004772 <_strtod_l+0x772>
 8004760:	4622      	mov	r2, r4
 8004762:	4650      	mov	r0, sl
 8004764:	9906      	ldr	r1, [sp, #24]
 8004766:	f001 f8a3 	bl	80058b0 <__lshift>
 800476a:	9006      	str	r0, [sp, #24]
 800476c:	2800      	cmp	r0, #0
 800476e:	f43f ae86 	beq.w	800447e <_strtod_l+0x47e>
 8004772:	2e00      	cmp	r6, #0
 8004774:	dd08      	ble.n	8004788 <_strtod_l+0x788>
 8004776:	4632      	mov	r2, r6
 8004778:	4650      	mov	r0, sl
 800477a:	9904      	ldr	r1, [sp, #16]
 800477c:	f001 f898 	bl	80058b0 <__lshift>
 8004780:	9004      	str	r0, [sp, #16]
 8004782:	2800      	cmp	r0, #0
 8004784:	f43f ae7b 	beq.w	800447e <_strtod_l+0x47e>
 8004788:	4650      	mov	r0, sl
 800478a:	9a06      	ldr	r2, [sp, #24]
 800478c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800478e:	f001 f91b 	bl	80059c8 <__mdiff>
 8004792:	4683      	mov	fp, r0
 8004794:	2800      	cmp	r0, #0
 8004796:	f43f ae72 	beq.w	800447e <_strtod_l+0x47e>
 800479a:	2400      	movs	r4, #0
 800479c:	68c3      	ldr	r3, [r0, #12]
 800479e:	9904      	ldr	r1, [sp, #16]
 80047a0:	60c4      	str	r4, [r0, #12]
 80047a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80047a4:	f001 f8f4 	bl	8005990 <__mcmp>
 80047a8:	42a0      	cmp	r0, r4
 80047aa:	da6b      	bge.n	8004884 <_strtod_l+0x884>
 80047ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047ae:	ea53 0308 	orrs.w	r3, r3, r8
 80047b2:	f040 8091 	bne.w	80048d8 <_strtod_l+0x8d8>
 80047b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	f040 808c 	bne.w	80048d8 <_strtod_l+0x8d8>
 80047c0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80047c4:	0d1b      	lsrs	r3, r3, #20
 80047c6:	051b      	lsls	r3, r3, #20
 80047c8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80047cc:	f240 8084 	bls.w	80048d8 <_strtod_l+0x8d8>
 80047d0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80047d4:	b91b      	cbnz	r3, 80047de <_strtod_l+0x7de>
 80047d6:	f8db 3010 	ldr.w	r3, [fp, #16]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	dd7c      	ble.n	80048d8 <_strtod_l+0x8d8>
 80047de:	4659      	mov	r1, fp
 80047e0:	2201      	movs	r2, #1
 80047e2:	4650      	mov	r0, sl
 80047e4:	f001 f864 	bl	80058b0 <__lshift>
 80047e8:	9904      	ldr	r1, [sp, #16]
 80047ea:	4683      	mov	fp, r0
 80047ec:	f001 f8d0 	bl	8005990 <__mcmp>
 80047f0:	2800      	cmp	r0, #0
 80047f2:	dd71      	ble.n	80048d8 <_strtod_l+0x8d8>
 80047f4:	9905      	ldr	r1, [sp, #20]
 80047f6:	464b      	mov	r3, r9
 80047f8:	4a20      	ldr	r2, [pc, #128]	; (800487c <_strtod_l+0x87c>)
 80047fa:	2900      	cmp	r1, #0
 80047fc:	f000 808c 	beq.w	8004918 <_strtod_l+0x918>
 8004800:	ea02 0109 	and.w	r1, r2, r9
 8004804:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004808:	f300 8086 	bgt.w	8004918 <_strtod_l+0x918>
 800480c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004810:	f77f aeaa 	ble.w	8004568 <_strtod_l+0x568>
 8004814:	4640      	mov	r0, r8
 8004816:	4649      	mov	r1, r9
 8004818:	4b19      	ldr	r3, [pc, #100]	; (8004880 <_strtod_l+0x880>)
 800481a:	2200      	movs	r2, #0
 800481c:	f7fb fe5c 	bl	80004d8 <__aeabi_dmul>
 8004820:	460b      	mov	r3, r1
 8004822:	4303      	orrs	r3, r0
 8004824:	bf08      	it	eq
 8004826:	2322      	moveq	r3, #34	; 0x22
 8004828:	4680      	mov	r8, r0
 800482a:	4689      	mov	r9, r1
 800482c:	bf08      	it	eq
 800482e:	f8ca 3000 	streq.w	r3, [sl]
 8004832:	e62f      	b.n	8004494 <_strtod_l+0x494>
 8004834:	f04f 32ff 	mov.w	r2, #4294967295
 8004838:	fa02 f303 	lsl.w	r3, r2, r3
 800483c:	ea03 0808 	and.w	r8, r3, r8
 8004840:	e6e0      	b.n	8004604 <_strtod_l+0x604>
 8004842:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004846:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800484a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800484e:	35e2      	adds	r5, #226	; 0xe2
 8004850:	fa07 f505 	lsl.w	r5, r7, r5
 8004854:	970f      	str	r7, [sp, #60]	; 0x3c
 8004856:	e747      	b.n	80046e8 <_strtod_l+0x6e8>
 8004858:	2301      	movs	r3, #1
 800485a:	2500      	movs	r5, #0
 800485c:	930f      	str	r3, [sp, #60]	; 0x3c
 800485e:	e743      	b.n	80046e8 <_strtod_l+0x6e8>
 8004860:	463a      	mov	r2, r7
 8004862:	4650      	mov	r0, sl
 8004864:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004866:	f001 f823 	bl	80058b0 <__lshift>
 800486a:	901a      	str	r0, [sp, #104]	; 0x68
 800486c:	2800      	cmp	r0, #0
 800486e:	f47f af69 	bne.w	8004744 <_strtod_l+0x744>
 8004872:	e604      	b.n	800447e <_strtod_l+0x47e>
 8004874:	08006e60 	.word	0x08006e60
 8004878:	fffffc02 	.word	0xfffffc02
 800487c:	7ff00000 	.word	0x7ff00000
 8004880:	39500000 	.word	0x39500000
 8004884:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004888:	d165      	bne.n	8004956 <_strtod_l+0x956>
 800488a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800488c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004890:	b35a      	cbz	r2, 80048ea <_strtod_l+0x8ea>
 8004892:	4a99      	ldr	r2, [pc, #612]	; (8004af8 <_strtod_l+0xaf8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d12b      	bne.n	80048f0 <_strtod_l+0x8f0>
 8004898:	9b05      	ldr	r3, [sp, #20]
 800489a:	4641      	mov	r1, r8
 800489c:	b303      	cbz	r3, 80048e0 <_strtod_l+0x8e0>
 800489e:	464a      	mov	r2, r9
 80048a0:	4b96      	ldr	r3, [pc, #600]	; (8004afc <_strtod_l+0xafc>)
 80048a2:	4013      	ands	r3, r2
 80048a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80048a8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ac:	d81b      	bhi.n	80048e6 <_strtod_l+0x8e6>
 80048ae:	0d1b      	lsrs	r3, r3, #20
 80048b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	4299      	cmp	r1, r3
 80048ba:	d119      	bne.n	80048f0 <_strtod_l+0x8f0>
 80048bc:	4b90      	ldr	r3, [pc, #576]	; (8004b00 <_strtod_l+0xb00>)
 80048be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d102      	bne.n	80048ca <_strtod_l+0x8ca>
 80048c4:	3101      	adds	r1, #1
 80048c6:	f43f adda 	beq.w	800447e <_strtod_l+0x47e>
 80048ca:	f04f 0800 	mov.w	r8, #0
 80048ce:	4b8b      	ldr	r3, [pc, #556]	; (8004afc <_strtod_l+0xafc>)
 80048d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048d2:	401a      	ands	r2, r3
 80048d4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 80048d8:	9b05      	ldr	r3, [sp, #20]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d19a      	bne.n	8004814 <_strtod_l+0x814>
 80048de:	e5d9      	b.n	8004494 <_strtod_l+0x494>
 80048e0:	f04f 33ff 	mov.w	r3, #4294967295
 80048e4:	e7e8      	b.n	80048b8 <_strtod_l+0x8b8>
 80048e6:	4613      	mov	r3, r2
 80048e8:	e7e6      	b.n	80048b8 <_strtod_l+0x8b8>
 80048ea:	ea53 0308 	orrs.w	r3, r3, r8
 80048ee:	d081      	beq.n	80047f4 <_strtod_l+0x7f4>
 80048f0:	b1e5      	cbz	r5, 800492c <_strtod_l+0x92c>
 80048f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048f4:	421d      	tst	r5, r3
 80048f6:	d0ef      	beq.n	80048d8 <_strtod_l+0x8d8>
 80048f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80048fa:	4640      	mov	r0, r8
 80048fc:	4649      	mov	r1, r9
 80048fe:	9a05      	ldr	r2, [sp, #20]
 8004900:	b1c3      	cbz	r3, 8004934 <_strtod_l+0x934>
 8004902:	f7ff fb5b 	bl	8003fbc <sulp>
 8004906:	4602      	mov	r2, r0
 8004908:	460b      	mov	r3, r1
 800490a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800490e:	f7fb fc2d 	bl	800016c <__adddf3>
 8004912:	4680      	mov	r8, r0
 8004914:	4689      	mov	r9, r1
 8004916:	e7df      	b.n	80048d8 <_strtod_l+0x8d8>
 8004918:	4013      	ands	r3, r2
 800491a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800491e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004922:	f04f 38ff 	mov.w	r8, #4294967295
 8004926:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800492a:	e7d5      	b.n	80048d8 <_strtod_l+0x8d8>
 800492c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800492e:	ea13 0f08 	tst.w	r3, r8
 8004932:	e7e0      	b.n	80048f6 <_strtod_l+0x8f6>
 8004934:	f7ff fb42 	bl	8003fbc <sulp>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004940:	f7fb fc12 	bl	8000168 <__aeabi_dsub>
 8004944:	2200      	movs	r2, #0
 8004946:	2300      	movs	r3, #0
 8004948:	4680      	mov	r8, r0
 800494a:	4689      	mov	r9, r1
 800494c:	f7fc f82c 	bl	80009a8 <__aeabi_dcmpeq>
 8004950:	2800      	cmp	r0, #0
 8004952:	d0c1      	beq.n	80048d8 <_strtod_l+0x8d8>
 8004954:	e608      	b.n	8004568 <_strtod_l+0x568>
 8004956:	4658      	mov	r0, fp
 8004958:	9904      	ldr	r1, [sp, #16]
 800495a:	f001 f997 	bl	8005c8c <__ratio>
 800495e:	2200      	movs	r2, #0
 8004960:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004964:	4606      	mov	r6, r0
 8004966:	460f      	mov	r7, r1
 8004968:	f7fc f832 	bl	80009d0 <__aeabi_dcmple>
 800496c:	2800      	cmp	r0, #0
 800496e:	d070      	beq.n	8004a52 <_strtod_l+0xa52>
 8004970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004972:	2b00      	cmp	r3, #0
 8004974:	d042      	beq.n	80049fc <_strtod_l+0x9fc>
 8004976:	2600      	movs	r6, #0
 8004978:	4f62      	ldr	r7, [pc, #392]	; (8004b04 <_strtod_l+0xb04>)
 800497a:	4d62      	ldr	r5, [pc, #392]	; (8004b04 <_strtod_l+0xb04>)
 800497c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800497e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004982:	0d1b      	lsrs	r3, r3, #20
 8004984:	051b      	lsls	r3, r3, #20
 8004986:	930f      	str	r3, [sp, #60]	; 0x3c
 8004988:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800498a:	4b5f      	ldr	r3, [pc, #380]	; (8004b08 <_strtod_l+0xb08>)
 800498c:	429a      	cmp	r2, r3
 800498e:	f040 80c3 	bne.w	8004b18 <_strtod_l+0xb18>
 8004992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004994:	4640      	mov	r0, r8
 8004996:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800499a:	4649      	mov	r1, r9
 800499c:	f001 f8a0 	bl	8005ae0 <__ulp>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4630      	mov	r0, r6
 80049a6:	4639      	mov	r1, r7
 80049a8:	f7fb fd96 	bl	80004d8 <__aeabi_dmul>
 80049ac:	4642      	mov	r2, r8
 80049ae:	464b      	mov	r3, r9
 80049b0:	f7fb fbdc 	bl	800016c <__adddf3>
 80049b4:	460b      	mov	r3, r1
 80049b6:	4951      	ldr	r1, [pc, #324]	; (8004afc <_strtod_l+0xafc>)
 80049b8:	4a54      	ldr	r2, [pc, #336]	; (8004b0c <_strtod_l+0xb0c>)
 80049ba:	4019      	ands	r1, r3
 80049bc:	4291      	cmp	r1, r2
 80049be:	4680      	mov	r8, r0
 80049c0:	d95d      	bls.n	8004a7e <_strtod_l+0xa7e>
 80049c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80049c4:	4b4e      	ldr	r3, [pc, #312]	; (8004b00 <_strtod_l+0xb00>)
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d103      	bne.n	80049d2 <_strtod_l+0x9d2>
 80049ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80049cc:	3301      	adds	r3, #1
 80049ce:	f43f ad56 	beq.w	800447e <_strtod_l+0x47e>
 80049d2:	f04f 38ff 	mov.w	r8, #4294967295
 80049d6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004b00 <_strtod_l+0xb00>
 80049da:	4650      	mov	r0, sl
 80049dc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80049de:	f000 fd4f 	bl	8005480 <_Bfree>
 80049e2:	4650      	mov	r0, sl
 80049e4:	9906      	ldr	r1, [sp, #24]
 80049e6:	f000 fd4b 	bl	8005480 <_Bfree>
 80049ea:	4650      	mov	r0, sl
 80049ec:	9904      	ldr	r1, [sp, #16]
 80049ee:	f000 fd47 	bl	8005480 <_Bfree>
 80049f2:	4659      	mov	r1, fp
 80049f4:	4650      	mov	r0, sl
 80049f6:	f000 fd43 	bl	8005480 <_Bfree>
 80049fa:	e627      	b.n	800464c <_strtod_l+0x64c>
 80049fc:	f1b8 0f00 	cmp.w	r8, #0
 8004a00:	d119      	bne.n	8004a36 <_strtod_l+0xa36>
 8004a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a08:	b9e3      	cbnz	r3, 8004a44 <_strtod_l+0xa44>
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	4630      	mov	r0, r6
 8004a0e:	4639      	mov	r1, r7
 8004a10:	4b3c      	ldr	r3, [pc, #240]	; (8004b04 <_strtod_l+0xb04>)
 8004a12:	f7fb ffd3 	bl	80009bc <__aeabi_dcmplt>
 8004a16:	b9c8      	cbnz	r0, 8004a4c <_strtod_l+0xa4c>
 8004a18:	2200      	movs	r2, #0
 8004a1a:	4630      	mov	r0, r6
 8004a1c:	4639      	mov	r1, r7
 8004a1e:	4b3c      	ldr	r3, [pc, #240]	; (8004b10 <_strtod_l+0xb10>)
 8004a20:	f7fb fd5a 	bl	80004d8 <__aeabi_dmul>
 8004a24:	4604      	mov	r4, r0
 8004a26:	460d      	mov	r5, r1
 8004a28:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004a2c:	9416      	str	r4, [sp, #88]	; 0x58
 8004a2e:	9317      	str	r3, [sp, #92]	; 0x5c
 8004a30:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004a34:	e7a2      	b.n	800497c <_strtod_l+0x97c>
 8004a36:	f1b8 0f01 	cmp.w	r8, #1
 8004a3a:	d103      	bne.n	8004a44 <_strtod_l+0xa44>
 8004a3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f43f ad92 	beq.w	8004568 <_strtod_l+0x568>
 8004a44:	2600      	movs	r6, #0
 8004a46:	2400      	movs	r4, #0
 8004a48:	4f32      	ldr	r7, [pc, #200]	; (8004b14 <_strtod_l+0xb14>)
 8004a4a:	e796      	b.n	800497a <_strtod_l+0x97a>
 8004a4c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004a4e:	4d30      	ldr	r5, [pc, #192]	; (8004b10 <_strtod_l+0xb10>)
 8004a50:	e7ea      	b.n	8004a28 <_strtod_l+0xa28>
 8004a52:	4b2f      	ldr	r3, [pc, #188]	; (8004b10 <_strtod_l+0xb10>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	4630      	mov	r0, r6
 8004a58:	4639      	mov	r1, r7
 8004a5a:	f7fb fd3d 	bl	80004d8 <__aeabi_dmul>
 8004a5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a60:	4604      	mov	r4, r0
 8004a62:	460d      	mov	r5, r1
 8004a64:	b933      	cbnz	r3, 8004a74 <_strtod_l+0xa74>
 8004a66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004a6a:	9010      	str	r0, [sp, #64]	; 0x40
 8004a6c:	9311      	str	r3, [sp, #68]	; 0x44
 8004a6e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004a72:	e783      	b.n	800497c <_strtod_l+0x97c>
 8004a74:	4602      	mov	r2, r0
 8004a76:	460b      	mov	r3, r1
 8004a78:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004a7c:	e7f7      	b.n	8004a6e <_strtod_l+0xa6e>
 8004a7e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004a82:	9b05      	ldr	r3, [sp, #20]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1a8      	bne.n	80049da <_strtod_l+0x9da>
 8004a88:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a8c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004a8e:	0d1b      	lsrs	r3, r3, #20
 8004a90:	051b      	lsls	r3, r3, #20
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d1a1      	bne.n	80049da <_strtod_l+0x9da>
 8004a96:	4620      	mov	r0, r4
 8004a98:	4629      	mov	r1, r5
 8004a9a:	f7fb ffd7 	bl	8000a4c <__aeabi_d2lz>
 8004a9e:	f7fb fced 	bl	800047c <__aeabi_l2d>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	460b      	mov	r3, r1
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	4629      	mov	r1, r5
 8004aaa:	f7fb fb5d 	bl	8000168 <__aeabi_dsub>
 8004aae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ab0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ab4:	ea43 0308 	orr.w	r3, r3, r8
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	4604      	mov	r4, r0
 8004abc:	460d      	mov	r5, r1
 8004abe:	d066      	beq.n	8004b8e <_strtod_l+0xb8e>
 8004ac0:	a309      	add	r3, pc, #36	; (adr r3, 8004ae8 <_strtod_l+0xae8>)
 8004ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac6:	f7fb ff79 	bl	80009bc <__aeabi_dcmplt>
 8004aca:	2800      	cmp	r0, #0
 8004acc:	f47f ace2 	bne.w	8004494 <_strtod_l+0x494>
 8004ad0:	a307      	add	r3, pc, #28	; (adr r3, 8004af0 <_strtod_l+0xaf0>)
 8004ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	4629      	mov	r1, r5
 8004ada:	f7fb ff8d 	bl	80009f8 <__aeabi_dcmpgt>
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	f43f af7b 	beq.w	80049da <_strtod_l+0x9da>
 8004ae4:	e4d6      	b.n	8004494 <_strtod_l+0x494>
 8004ae6:	bf00      	nop
 8004ae8:	94a03595 	.word	0x94a03595
 8004aec:	3fdfffff 	.word	0x3fdfffff
 8004af0:	35afe535 	.word	0x35afe535
 8004af4:	3fe00000 	.word	0x3fe00000
 8004af8:	000fffff 	.word	0x000fffff
 8004afc:	7ff00000 	.word	0x7ff00000
 8004b00:	7fefffff 	.word	0x7fefffff
 8004b04:	3ff00000 	.word	0x3ff00000
 8004b08:	7fe00000 	.word	0x7fe00000
 8004b0c:	7c9fffff 	.word	0x7c9fffff
 8004b10:	3fe00000 	.word	0x3fe00000
 8004b14:	bff00000 	.word	0xbff00000
 8004b18:	9b05      	ldr	r3, [sp, #20]
 8004b1a:	b313      	cbz	r3, 8004b62 <_strtod_l+0xb62>
 8004b1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b1e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004b22:	d81e      	bhi.n	8004b62 <_strtod_l+0xb62>
 8004b24:	a326      	add	r3, pc, #152	; (adr r3, 8004bc0 <_strtod_l+0xbc0>)
 8004b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	4629      	mov	r1, r5
 8004b2e:	f7fb ff4f 	bl	80009d0 <__aeabi_dcmple>
 8004b32:	b190      	cbz	r0, 8004b5a <_strtod_l+0xb5a>
 8004b34:	4629      	mov	r1, r5
 8004b36:	4620      	mov	r0, r4
 8004b38:	f7fb ff68 	bl	8000a0c <__aeabi_d2uiz>
 8004b3c:	2801      	cmp	r0, #1
 8004b3e:	bf38      	it	cc
 8004b40:	2001      	movcc	r0, #1
 8004b42:	f7fb fc4f 	bl	80003e4 <__aeabi_ui2d>
 8004b46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b48:	4604      	mov	r4, r0
 8004b4a:	460d      	mov	r5, r1
 8004b4c:	b9d3      	cbnz	r3, 8004b84 <_strtod_l+0xb84>
 8004b4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004b52:	9012      	str	r0, [sp, #72]	; 0x48
 8004b54:	9313      	str	r3, [sp, #76]	; 0x4c
 8004b56:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004b5a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004b5c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004b60:	1a9f      	subs	r7, r3, r2
 8004b62:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b66:	f000 ffbb 	bl	8005ae0 <__ulp>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4630      	mov	r0, r6
 8004b70:	4639      	mov	r1, r7
 8004b72:	f7fb fcb1 	bl	80004d8 <__aeabi_dmul>
 8004b76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004b7a:	f7fb faf7 	bl	800016c <__adddf3>
 8004b7e:	4680      	mov	r8, r0
 8004b80:	4689      	mov	r9, r1
 8004b82:	e77e      	b.n	8004a82 <_strtod_l+0xa82>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004b8c:	e7e3      	b.n	8004b56 <_strtod_l+0xb56>
 8004b8e:	a30e      	add	r3, pc, #56	; (adr r3, 8004bc8 <_strtod_l+0xbc8>)
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	f7fb ff12 	bl	80009bc <__aeabi_dcmplt>
 8004b98:	e7a1      	b.n	8004ade <_strtod_l+0xade>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	930a      	str	r3, [sp, #40]	; 0x28
 8004b9e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004ba0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	f7ff ba71 	b.w	800408a <_strtod_l+0x8a>
 8004ba8:	2a65      	cmp	r2, #101	; 0x65
 8004baa:	f43f ab63 	beq.w	8004274 <_strtod_l+0x274>
 8004bae:	2a45      	cmp	r2, #69	; 0x45
 8004bb0:	f43f ab60 	beq.w	8004274 <_strtod_l+0x274>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	f7ff bb95 	b.w	80042e4 <_strtod_l+0x2e4>
 8004bba:	bf00      	nop
 8004bbc:	f3af 8000 	nop.w
 8004bc0:	ffc00000 	.word	0xffc00000
 8004bc4:	41dfffff 	.word	0x41dfffff
 8004bc8:	94a03595 	.word	0x94a03595
 8004bcc:	3fcfffff 	.word	0x3fcfffff

08004bd0 <strtod>:
 8004bd0:	460a      	mov	r2, r1
 8004bd2:	4601      	mov	r1, r0
 8004bd4:	4802      	ldr	r0, [pc, #8]	; (8004be0 <strtod+0x10>)
 8004bd6:	4b03      	ldr	r3, [pc, #12]	; (8004be4 <strtod+0x14>)
 8004bd8:	6800      	ldr	r0, [r0, #0]
 8004bda:	f7ff ba11 	b.w	8004000 <_strtod_l>
 8004bde:	bf00      	nop
 8004be0:	20000010 	.word	0x20000010
 8004be4:	20000078 	.word	0x20000078

08004be8 <_strtol_l.constprop.0>:
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bee:	4680      	mov	r8, r0
 8004bf0:	d001      	beq.n	8004bf6 <_strtol_l.constprop.0+0xe>
 8004bf2:	2b24      	cmp	r3, #36	; 0x24
 8004bf4:	d906      	bls.n	8004c04 <_strtol_l.constprop.0+0x1c>
 8004bf6:	f7ff f9af 	bl	8003f58 <__errno>
 8004bfa:	2316      	movs	r3, #22
 8004bfc:	6003      	str	r3, [r0, #0]
 8004bfe:	2000      	movs	r0, #0
 8004c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c04:	460d      	mov	r5, r1
 8004c06:	4f35      	ldr	r7, [pc, #212]	; (8004cdc <_strtol_l.constprop.0+0xf4>)
 8004c08:	4628      	mov	r0, r5
 8004c0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c0e:	5de6      	ldrb	r6, [r4, r7]
 8004c10:	f016 0608 	ands.w	r6, r6, #8
 8004c14:	d1f8      	bne.n	8004c08 <_strtol_l.constprop.0+0x20>
 8004c16:	2c2d      	cmp	r4, #45	; 0x2d
 8004c18:	d12f      	bne.n	8004c7a <_strtol_l.constprop.0+0x92>
 8004c1a:	2601      	movs	r6, #1
 8004c1c:	782c      	ldrb	r4, [r5, #0]
 8004c1e:	1c85      	adds	r5, r0, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d057      	beq.n	8004cd4 <_strtol_l.constprop.0+0xec>
 8004c24:	2b10      	cmp	r3, #16
 8004c26:	d109      	bne.n	8004c3c <_strtol_l.constprop.0+0x54>
 8004c28:	2c30      	cmp	r4, #48	; 0x30
 8004c2a:	d107      	bne.n	8004c3c <_strtol_l.constprop.0+0x54>
 8004c2c:	7828      	ldrb	r0, [r5, #0]
 8004c2e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004c32:	2858      	cmp	r0, #88	; 0x58
 8004c34:	d149      	bne.n	8004cca <_strtol_l.constprop.0+0xe2>
 8004c36:	2310      	movs	r3, #16
 8004c38:	786c      	ldrb	r4, [r5, #1]
 8004c3a:	3502      	adds	r5, #2
 8004c3c:	2700      	movs	r7, #0
 8004c3e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004c42:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004c46:	fbbe f9f3 	udiv	r9, lr, r3
 8004c4a:	4638      	mov	r0, r7
 8004c4c:	fb03 ea19 	mls	sl, r3, r9, lr
 8004c50:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004c54:	f1bc 0f09 	cmp.w	ip, #9
 8004c58:	d814      	bhi.n	8004c84 <_strtol_l.constprop.0+0x9c>
 8004c5a:	4664      	mov	r4, ip
 8004c5c:	42a3      	cmp	r3, r4
 8004c5e:	dd22      	ble.n	8004ca6 <_strtol_l.constprop.0+0xbe>
 8004c60:	2f00      	cmp	r7, #0
 8004c62:	db1d      	blt.n	8004ca0 <_strtol_l.constprop.0+0xb8>
 8004c64:	4581      	cmp	r9, r0
 8004c66:	d31b      	bcc.n	8004ca0 <_strtol_l.constprop.0+0xb8>
 8004c68:	d101      	bne.n	8004c6e <_strtol_l.constprop.0+0x86>
 8004c6a:	45a2      	cmp	sl, r4
 8004c6c:	db18      	blt.n	8004ca0 <_strtol_l.constprop.0+0xb8>
 8004c6e:	2701      	movs	r7, #1
 8004c70:	fb00 4003 	mla	r0, r0, r3, r4
 8004c74:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c78:	e7ea      	b.n	8004c50 <_strtol_l.constprop.0+0x68>
 8004c7a:	2c2b      	cmp	r4, #43	; 0x2b
 8004c7c:	bf04      	itt	eq
 8004c7e:	782c      	ldrbeq	r4, [r5, #0]
 8004c80:	1c85      	addeq	r5, r0, #2
 8004c82:	e7cd      	b.n	8004c20 <_strtol_l.constprop.0+0x38>
 8004c84:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004c88:	f1bc 0f19 	cmp.w	ip, #25
 8004c8c:	d801      	bhi.n	8004c92 <_strtol_l.constprop.0+0xaa>
 8004c8e:	3c37      	subs	r4, #55	; 0x37
 8004c90:	e7e4      	b.n	8004c5c <_strtol_l.constprop.0+0x74>
 8004c92:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004c96:	f1bc 0f19 	cmp.w	ip, #25
 8004c9a:	d804      	bhi.n	8004ca6 <_strtol_l.constprop.0+0xbe>
 8004c9c:	3c57      	subs	r4, #87	; 0x57
 8004c9e:	e7dd      	b.n	8004c5c <_strtol_l.constprop.0+0x74>
 8004ca0:	f04f 37ff 	mov.w	r7, #4294967295
 8004ca4:	e7e6      	b.n	8004c74 <_strtol_l.constprop.0+0x8c>
 8004ca6:	2f00      	cmp	r7, #0
 8004ca8:	da07      	bge.n	8004cba <_strtol_l.constprop.0+0xd2>
 8004caa:	2322      	movs	r3, #34	; 0x22
 8004cac:	4670      	mov	r0, lr
 8004cae:	f8c8 3000 	str.w	r3, [r8]
 8004cb2:	2a00      	cmp	r2, #0
 8004cb4:	d0a4      	beq.n	8004c00 <_strtol_l.constprop.0+0x18>
 8004cb6:	1e69      	subs	r1, r5, #1
 8004cb8:	e005      	b.n	8004cc6 <_strtol_l.constprop.0+0xde>
 8004cba:	b106      	cbz	r6, 8004cbe <_strtol_l.constprop.0+0xd6>
 8004cbc:	4240      	negs	r0, r0
 8004cbe:	2a00      	cmp	r2, #0
 8004cc0:	d09e      	beq.n	8004c00 <_strtol_l.constprop.0+0x18>
 8004cc2:	2f00      	cmp	r7, #0
 8004cc4:	d1f7      	bne.n	8004cb6 <_strtol_l.constprop.0+0xce>
 8004cc6:	6011      	str	r1, [r2, #0]
 8004cc8:	e79a      	b.n	8004c00 <_strtol_l.constprop.0+0x18>
 8004cca:	2430      	movs	r4, #48	; 0x30
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1b5      	bne.n	8004c3c <_strtol_l.constprop.0+0x54>
 8004cd0:	2308      	movs	r3, #8
 8004cd2:	e7b3      	b.n	8004c3c <_strtol_l.constprop.0+0x54>
 8004cd4:	2c30      	cmp	r4, #48	; 0x30
 8004cd6:	d0a9      	beq.n	8004c2c <_strtol_l.constprop.0+0x44>
 8004cd8:	230a      	movs	r3, #10
 8004cda:	e7af      	b.n	8004c3c <_strtol_l.constprop.0+0x54>
 8004cdc:	08006e89 	.word	0x08006e89

08004ce0 <strtol>:
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	460a      	mov	r2, r1
 8004ce4:	4601      	mov	r1, r0
 8004ce6:	4802      	ldr	r0, [pc, #8]	; (8004cf0 <strtol+0x10>)
 8004ce8:	6800      	ldr	r0, [r0, #0]
 8004cea:	f7ff bf7d 	b.w	8004be8 <_strtol_l.constprop.0>
 8004cee:	bf00      	nop
 8004cf0:	20000010 	.word	0x20000010

08004cf4 <rshift>:
 8004cf4:	6903      	ldr	r3, [r0, #16]
 8004cf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cfa:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8004cfe:	f100 0414 	add.w	r4, r0, #20
 8004d02:	ea4f 1261 	mov.w	r2, r1, asr #5
 8004d06:	dd46      	ble.n	8004d96 <rshift+0xa2>
 8004d08:	f011 011f 	ands.w	r1, r1, #31
 8004d0c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8004d10:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8004d14:	d10c      	bne.n	8004d30 <rshift+0x3c>
 8004d16:	4629      	mov	r1, r5
 8004d18:	f100 0710 	add.w	r7, r0, #16
 8004d1c:	42b1      	cmp	r1, r6
 8004d1e:	d335      	bcc.n	8004d8c <rshift+0x98>
 8004d20:	1a9b      	subs	r3, r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	1eea      	subs	r2, r5, #3
 8004d26:	4296      	cmp	r6, r2
 8004d28:	bf38      	it	cc
 8004d2a:	2300      	movcc	r3, #0
 8004d2c:	4423      	add	r3, r4
 8004d2e:	e015      	b.n	8004d5c <rshift+0x68>
 8004d30:	46a1      	mov	r9, r4
 8004d32:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8004d36:	f1c1 0820 	rsb	r8, r1, #32
 8004d3a:	40cf      	lsrs	r7, r1
 8004d3c:	f105 0e04 	add.w	lr, r5, #4
 8004d40:	4576      	cmp	r6, lr
 8004d42:	46f4      	mov	ip, lr
 8004d44:	d816      	bhi.n	8004d74 <rshift+0x80>
 8004d46:	1a9a      	subs	r2, r3, r2
 8004d48:	0092      	lsls	r2, r2, #2
 8004d4a:	3a04      	subs	r2, #4
 8004d4c:	3501      	adds	r5, #1
 8004d4e:	42ae      	cmp	r6, r5
 8004d50:	bf38      	it	cc
 8004d52:	2200      	movcc	r2, #0
 8004d54:	18a3      	adds	r3, r4, r2
 8004d56:	50a7      	str	r7, [r4, r2]
 8004d58:	b107      	cbz	r7, 8004d5c <rshift+0x68>
 8004d5a:	3304      	adds	r3, #4
 8004d5c:	42a3      	cmp	r3, r4
 8004d5e:	eba3 0204 	sub.w	r2, r3, r4
 8004d62:	bf08      	it	eq
 8004d64:	2300      	moveq	r3, #0
 8004d66:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8004d6a:	6102      	str	r2, [r0, #16]
 8004d6c:	bf08      	it	eq
 8004d6e:	6143      	streq	r3, [r0, #20]
 8004d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d74:	f8dc c000 	ldr.w	ip, [ip]
 8004d78:	fa0c fc08 	lsl.w	ip, ip, r8
 8004d7c:	ea4c 0707 	orr.w	r7, ip, r7
 8004d80:	f849 7b04 	str.w	r7, [r9], #4
 8004d84:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004d88:	40cf      	lsrs	r7, r1
 8004d8a:	e7d9      	b.n	8004d40 <rshift+0x4c>
 8004d8c:	f851 cb04 	ldr.w	ip, [r1], #4
 8004d90:	f847 cf04 	str.w	ip, [r7, #4]!
 8004d94:	e7c2      	b.n	8004d1c <rshift+0x28>
 8004d96:	4623      	mov	r3, r4
 8004d98:	e7e0      	b.n	8004d5c <rshift+0x68>

08004d9a <__hexdig_fun>:
 8004d9a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004d9e:	2b09      	cmp	r3, #9
 8004da0:	d802      	bhi.n	8004da8 <__hexdig_fun+0xe>
 8004da2:	3820      	subs	r0, #32
 8004da4:	b2c0      	uxtb	r0, r0
 8004da6:	4770      	bx	lr
 8004da8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004dac:	2b05      	cmp	r3, #5
 8004dae:	d801      	bhi.n	8004db4 <__hexdig_fun+0x1a>
 8004db0:	3847      	subs	r0, #71	; 0x47
 8004db2:	e7f7      	b.n	8004da4 <__hexdig_fun+0xa>
 8004db4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004db8:	2b05      	cmp	r3, #5
 8004dba:	d801      	bhi.n	8004dc0 <__hexdig_fun+0x26>
 8004dbc:	3827      	subs	r0, #39	; 0x27
 8004dbe:	e7f1      	b.n	8004da4 <__hexdig_fun+0xa>
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	4770      	bx	lr

08004dc4 <__gethex>:
 8004dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc8:	b08b      	sub	sp, #44	; 0x2c
 8004dca:	9305      	str	r3, [sp, #20]
 8004dcc:	4bb2      	ldr	r3, [pc, #712]	; (8005098 <__gethex+0x2d4>)
 8004dce:	9002      	str	r0, [sp, #8]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	468b      	mov	fp, r1
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	4690      	mov	r8, r2
 8004dd8:	9303      	str	r3, [sp, #12]
 8004dda:	f7fb f9b9 	bl	8000150 <strlen>
 8004dde:	4682      	mov	sl, r0
 8004de0:	9b03      	ldr	r3, [sp, #12]
 8004de2:	f8db 2000 	ldr.w	r2, [fp]
 8004de6:	4403      	add	r3, r0
 8004de8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004dec:	9306      	str	r3, [sp, #24]
 8004dee:	1c93      	adds	r3, r2, #2
 8004df0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8004df4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8004df8:	32fe      	adds	r2, #254	; 0xfe
 8004dfa:	18d1      	adds	r1, r2, r3
 8004dfc:	461f      	mov	r7, r3
 8004dfe:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004e02:	9101      	str	r1, [sp, #4]
 8004e04:	2830      	cmp	r0, #48	; 0x30
 8004e06:	d0f8      	beq.n	8004dfa <__gethex+0x36>
 8004e08:	f7ff ffc7 	bl	8004d9a <__hexdig_fun>
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	2800      	cmp	r0, #0
 8004e10:	d13a      	bne.n	8004e88 <__gethex+0xc4>
 8004e12:	4652      	mov	r2, sl
 8004e14:	4638      	mov	r0, r7
 8004e16:	9903      	ldr	r1, [sp, #12]
 8004e18:	f001 f868 	bl	8005eec <strncmp>
 8004e1c:	4605      	mov	r5, r0
 8004e1e:	2800      	cmp	r0, #0
 8004e20:	d166      	bne.n	8004ef0 <__gethex+0x12c>
 8004e22:	f817 000a 	ldrb.w	r0, [r7, sl]
 8004e26:	eb07 060a 	add.w	r6, r7, sl
 8004e2a:	f7ff ffb6 	bl	8004d9a <__hexdig_fun>
 8004e2e:	2800      	cmp	r0, #0
 8004e30:	d060      	beq.n	8004ef4 <__gethex+0x130>
 8004e32:	4633      	mov	r3, r6
 8004e34:	7818      	ldrb	r0, [r3, #0]
 8004e36:	461f      	mov	r7, r3
 8004e38:	2830      	cmp	r0, #48	; 0x30
 8004e3a:	f103 0301 	add.w	r3, r3, #1
 8004e3e:	d0f9      	beq.n	8004e34 <__gethex+0x70>
 8004e40:	f7ff ffab 	bl	8004d9a <__hexdig_fun>
 8004e44:	2301      	movs	r3, #1
 8004e46:	fab0 f480 	clz	r4, r0
 8004e4a:	4635      	mov	r5, r6
 8004e4c:	0964      	lsrs	r4, r4, #5
 8004e4e:	9301      	str	r3, [sp, #4]
 8004e50:	463a      	mov	r2, r7
 8004e52:	4616      	mov	r6, r2
 8004e54:	7830      	ldrb	r0, [r6, #0]
 8004e56:	3201      	adds	r2, #1
 8004e58:	f7ff ff9f 	bl	8004d9a <__hexdig_fun>
 8004e5c:	2800      	cmp	r0, #0
 8004e5e:	d1f8      	bne.n	8004e52 <__gethex+0x8e>
 8004e60:	4652      	mov	r2, sl
 8004e62:	4630      	mov	r0, r6
 8004e64:	9903      	ldr	r1, [sp, #12]
 8004e66:	f001 f841 	bl	8005eec <strncmp>
 8004e6a:	b980      	cbnz	r0, 8004e8e <__gethex+0xca>
 8004e6c:	b94d      	cbnz	r5, 8004e82 <__gethex+0xbe>
 8004e6e:	eb06 050a 	add.w	r5, r6, sl
 8004e72:	462a      	mov	r2, r5
 8004e74:	4616      	mov	r6, r2
 8004e76:	7830      	ldrb	r0, [r6, #0]
 8004e78:	3201      	adds	r2, #1
 8004e7a:	f7ff ff8e 	bl	8004d9a <__hexdig_fun>
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	d1f8      	bne.n	8004e74 <__gethex+0xb0>
 8004e82:	1bad      	subs	r5, r5, r6
 8004e84:	00ad      	lsls	r5, r5, #2
 8004e86:	e004      	b.n	8004e92 <__gethex+0xce>
 8004e88:	2400      	movs	r4, #0
 8004e8a:	4625      	mov	r5, r4
 8004e8c:	e7e0      	b.n	8004e50 <__gethex+0x8c>
 8004e8e:	2d00      	cmp	r5, #0
 8004e90:	d1f7      	bne.n	8004e82 <__gethex+0xbe>
 8004e92:	7833      	ldrb	r3, [r6, #0]
 8004e94:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004e98:	2b50      	cmp	r3, #80	; 0x50
 8004e9a:	d139      	bne.n	8004f10 <__gethex+0x14c>
 8004e9c:	7873      	ldrb	r3, [r6, #1]
 8004e9e:	2b2b      	cmp	r3, #43	; 0x2b
 8004ea0:	d02a      	beq.n	8004ef8 <__gethex+0x134>
 8004ea2:	2b2d      	cmp	r3, #45	; 0x2d
 8004ea4:	d02c      	beq.n	8004f00 <__gethex+0x13c>
 8004ea6:	f04f 0900 	mov.w	r9, #0
 8004eaa:	1c71      	adds	r1, r6, #1
 8004eac:	7808      	ldrb	r0, [r1, #0]
 8004eae:	f7ff ff74 	bl	8004d9a <__hexdig_fun>
 8004eb2:	1e43      	subs	r3, r0, #1
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b18      	cmp	r3, #24
 8004eb8:	d82a      	bhi.n	8004f10 <__gethex+0x14c>
 8004eba:	f1a0 0210 	sub.w	r2, r0, #16
 8004ebe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004ec2:	f7ff ff6a 	bl	8004d9a <__hexdig_fun>
 8004ec6:	1e43      	subs	r3, r0, #1
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b18      	cmp	r3, #24
 8004ecc:	d91b      	bls.n	8004f06 <__gethex+0x142>
 8004ece:	f1b9 0f00 	cmp.w	r9, #0
 8004ed2:	d000      	beq.n	8004ed6 <__gethex+0x112>
 8004ed4:	4252      	negs	r2, r2
 8004ed6:	4415      	add	r5, r2
 8004ed8:	f8cb 1000 	str.w	r1, [fp]
 8004edc:	b1d4      	cbz	r4, 8004f14 <__gethex+0x150>
 8004ede:	9b01      	ldr	r3, [sp, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	bf14      	ite	ne
 8004ee4:	2700      	movne	r7, #0
 8004ee6:	2706      	moveq	r7, #6
 8004ee8:	4638      	mov	r0, r7
 8004eea:	b00b      	add	sp, #44	; 0x2c
 8004eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ef0:	463e      	mov	r6, r7
 8004ef2:	4625      	mov	r5, r4
 8004ef4:	2401      	movs	r4, #1
 8004ef6:	e7cc      	b.n	8004e92 <__gethex+0xce>
 8004ef8:	f04f 0900 	mov.w	r9, #0
 8004efc:	1cb1      	adds	r1, r6, #2
 8004efe:	e7d5      	b.n	8004eac <__gethex+0xe8>
 8004f00:	f04f 0901 	mov.w	r9, #1
 8004f04:	e7fa      	b.n	8004efc <__gethex+0x138>
 8004f06:	230a      	movs	r3, #10
 8004f08:	fb03 0202 	mla	r2, r3, r2, r0
 8004f0c:	3a10      	subs	r2, #16
 8004f0e:	e7d6      	b.n	8004ebe <__gethex+0xfa>
 8004f10:	4631      	mov	r1, r6
 8004f12:	e7e1      	b.n	8004ed8 <__gethex+0x114>
 8004f14:	4621      	mov	r1, r4
 8004f16:	1bf3      	subs	r3, r6, r7
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	2b07      	cmp	r3, #7
 8004f1c:	dc0a      	bgt.n	8004f34 <__gethex+0x170>
 8004f1e:	9802      	ldr	r0, [sp, #8]
 8004f20:	f000 fa6e 	bl	8005400 <_Balloc>
 8004f24:	4604      	mov	r4, r0
 8004f26:	b940      	cbnz	r0, 8004f3a <__gethex+0x176>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	21de      	movs	r1, #222	; 0xde
 8004f2c:	4b5b      	ldr	r3, [pc, #364]	; (800509c <__gethex+0x2d8>)
 8004f2e:	485c      	ldr	r0, [pc, #368]	; (80050a0 <__gethex+0x2dc>)
 8004f30:	f000 fffe 	bl	8005f30 <__assert_func>
 8004f34:	3101      	adds	r1, #1
 8004f36:	105b      	asrs	r3, r3, #1
 8004f38:	e7ef      	b.n	8004f1a <__gethex+0x156>
 8004f3a:	f04f 0b00 	mov.w	fp, #0
 8004f3e:	f100 0914 	add.w	r9, r0, #20
 8004f42:	f1ca 0301 	rsb	r3, sl, #1
 8004f46:	f8cd 9010 	str.w	r9, [sp, #16]
 8004f4a:	f8cd b004 	str.w	fp, [sp, #4]
 8004f4e:	9308      	str	r3, [sp, #32]
 8004f50:	42b7      	cmp	r7, r6
 8004f52:	d33f      	bcc.n	8004fd4 <__gethex+0x210>
 8004f54:	9f04      	ldr	r7, [sp, #16]
 8004f56:	9b01      	ldr	r3, [sp, #4]
 8004f58:	f847 3b04 	str.w	r3, [r7], #4
 8004f5c:	eba7 0709 	sub.w	r7, r7, r9
 8004f60:	10bf      	asrs	r7, r7, #2
 8004f62:	6127      	str	r7, [r4, #16]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fb3d 	bl	80055e4 <__hi0bits>
 8004f6a:	017f      	lsls	r7, r7, #5
 8004f6c:	f8d8 6000 	ldr.w	r6, [r8]
 8004f70:	1a3f      	subs	r7, r7, r0
 8004f72:	42b7      	cmp	r7, r6
 8004f74:	dd62      	ble.n	800503c <__gethex+0x278>
 8004f76:	1bbf      	subs	r7, r7, r6
 8004f78:	4639      	mov	r1, r7
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	f000 fed7 	bl	8005d2e <__any_on>
 8004f80:	4682      	mov	sl, r0
 8004f82:	b1a8      	cbz	r0, 8004fb0 <__gethex+0x1ec>
 8004f84:	f04f 0a01 	mov.w	sl, #1
 8004f88:	1e7b      	subs	r3, r7, #1
 8004f8a:	1159      	asrs	r1, r3, #5
 8004f8c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004f90:	f003 021f 	and.w	r2, r3, #31
 8004f94:	fa0a f202 	lsl.w	r2, sl, r2
 8004f98:	420a      	tst	r2, r1
 8004f9a:	d009      	beq.n	8004fb0 <__gethex+0x1ec>
 8004f9c:	4553      	cmp	r3, sl
 8004f9e:	dd05      	ble.n	8004fac <__gethex+0x1e8>
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	1eb9      	subs	r1, r7, #2
 8004fa4:	f000 fec3 	bl	8005d2e <__any_on>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	d144      	bne.n	8005036 <__gethex+0x272>
 8004fac:	f04f 0a02 	mov.w	sl, #2
 8004fb0:	4639      	mov	r1, r7
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	f7ff fe9e 	bl	8004cf4 <rshift>
 8004fb8:	443d      	add	r5, r7
 8004fba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004fbe:	42ab      	cmp	r3, r5
 8004fc0:	da4a      	bge.n	8005058 <__gethex+0x294>
 8004fc2:	4621      	mov	r1, r4
 8004fc4:	9802      	ldr	r0, [sp, #8]
 8004fc6:	f000 fa5b 	bl	8005480 <_Bfree>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004fce:	27a3      	movs	r7, #163	; 0xa3
 8004fd0:	6013      	str	r3, [r2, #0]
 8004fd2:	e789      	b.n	8004ee8 <__gethex+0x124>
 8004fd4:	1e73      	subs	r3, r6, #1
 8004fd6:	9a06      	ldr	r2, [sp, #24]
 8004fd8:	9307      	str	r3, [sp, #28]
 8004fda:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d019      	beq.n	8005016 <__gethex+0x252>
 8004fe2:	f1bb 0f20 	cmp.w	fp, #32
 8004fe6:	d107      	bne.n	8004ff8 <__gethex+0x234>
 8004fe8:	9b04      	ldr	r3, [sp, #16]
 8004fea:	9a01      	ldr	r2, [sp, #4]
 8004fec:	f843 2b04 	str.w	r2, [r3], #4
 8004ff0:	9304      	str	r3, [sp, #16]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	469b      	mov	fp, r3
 8004ff6:	9301      	str	r3, [sp, #4]
 8004ff8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8004ffc:	f7ff fecd 	bl	8004d9a <__hexdig_fun>
 8005000:	9b01      	ldr	r3, [sp, #4]
 8005002:	f000 000f 	and.w	r0, r0, #15
 8005006:	fa00 f00b 	lsl.w	r0, r0, fp
 800500a:	4303      	orrs	r3, r0
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	f10b 0b04 	add.w	fp, fp, #4
 8005012:	9b07      	ldr	r3, [sp, #28]
 8005014:	e00d      	b.n	8005032 <__gethex+0x26e>
 8005016:	9a08      	ldr	r2, [sp, #32]
 8005018:	1e73      	subs	r3, r6, #1
 800501a:	4413      	add	r3, r2
 800501c:	42bb      	cmp	r3, r7
 800501e:	d3e0      	bcc.n	8004fe2 <__gethex+0x21e>
 8005020:	4618      	mov	r0, r3
 8005022:	4652      	mov	r2, sl
 8005024:	9903      	ldr	r1, [sp, #12]
 8005026:	9309      	str	r3, [sp, #36]	; 0x24
 8005028:	f000 ff60 	bl	8005eec <strncmp>
 800502c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800502e:	2800      	cmp	r0, #0
 8005030:	d1d7      	bne.n	8004fe2 <__gethex+0x21e>
 8005032:	461e      	mov	r6, r3
 8005034:	e78c      	b.n	8004f50 <__gethex+0x18c>
 8005036:	f04f 0a03 	mov.w	sl, #3
 800503a:	e7b9      	b.n	8004fb0 <__gethex+0x1ec>
 800503c:	da09      	bge.n	8005052 <__gethex+0x28e>
 800503e:	1bf7      	subs	r7, r6, r7
 8005040:	4621      	mov	r1, r4
 8005042:	463a      	mov	r2, r7
 8005044:	9802      	ldr	r0, [sp, #8]
 8005046:	f000 fc33 	bl	80058b0 <__lshift>
 800504a:	4604      	mov	r4, r0
 800504c:	1bed      	subs	r5, r5, r7
 800504e:	f100 0914 	add.w	r9, r0, #20
 8005052:	f04f 0a00 	mov.w	sl, #0
 8005056:	e7b0      	b.n	8004fba <__gethex+0x1f6>
 8005058:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800505c:	42a8      	cmp	r0, r5
 800505e:	dd72      	ble.n	8005146 <__gethex+0x382>
 8005060:	1b45      	subs	r5, r0, r5
 8005062:	42ae      	cmp	r6, r5
 8005064:	dc35      	bgt.n	80050d2 <__gethex+0x30e>
 8005066:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800506a:	2b02      	cmp	r3, #2
 800506c:	d029      	beq.n	80050c2 <__gethex+0x2fe>
 800506e:	2b03      	cmp	r3, #3
 8005070:	d02b      	beq.n	80050ca <__gethex+0x306>
 8005072:	2b01      	cmp	r3, #1
 8005074:	d11c      	bne.n	80050b0 <__gethex+0x2ec>
 8005076:	42ae      	cmp	r6, r5
 8005078:	d11a      	bne.n	80050b0 <__gethex+0x2ec>
 800507a:	2e01      	cmp	r6, #1
 800507c:	d112      	bne.n	80050a4 <__gethex+0x2e0>
 800507e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005082:	9a05      	ldr	r2, [sp, #20]
 8005084:	2762      	movs	r7, #98	; 0x62
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	2301      	movs	r3, #1
 800508a:	6123      	str	r3, [r4, #16]
 800508c:	f8c9 3000 	str.w	r3, [r9]
 8005090:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005092:	601c      	str	r4, [r3, #0]
 8005094:	e728      	b.n	8004ee8 <__gethex+0x124>
 8005096:	bf00      	nop
 8005098:	08007000 	.word	0x08007000
 800509c:	08006f89 	.word	0x08006f89
 80050a0:	08006f9a 	.word	0x08006f9a
 80050a4:	4620      	mov	r0, r4
 80050a6:	1e71      	subs	r1, r6, #1
 80050a8:	f000 fe41 	bl	8005d2e <__any_on>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d1e6      	bne.n	800507e <__gethex+0x2ba>
 80050b0:	4621      	mov	r1, r4
 80050b2:	9802      	ldr	r0, [sp, #8]
 80050b4:	f000 f9e4 	bl	8005480 <_Bfree>
 80050b8:	2300      	movs	r3, #0
 80050ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80050bc:	2750      	movs	r7, #80	; 0x50
 80050be:	6013      	str	r3, [r2, #0]
 80050c0:	e712      	b.n	8004ee8 <__gethex+0x124>
 80050c2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f3      	bne.n	80050b0 <__gethex+0x2ec>
 80050c8:	e7d9      	b.n	800507e <__gethex+0x2ba>
 80050ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d1d6      	bne.n	800507e <__gethex+0x2ba>
 80050d0:	e7ee      	b.n	80050b0 <__gethex+0x2ec>
 80050d2:	1e6f      	subs	r7, r5, #1
 80050d4:	f1ba 0f00 	cmp.w	sl, #0
 80050d8:	d132      	bne.n	8005140 <__gethex+0x37c>
 80050da:	b127      	cbz	r7, 80050e6 <__gethex+0x322>
 80050dc:	4639      	mov	r1, r7
 80050de:	4620      	mov	r0, r4
 80050e0:	f000 fe25 	bl	8005d2e <__any_on>
 80050e4:	4682      	mov	sl, r0
 80050e6:	2101      	movs	r1, #1
 80050e8:	117b      	asrs	r3, r7, #5
 80050ea:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80050ee:	f007 071f 	and.w	r7, r7, #31
 80050f2:	fa01 f707 	lsl.w	r7, r1, r7
 80050f6:	421f      	tst	r7, r3
 80050f8:	f04f 0702 	mov.w	r7, #2
 80050fc:	4629      	mov	r1, r5
 80050fe:	4620      	mov	r0, r4
 8005100:	bf18      	it	ne
 8005102:	f04a 0a02 	orrne.w	sl, sl, #2
 8005106:	1b76      	subs	r6, r6, r5
 8005108:	f7ff fdf4 	bl	8004cf4 <rshift>
 800510c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005110:	f1ba 0f00 	cmp.w	sl, #0
 8005114:	d048      	beq.n	80051a8 <__gethex+0x3e4>
 8005116:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800511a:	2b02      	cmp	r3, #2
 800511c:	d015      	beq.n	800514a <__gethex+0x386>
 800511e:	2b03      	cmp	r3, #3
 8005120:	d017      	beq.n	8005152 <__gethex+0x38e>
 8005122:	2b01      	cmp	r3, #1
 8005124:	d109      	bne.n	800513a <__gethex+0x376>
 8005126:	f01a 0f02 	tst.w	sl, #2
 800512a:	d006      	beq.n	800513a <__gethex+0x376>
 800512c:	f8d9 0000 	ldr.w	r0, [r9]
 8005130:	ea4a 0a00 	orr.w	sl, sl, r0
 8005134:	f01a 0f01 	tst.w	sl, #1
 8005138:	d10e      	bne.n	8005158 <__gethex+0x394>
 800513a:	f047 0710 	orr.w	r7, r7, #16
 800513e:	e033      	b.n	80051a8 <__gethex+0x3e4>
 8005140:	f04f 0a01 	mov.w	sl, #1
 8005144:	e7cf      	b.n	80050e6 <__gethex+0x322>
 8005146:	2701      	movs	r7, #1
 8005148:	e7e2      	b.n	8005110 <__gethex+0x34c>
 800514a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800514c:	f1c3 0301 	rsb	r3, r3, #1
 8005150:	9315      	str	r3, [sp, #84]	; 0x54
 8005152:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f0      	beq.n	800513a <__gethex+0x376>
 8005158:	f04f 0c00 	mov.w	ip, #0
 800515c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005160:	f104 0314 	add.w	r3, r4, #20
 8005164:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005168:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800516c:	4618      	mov	r0, r3
 800516e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005172:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005176:	d01c      	beq.n	80051b2 <__gethex+0x3ee>
 8005178:	3201      	adds	r2, #1
 800517a:	6002      	str	r2, [r0, #0]
 800517c:	2f02      	cmp	r7, #2
 800517e:	f104 0314 	add.w	r3, r4, #20
 8005182:	d13d      	bne.n	8005200 <__gethex+0x43c>
 8005184:	f8d8 2000 	ldr.w	r2, [r8]
 8005188:	3a01      	subs	r2, #1
 800518a:	42b2      	cmp	r2, r6
 800518c:	d10a      	bne.n	80051a4 <__gethex+0x3e0>
 800518e:	2201      	movs	r2, #1
 8005190:	1171      	asrs	r1, r6, #5
 8005192:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005196:	f006 061f 	and.w	r6, r6, #31
 800519a:	fa02 f606 	lsl.w	r6, r2, r6
 800519e:	421e      	tst	r6, r3
 80051a0:	bf18      	it	ne
 80051a2:	4617      	movne	r7, r2
 80051a4:	f047 0720 	orr.w	r7, r7, #32
 80051a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80051aa:	601c      	str	r4, [r3, #0]
 80051ac:	9b05      	ldr	r3, [sp, #20]
 80051ae:	601d      	str	r5, [r3, #0]
 80051b0:	e69a      	b.n	8004ee8 <__gethex+0x124>
 80051b2:	4299      	cmp	r1, r3
 80051b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80051b8:	d8d8      	bhi.n	800516c <__gethex+0x3a8>
 80051ba:	68a3      	ldr	r3, [r4, #8]
 80051bc:	459b      	cmp	fp, r3
 80051be:	db17      	blt.n	80051f0 <__gethex+0x42c>
 80051c0:	6861      	ldr	r1, [r4, #4]
 80051c2:	9802      	ldr	r0, [sp, #8]
 80051c4:	3101      	adds	r1, #1
 80051c6:	f000 f91b 	bl	8005400 <_Balloc>
 80051ca:	4681      	mov	r9, r0
 80051cc:	b918      	cbnz	r0, 80051d6 <__gethex+0x412>
 80051ce:	4602      	mov	r2, r0
 80051d0:	2184      	movs	r1, #132	; 0x84
 80051d2:	4b19      	ldr	r3, [pc, #100]	; (8005238 <__gethex+0x474>)
 80051d4:	e6ab      	b.n	8004f2e <__gethex+0x16a>
 80051d6:	6922      	ldr	r2, [r4, #16]
 80051d8:	f104 010c 	add.w	r1, r4, #12
 80051dc:	3202      	adds	r2, #2
 80051de:	0092      	lsls	r2, r2, #2
 80051e0:	300c      	adds	r0, #12
 80051e2:	f000 f8ff 	bl	80053e4 <memcpy>
 80051e6:	4621      	mov	r1, r4
 80051e8:	9802      	ldr	r0, [sp, #8]
 80051ea:	f000 f949 	bl	8005480 <_Bfree>
 80051ee:	464c      	mov	r4, r9
 80051f0:	6923      	ldr	r3, [r4, #16]
 80051f2:	1c5a      	adds	r2, r3, #1
 80051f4:	6122      	str	r2, [r4, #16]
 80051f6:	2201      	movs	r2, #1
 80051f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80051fc:	615a      	str	r2, [r3, #20]
 80051fe:	e7bd      	b.n	800517c <__gethex+0x3b8>
 8005200:	6922      	ldr	r2, [r4, #16]
 8005202:	455a      	cmp	r2, fp
 8005204:	dd0b      	ble.n	800521e <__gethex+0x45a>
 8005206:	2101      	movs	r1, #1
 8005208:	4620      	mov	r0, r4
 800520a:	f7ff fd73 	bl	8004cf4 <rshift>
 800520e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005212:	3501      	adds	r5, #1
 8005214:	42ab      	cmp	r3, r5
 8005216:	f6ff aed4 	blt.w	8004fc2 <__gethex+0x1fe>
 800521a:	2701      	movs	r7, #1
 800521c:	e7c2      	b.n	80051a4 <__gethex+0x3e0>
 800521e:	f016 061f 	ands.w	r6, r6, #31
 8005222:	d0fa      	beq.n	800521a <__gethex+0x456>
 8005224:	4453      	add	r3, sl
 8005226:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800522a:	f000 f9db 	bl	80055e4 <__hi0bits>
 800522e:	f1c6 0620 	rsb	r6, r6, #32
 8005232:	42b0      	cmp	r0, r6
 8005234:	dbe7      	blt.n	8005206 <__gethex+0x442>
 8005236:	e7f0      	b.n	800521a <__gethex+0x456>
 8005238:	08006f89 	.word	0x08006f89

0800523c <L_shift>:
 800523c:	f1c2 0208 	rsb	r2, r2, #8
 8005240:	0092      	lsls	r2, r2, #2
 8005242:	b570      	push	{r4, r5, r6, lr}
 8005244:	f1c2 0620 	rsb	r6, r2, #32
 8005248:	6843      	ldr	r3, [r0, #4]
 800524a:	6804      	ldr	r4, [r0, #0]
 800524c:	fa03 f506 	lsl.w	r5, r3, r6
 8005250:	432c      	orrs	r4, r5
 8005252:	40d3      	lsrs	r3, r2
 8005254:	6004      	str	r4, [r0, #0]
 8005256:	f840 3f04 	str.w	r3, [r0, #4]!
 800525a:	4288      	cmp	r0, r1
 800525c:	d3f4      	bcc.n	8005248 <L_shift+0xc>
 800525e:	bd70      	pop	{r4, r5, r6, pc}

08005260 <__match>:
 8005260:	b530      	push	{r4, r5, lr}
 8005262:	6803      	ldr	r3, [r0, #0]
 8005264:	3301      	adds	r3, #1
 8005266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800526a:	b914      	cbnz	r4, 8005272 <__match+0x12>
 800526c:	6003      	str	r3, [r0, #0]
 800526e:	2001      	movs	r0, #1
 8005270:	bd30      	pop	{r4, r5, pc}
 8005272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005276:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800527a:	2d19      	cmp	r5, #25
 800527c:	bf98      	it	ls
 800527e:	3220      	addls	r2, #32
 8005280:	42a2      	cmp	r2, r4
 8005282:	d0f0      	beq.n	8005266 <__match+0x6>
 8005284:	2000      	movs	r0, #0
 8005286:	e7f3      	b.n	8005270 <__match+0x10>

08005288 <__hexnan>:
 8005288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800528c:	2500      	movs	r5, #0
 800528e:	680b      	ldr	r3, [r1, #0]
 8005290:	4682      	mov	sl, r0
 8005292:	115e      	asrs	r6, r3, #5
 8005294:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005298:	f013 031f 	ands.w	r3, r3, #31
 800529c:	bf18      	it	ne
 800529e:	3604      	addne	r6, #4
 80052a0:	1f37      	subs	r7, r6, #4
 80052a2:	46b9      	mov	r9, r7
 80052a4:	463c      	mov	r4, r7
 80052a6:	46ab      	mov	fp, r5
 80052a8:	b087      	sub	sp, #28
 80052aa:	4690      	mov	r8, r2
 80052ac:	6802      	ldr	r2, [r0, #0]
 80052ae:	9301      	str	r3, [sp, #4]
 80052b0:	f846 5c04 	str.w	r5, [r6, #-4]
 80052b4:	9502      	str	r5, [sp, #8]
 80052b6:	7851      	ldrb	r1, [r2, #1]
 80052b8:	1c53      	adds	r3, r2, #1
 80052ba:	9303      	str	r3, [sp, #12]
 80052bc:	b341      	cbz	r1, 8005310 <__hexnan+0x88>
 80052be:	4608      	mov	r0, r1
 80052c0:	9205      	str	r2, [sp, #20]
 80052c2:	9104      	str	r1, [sp, #16]
 80052c4:	f7ff fd69 	bl	8004d9a <__hexdig_fun>
 80052c8:	2800      	cmp	r0, #0
 80052ca:	d14f      	bne.n	800536c <__hexnan+0xe4>
 80052cc:	9904      	ldr	r1, [sp, #16]
 80052ce:	9a05      	ldr	r2, [sp, #20]
 80052d0:	2920      	cmp	r1, #32
 80052d2:	d818      	bhi.n	8005306 <__hexnan+0x7e>
 80052d4:	9b02      	ldr	r3, [sp, #8]
 80052d6:	459b      	cmp	fp, r3
 80052d8:	dd13      	ble.n	8005302 <__hexnan+0x7a>
 80052da:	454c      	cmp	r4, r9
 80052dc:	d206      	bcs.n	80052ec <__hexnan+0x64>
 80052de:	2d07      	cmp	r5, #7
 80052e0:	dc04      	bgt.n	80052ec <__hexnan+0x64>
 80052e2:	462a      	mov	r2, r5
 80052e4:	4649      	mov	r1, r9
 80052e6:	4620      	mov	r0, r4
 80052e8:	f7ff ffa8 	bl	800523c <L_shift>
 80052ec:	4544      	cmp	r4, r8
 80052ee:	d950      	bls.n	8005392 <__hexnan+0x10a>
 80052f0:	2300      	movs	r3, #0
 80052f2:	f1a4 0904 	sub.w	r9, r4, #4
 80052f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80052fa:	461d      	mov	r5, r3
 80052fc:	464c      	mov	r4, r9
 80052fe:	f8cd b008 	str.w	fp, [sp, #8]
 8005302:	9a03      	ldr	r2, [sp, #12]
 8005304:	e7d7      	b.n	80052b6 <__hexnan+0x2e>
 8005306:	2929      	cmp	r1, #41	; 0x29
 8005308:	d156      	bne.n	80053b8 <__hexnan+0x130>
 800530a:	3202      	adds	r2, #2
 800530c:	f8ca 2000 	str.w	r2, [sl]
 8005310:	f1bb 0f00 	cmp.w	fp, #0
 8005314:	d050      	beq.n	80053b8 <__hexnan+0x130>
 8005316:	454c      	cmp	r4, r9
 8005318:	d206      	bcs.n	8005328 <__hexnan+0xa0>
 800531a:	2d07      	cmp	r5, #7
 800531c:	dc04      	bgt.n	8005328 <__hexnan+0xa0>
 800531e:	462a      	mov	r2, r5
 8005320:	4649      	mov	r1, r9
 8005322:	4620      	mov	r0, r4
 8005324:	f7ff ff8a 	bl	800523c <L_shift>
 8005328:	4544      	cmp	r4, r8
 800532a:	d934      	bls.n	8005396 <__hexnan+0x10e>
 800532c:	4623      	mov	r3, r4
 800532e:	f1a8 0204 	sub.w	r2, r8, #4
 8005332:	f853 1b04 	ldr.w	r1, [r3], #4
 8005336:	429f      	cmp	r7, r3
 8005338:	f842 1f04 	str.w	r1, [r2, #4]!
 800533c:	d2f9      	bcs.n	8005332 <__hexnan+0xaa>
 800533e:	1b3b      	subs	r3, r7, r4
 8005340:	f023 0303 	bic.w	r3, r3, #3
 8005344:	3304      	adds	r3, #4
 8005346:	3401      	adds	r4, #1
 8005348:	3e03      	subs	r6, #3
 800534a:	42b4      	cmp	r4, r6
 800534c:	bf88      	it	hi
 800534e:	2304      	movhi	r3, #4
 8005350:	2200      	movs	r2, #0
 8005352:	4443      	add	r3, r8
 8005354:	f843 2b04 	str.w	r2, [r3], #4
 8005358:	429f      	cmp	r7, r3
 800535a:	d2fb      	bcs.n	8005354 <__hexnan+0xcc>
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	b91b      	cbnz	r3, 8005368 <__hexnan+0xe0>
 8005360:	4547      	cmp	r7, r8
 8005362:	d127      	bne.n	80053b4 <__hexnan+0x12c>
 8005364:	2301      	movs	r3, #1
 8005366:	603b      	str	r3, [r7, #0]
 8005368:	2005      	movs	r0, #5
 800536a:	e026      	b.n	80053ba <__hexnan+0x132>
 800536c:	3501      	adds	r5, #1
 800536e:	2d08      	cmp	r5, #8
 8005370:	f10b 0b01 	add.w	fp, fp, #1
 8005374:	dd06      	ble.n	8005384 <__hexnan+0xfc>
 8005376:	4544      	cmp	r4, r8
 8005378:	d9c3      	bls.n	8005302 <__hexnan+0x7a>
 800537a:	2300      	movs	r3, #0
 800537c:	2501      	movs	r5, #1
 800537e:	f844 3c04 	str.w	r3, [r4, #-4]
 8005382:	3c04      	subs	r4, #4
 8005384:	6822      	ldr	r2, [r4, #0]
 8005386:	f000 000f 	and.w	r0, r0, #15
 800538a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800538e:	6022      	str	r2, [r4, #0]
 8005390:	e7b7      	b.n	8005302 <__hexnan+0x7a>
 8005392:	2508      	movs	r5, #8
 8005394:	e7b5      	b.n	8005302 <__hexnan+0x7a>
 8005396:	9b01      	ldr	r3, [sp, #4]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0df      	beq.n	800535c <__hexnan+0xd4>
 800539c:	f04f 32ff 	mov.w	r2, #4294967295
 80053a0:	f1c3 0320 	rsb	r3, r3, #32
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
 80053a8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80053ac:	401a      	ands	r2, r3
 80053ae:	f846 2c04 	str.w	r2, [r6, #-4]
 80053b2:	e7d3      	b.n	800535c <__hexnan+0xd4>
 80053b4:	3f04      	subs	r7, #4
 80053b6:	e7d1      	b.n	800535c <__hexnan+0xd4>
 80053b8:	2004      	movs	r0, #4
 80053ba:	b007      	add	sp, #28
 80053bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080053c0 <__ascii_mbtowc>:
 80053c0:	b082      	sub	sp, #8
 80053c2:	b901      	cbnz	r1, 80053c6 <__ascii_mbtowc+0x6>
 80053c4:	a901      	add	r1, sp, #4
 80053c6:	b142      	cbz	r2, 80053da <__ascii_mbtowc+0x1a>
 80053c8:	b14b      	cbz	r3, 80053de <__ascii_mbtowc+0x1e>
 80053ca:	7813      	ldrb	r3, [r2, #0]
 80053cc:	600b      	str	r3, [r1, #0]
 80053ce:	7812      	ldrb	r2, [r2, #0]
 80053d0:	1e10      	subs	r0, r2, #0
 80053d2:	bf18      	it	ne
 80053d4:	2001      	movne	r0, #1
 80053d6:	b002      	add	sp, #8
 80053d8:	4770      	bx	lr
 80053da:	4610      	mov	r0, r2
 80053dc:	e7fb      	b.n	80053d6 <__ascii_mbtowc+0x16>
 80053de:	f06f 0001 	mvn.w	r0, #1
 80053e2:	e7f8      	b.n	80053d6 <__ascii_mbtowc+0x16>

080053e4 <memcpy>:
 80053e4:	440a      	add	r2, r1
 80053e6:	4291      	cmp	r1, r2
 80053e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80053ec:	d100      	bne.n	80053f0 <memcpy+0xc>
 80053ee:	4770      	bx	lr
 80053f0:	b510      	push	{r4, lr}
 80053f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053f6:	4291      	cmp	r1, r2
 80053f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053fc:	d1f9      	bne.n	80053f2 <memcpy+0xe>
 80053fe:	bd10      	pop	{r4, pc}

08005400 <_Balloc>:
 8005400:	b570      	push	{r4, r5, r6, lr}
 8005402:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005404:	4604      	mov	r4, r0
 8005406:	460d      	mov	r5, r1
 8005408:	b976      	cbnz	r6, 8005428 <_Balloc+0x28>
 800540a:	2010      	movs	r0, #16
 800540c:	f000 fdc0 	bl	8005f90 <malloc>
 8005410:	4602      	mov	r2, r0
 8005412:	6260      	str	r0, [r4, #36]	; 0x24
 8005414:	b920      	cbnz	r0, 8005420 <_Balloc+0x20>
 8005416:	2166      	movs	r1, #102	; 0x66
 8005418:	4b17      	ldr	r3, [pc, #92]	; (8005478 <_Balloc+0x78>)
 800541a:	4818      	ldr	r0, [pc, #96]	; (800547c <_Balloc+0x7c>)
 800541c:	f000 fd88 	bl	8005f30 <__assert_func>
 8005420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005424:	6006      	str	r6, [r0, #0]
 8005426:	60c6      	str	r6, [r0, #12]
 8005428:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800542a:	68f3      	ldr	r3, [r6, #12]
 800542c:	b183      	cbz	r3, 8005450 <_Balloc+0x50>
 800542e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005436:	b9b8      	cbnz	r0, 8005468 <_Balloc+0x68>
 8005438:	2101      	movs	r1, #1
 800543a:	fa01 f605 	lsl.w	r6, r1, r5
 800543e:	1d72      	adds	r2, r6, #5
 8005440:	4620      	mov	r0, r4
 8005442:	0092      	lsls	r2, r2, #2
 8005444:	f000 fc94 	bl	8005d70 <_calloc_r>
 8005448:	b160      	cbz	r0, 8005464 <_Balloc+0x64>
 800544a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800544e:	e00e      	b.n	800546e <_Balloc+0x6e>
 8005450:	2221      	movs	r2, #33	; 0x21
 8005452:	2104      	movs	r1, #4
 8005454:	4620      	mov	r0, r4
 8005456:	f000 fc8b 	bl	8005d70 <_calloc_r>
 800545a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800545c:	60f0      	str	r0, [r6, #12]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1e4      	bne.n	800542e <_Balloc+0x2e>
 8005464:	2000      	movs	r0, #0
 8005466:	bd70      	pop	{r4, r5, r6, pc}
 8005468:	6802      	ldr	r2, [r0, #0]
 800546a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800546e:	2300      	movs	r3, #0
 8005470:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005474:	e7f7      	b.n	8005466 <_Balloc+0x66>
 8005476:	bf00      	nop
 8005478:	08007014 	.word	0x08007014
 800547c:	0800702b 	.word	0x0800702b

08005480 <_Bfree>:
 8005480:	b570      	push	{r4, r5, r6, lr}
 8005482:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005484:	4605      	mov	r5, r0
 8005486:	460c      	mov	r4, r1
 8005488:	b976      	cbnz	r6, 80054a8 <_Bfree+0x28>
 800548a:	2010      	movs	r0, #16
 800548c:	f000 fd80 	bl	8005f90 <malloc>
 8005490:	4602      	mov	r2, r0
 8005492:	6268      	str	r0, [r5, #36]	; 0x24
 8005494:	b920      	cbnz	r0, 80054a0 <_Bfree+0x20>
 8005496:	218a      	movs	r1, #138	; 0x8a
 8005498:	4b08      	ldr	r3, [pc, #32]	; (80054bc <_Bfree+0x3c>)
 800549a:	4809      	ldr	r0, [pc, #36]	; (80054c0 <_Bfree+0x40>)
 800549c:	f000 fd48 	bl	8005f30 <__assert_func>
 80054a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054a4:	6006      	str	r6, [r0, #0]
 80054a6:	60c6      	str	r6, [r0, #12]
 80054a8:	b13c      	cbz	r4, 80054ba <_Bfree+0x3a>
 80054aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80054ac:	6862      	ldr	r2, [r4, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80054b4:	6021      	str	r1, [r4, #0]
 80054b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80054ba:	bd70      	pop	{r4, r5, r6, pc}
 80054bc:	08007014 	.word	0x08007014
 80054c0:	0800702b 	.word	0x0800702b

080054c4 <__multadd>:
 80054c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054c8:	4607      	mov	r7, r0
 80054ca:	460c      	mov	r4, r1
 80054cc:	461e      	mov	r6, r3
 80054ce:	2000      	movs	r0, #0
 80054d0:	690d      	ldr	r5, [r1, #16]
 80054d2:	f101 0c14 	add.w	ip, r1, #20
 80054d6:	f8dc 3000 	ldr.w	r3, [ip]
 80054da:	3001      	adds	r0, #1
 80054dc:	b299      	uxth	r1, r3
 80054de:	fb02 6101 	mla	r1, r2, r1, r6
 80054e2:	0c1e      	lsrs	r6, r3, #16
 80054e4:	0c0b      	lsrs	r3, r1, #16
 80054e6:	fb02 3306 	mla	r3, r2, r6, r3
 80054ea:	b289      	uxth	r1, r1
 80054ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80054f0:	4285      	cmp	r5, r0
 80054f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80054f6:	f84c 1b04 	str.w	r1, [ip], #4
 80054fa:	dcec      	bgt.n	80054d6 <__multadd+0x12>
 80054fc:	b30e      	cbz	r6, 8005542 <__multadd+0x7e>
 80054fe:	68a3      	ldr	r3, [r4, #8]
 8005500:	42ab      	cmp	r3, r5
 8005502:	dc19      	bgt.n	8005538 <__multadd+0x74>
 8005504:	6861      	ldr	r1, [r4, #4]
 8005506:	4638      	mov	r0, r7
 8005508:	3101      	adds	r1, #1
 800550a:	f7ff ff79 	bl	8005400 <_Balloc>
 800550e:	4680      	mov	r8, r0
 8005510:	b928      	cbnz	r0, 800551e <__multadd+0x5a>
 8005512:	4602      	mov	r2, r0
 8005514:	21b5      	movs	r1, #181	; 0xb5
 8005516:	4b0c      	ldr	r3, [pc, #48]	; (8005548 <__multadd+0x84>)
 8005518:	480c      	ldr	r0, [pc, #48]	; (800554c <__multadd+0x88>)
 800551a:	f000 fd09 	bl	8005f30 <__assert_func>
 800551e:	6922      	ldr	r2, [r4, #16]
 8005520:	f104 010c 	add.w	r1, r4, #12
 8005524:	3202      	adds	r2, #2
 8005526:	0092      	lsls	r2, r2, #2
 8005528:	300c      	adds	r0, #12
 800552a:	f7ff ff5b 	bl	80053e4 <memcpy>
 800552e:	4621      	mov	r1, r4
 8005530:	4638      	mov	r0, r7
 8005532:	f7ff ffa5 	bl	8005480 <_Bfree>
 8005536:	4644      	mov	r4, r8
 8005538:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800553c:	3501      	adds	r5, #1
 800553e:	615e      	str	r6, [r3, #20]
 8005540:	6125      	str	r5, [r4, #16]
 8005542:	4620      	mov	r0, r4
 8005544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005548:	08006f89 	.word	0x08006f89
 800554c:	0800702b 	.word	0x0800702b

08005550 <__s2b>:
 8005550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005554:	4615      	mov	r5, r2
 8005556:	2209      	movs	r2, #9
 8005558:	461f      	mov	r7, r3
 800555a:	3308      	adds	r3, #8
 800555c:	460c      	mov	r4, r1
 800555e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005562:	4606      	mov	r6, r0
 8005564:	2201      	movs	r2, #1
 8005566:	2100      	movs	r1, #0
 8005568:	429a      	cmp	r2, r3
 800556a:	db09      	blt.n	8005580 <__s2b+0x30>
 800556c:	4630      	mov	r0, r6
 800556e:	f7ff ff47 	bl	8005400 <_Balloc>
 8005572:	b940      	cbnz	r0, 8005586 <__s2b+0x36>
 8005574:	4602      	mov	r2, r0
 8005576:	21ce      	movs	r1, #206	; 0xce
 8005578:	4b18      	ldr	r3, [pc, #96]	; (80055dc <__s2b+0x8c>)
 800557a:	4819      	ldr	r0, [pc, #100]	; (80055e0 <__s2b+0x90>)
 800557c:	f000 fcd8 	bl	8005f30 <__assert_func>
 8005580:	0052      	lsls	r2, r2, #1
 8005582:	3101      	adds	r1, #1
 8005584:	e7f0      	b.n	8005568 <__s2b+0x18>
 8005586:	9b08      	ldr	r3, [sp, #32]
 8005588:	2d09      	cmp	r5, #9
 800558a:	6143      	str	r3, [r0, #20]
 800558c:	f04f 0301 	mov.w	r3, #1
 8005590:	6103      	str	r3, [r0, #16]
 8005592:	dd16      	ble.n	80055c2 <__s2b+0x72>
 8005594:	f104 0909 	add.w	r9, r4, #9
 8005598:	46c8      	mov	r8, r9
 800559a:	442c      	add	r4, r5
 800559c:	f818 3b01 	ldrb.w	r3, [r8], #1
 80055a0:	4601      	mov	r1, r0
 80055a2:	220a      	movs	r2, #10
 80055a4:	4630      	mov	r0, r6
 80055a6:	3b30      	subs	r3, #48	; 0x30
 80055a8:	f7ff ff8c 	bl	80054c4 <__multadd>
 80055ac:	45a0      	cmp	r8, r4
 80055ae:	d1f5      	bne.n	800559c <__s2b+0x4c>
 80055b0:	f1a5 0408 	sub.w	r4, r5, #8
 80055b4:	444c      	add	r4, r9
 80055b6:	1b2d      	subs	r5, r5, r4
 80055b8:	1963      	adds	r3, r4, r5
 80055ba:	42bb      	cmp	r3, r7
 80055bc:	db04      	blt.n	80055c8 <__s2b+0x78>
 80055be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055c2:	2509      	movs	r5, #9
 80055c4:	340a      	adds	r4, #10
 80055c6:	e7f6      	b.n	80055b6 <__s2b+0x66>
 80055c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80055cc:	4601      	mov	r1, r0
 80055ce:	220a      	movs	r2, #10
 80055d0:	4630      	mov	r0, r6
 80055d2:	3b30      	subs	r3, #48	; 0x30
 80055d4:	f7ff ff76 	bl	80054c4 <__multadd>
 80055d8:	e7ee      	b.n	80055b8 <__s2b+0x68>
 80055da:	bf00      	nop
 80055dc:	08006f89 	.word	0x08006f89
 80055e0:	0800702b 	.word	0x0800702b

080055e4 <__hi0bits>:
 80055e4:	0c02      	lsrs	r2, r0, #16
 80055e6:	0412      	lsls	r2, r2, #16
 80055e8:	4603      	mov	r3, r0
 80055ea:	b9ca      	cbnz	r2, 8005620 <__hi0bits+0x3c>
 80055ec:	0403      	lsls	r3, r0, #16
 80055ee:	2010      	movs	r0, #16
 80055f0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80055f4:	bf04      	itt	eq
 80055f6:	021b      	lsleq	r3, r3, #8
 80055f8:	3008      	addeq	r0, #8
 80055fa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80055fe:	bf04      	itt	eq
 8005600:	011b      	lsleq	r3, r3, #4
 8005602:	3004      	addeq	r0, #4
 8005604:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005608:	bf04      	itt	eq
 800560a:	009b      	lsleq	r3, r3, #2
 800560c:	3002      	addeq	r0, #2
 800560e:	2b00      	cmp	r3, #0
 8005610:	db05      	blt.n	800561e <__hi0bits+0x3a>
 8005612:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005616:	f100 0001 	add.w	r0, r0, #1
 800561a:	bf08      	it	eq
 800561c:	2020      	moveq	r0, #32
 800561e:	4770      	bx	lr
 8005620:	2000      	movs	r0, #0
 8005622:	e7e5      	b.n	80055f0 <__hi0bits+0xc>

08005624 <__lo0bits>:
 8005624:	6803      	ldr	r3, [r0, #0]
 8005626:	4602      	mov	r2, r0
 8005628:	f013 0007 	ands.w	r0, r3, #7
 800562c:	d00b      	beq.n	8005646 <__lo0bits+0x22>
 800562e:	07d9      	lsls	r1, r3, #31
 8005630:	d421      	bmi.n	8005676 <__lo0bits+0x52>
 8005632:	0798      	lsls	r0, r3, #30
 8005634:	bf49      	itett	mi
 8005636:	085b      	lsrmi	r3, r3, #1
 8005638:	089b      	lsrpl	r3, r3, #2
 800563a:	2001      	movmi	r0, #1
 800563c:	6013      	strmi	r3, [r2, #0]
 800563e:	bf5c      	itt	pl
 8005640:	2002      	movpl	r0, #2
 8005642:	6013      	strpl	r3, [r2, #0]
 8005644:	4770      	bx	lr
 8005646:	b299      	uxth	r1, r3
 8005648:	b909      	cbnz	r1, 800564e <__lo0bits+0x2a>
 800564a:	2010      	movs	r0, #16
 800564c:	0c1b      	lsrs	r3, r3, #16
 800564e:	b2d9      	uxtb	r1, r3
 8005650:	b909      	cbnz	r1, 8005656 <__lo0bits+0x32>
 8005652:	3008      	adds	r0, #8
 8005654:	0a1b      	lsrs	r3, r3, #8
 8005656:	0719      	lsls	r1, r3, #28
 8005658:	bf04      	itt	eq
 800565a:	091b      	lsreq	r3, r3, #4
 800565c:	3004      	addeq	r0, #4
 800565e:	0799      	lsls	r1, r3, #30
 8005660:	bf04      	itt	eq
 8005662:	089b      	lsreq	r3, r3, #2
 8005664:	3002      	addeq	r0, #2
 8005666:	07d9      	lsls	r1, r3, #31
 8005668:	d403      	bmi.n	8005672 <__lo0bits+0x4e>
 800566a:	085b      	lsrs	r3, r3, #1
 800566c:	f100 0001 	add.w	r0, r0, #1
 8005670:	d003      	beq.n	800567a <__lo0bits+0x56>
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	4770      	bx	lr
 8005676:	2000      	movs	r0, #0
 8005678:	4770      	bx	lr
 800567a:	2020      	movs	r0, #32
 800567c:	4770      	bx	lr
	...

08005680 <__i2b>:
 8005680:	b510      	push	{r4, lr}
 8005682:	460c      	mov	r4, r1
 8005684:	2101      	movs	r1, #1
 8005686:	f7ff febb 	bl	8005400 <_Balloc>
 800568a:	4602      	mov	r2, r0
 800568c:	b928      	cbnz	r0, 800569a <__i2b+0x1a>
 800568e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005692:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <__i2b+0x24>)
 8005694:	4804      	ldr	r0, [pc, #16]	; (80056a8 <__i2b+0x28>)
 8005696:	f000 fc4b 	bl	8005f30 <__assert_func>
 800569a:	2301      	movs	r3, #1
 800569c:	6144      	str	r4, [r0, #20]
 800569e:	6103      	str	r3, [r0, #16]
 80056a0:	bd10      	pop	{r4, pc}
 80056a2:	bf00      	nop
 80056a4:	08006f89 	.word	0x08006f89
 80056a8:	0800702b 	.word	0x0800702b

080056ac <__multiply>:
 80056ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b0:	4691      	mov	r9, r2
 80056b2:	690a      	ldr	r2, [r1, #16]
 80056b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80056b8:	460c      	mov	r4, r1
 80056ba:	429a      	cmp	r2, r3
 80056bc:	bfbe      	ittt	lt
 80056be:	460b      	movlt	r3, r1
 80056c0:	464c      	movlt	r4, r9
 80056c2:	4699      	movlt	r9, r3
 80056c4:	6927      	ldr	r7, [r4, #16]
 80056c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80056ca:	68a3      	ldr	r3, [r4, #8]
 80056cc:	6861      	ldr	r1, [r4, #4]
 80056ce:	eb07 060a 	add.w	r6, r7, sl
 80056d2:	42b3      	cmp	r3, r6
 80056d4:	b085      	sub	sp, #20
 80056d6:	bfb8      	it	lt
 80056d8:	3101      	addlt	r1, #1
 80056da:	f7ff fe91 	bl	8005400 <_Balloc>
 80056de:	b930      	cbnz	r0, 80056ee <__multiply+0x42>
 80056e0:	4602      	mov	r2, r0
 80056e2:	f240 115d 	movw	r1, #349	; 0x15d
 80056e6:	4b43      	ldr	r3, [pc, #268]	; (80057f4 <__multiply+0x148>)
 80056e8:	4843      	ldr	r0, [pc, #268]	; (80057f8 <__multiply+0x14c>)
 80056ea:	f000 fc21 	bl	8005f30 <__assert_func>
 80056ee:	f100 0514 	add.w	r5, r0, #20
 80056f2:	462b      	mov	r3, r5
 80056f4:	2200      	movs	r2, #0
 80056f6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80056fa:	4543      	cmp	r3, r8
 80056fc:	d321      	bcc.n	8005742 <__multiply+0x96>
 80056fe:	f104 0314 	add.w	r3, r4, #20
 8005702:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005706:	f109 0314 	add.w	r3, r9, #20
 800570a:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800570e:	9202      	str	r2, [sp, #8]
 8005710:	1b3a      	subs	r2, r7, r4
 8005712:	3a15      	subs	r2, #21
 8005714:	f022 0203 	bic.w	r2, r2, #3
 8005718:	3204      	adds	r2, #4
 800571a:	f104 0115 	add.w	r1, r4, #21
 800571e:	428f      	cmp	r7, r1
 8005720:	bf38      	it	cc
 8005722:	2204      	movcc	r2, #4
 8005724:	9201      	str	r2, [sp, #4]
 8005726:	9a02      	ldr	r2, [sp, #8]
 8005728:	9303      	str	r3, [sp, #12]
 800572a:	429a      	cmp	r2, r3
 800572c:	d80c      	bhi.n	8005748 <__multiply+0x9c>
 800572e:	2e00      	cmp	r6, #0
 8005730:	dd03      	ble.n	800573a <__multiply+0x8e>
 8005732:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005736:	2b00      	cmp	r3, #0
 8005738:	d059      	beq.n	80057ee <__multiply+0x142>
 800573a:	6106      	str	r6, [r0, #16]
 800573c:	b005      	add	sp, #20
 800573e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005742:	f843 2b04 	str.w	r2, [r3], #4
 8005746:	e7d8      	b.n	80056fa <__multiply+0x4e>
 8005748:	f8b3 a000 	ldrh.w	sl, [r3]
 800574c:	f1ba 0f00 	cmp.w	sl, #0
 8005750:	d023      	beq.n	800579a <__multiply+0xee>
 8005752:	46a9      	mov	r9, r5
 8005754:	f04f 0c00 	mov.w	ip, #0
 8005758:	f104 0e14 	add.w	lr, r4, #20
 800575c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005760:	f8d9 1000 	ldr.w	r1, [r9]
 8005764:	fa1f fb82 	uxth.w	fp, r2
 8005768:	b289      	uxth	r1, r1
 800576a:	fb0a 110b 	mla	r1, sl, fp, r1
 800576e:	4461      	add	r1, ip
 8005770:	f8d9 c000 	ldr.w	ip, [r9]
 8005774:	0c12      	lsrs	r2, r2, #16
 8005776:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800577a:	fb0a c202 	mla	r2, sl, r2, ip
 800577e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005782:	b289      	uxth	r1, r1
 8005784:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005788:	4577      	cmp	r7, lr
 800578a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800578e:	f849 1b04 	str.w	r1, [r9], #4
 8005792:	d8e3      	bhi.n	800575c <__multiply+0xb0>
 8005794:	9a01      	ldr	r2, [sp, #4]
 8005796:	f845 c002 	str.w	ip, [r5, r2]
 800579a:	9a03      	ldr	r2, [sp, #12]
 800579c:	3304      	adds	r3, #4
 800579e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80057a2:	f1b9 0f00 	cmp.w	r9, #0
 80057a6:	d020      	beq.n	80057ea <__multiply+0x13e>
 80057a8:	46ae      	mov	lr, r5
 80057aa:	f04f 0a00 	mov.w	sl, #0
 80057ae:	6829      	ldr	r1, [r5, #0]
 80057b0:	f104 0c14 	add.w	ip, r4, #20
 80057b4:	f8bc b000 	ldrh.w	fp, [ip]
 80057b8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80057bc:	b289      	uxth	r1, r1
 80057be:	fb09 220b 	mla	r2, r9, fp, r2
 80057c2:	4492      	add	sl, r2
 80057c4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80057c8:	f84e 1b04 	str.w	r1, [lr], #4
 80057cc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80057d0:	f8be 1000 	ldrh.w	r1, [lr]
 80057d4:	0c12      	lsrs	r2, r2, #16
 80057d6:	fb09 1102 	mla	r1, r9, r2, r1
 80057da:	4567      	cmp	r7, ip
 80057dc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80057e0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80057e4:	d8e6      	bhi.n	80057b4 <__multiply+0x108>
 80057e6:	9a01      	ldr	r2, [sp, #4]
 80057e8:	50a9      	str	r1, [r5, r2]
 80057ea:	3504      	adds	r5, #4
 80057ec:	e79b      	b.n	8005726 <__multiply+0x7a>
 80057ee:	3e01      	subs	r6, #1
 80057f0:	e79d      	b.n	800572e <__multiply+0x82>
 80057f2:	bf00      	nop
 80057f4:	08006f89 	.word	0x08006f89
 80057f8:	0800702b 	.word	0x0800702b

080057fc <__pow5mult>:
 80057fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005800:	4615      	mov	r5, r2
 8005802:	f012 0203 	ands.w	r2, r2, #3
 8005806:	4606      	mov	r6, r0
 8005808:	460f      	mov	r7, r1
 800580a:	d007      	beq.n	800581c <__pow5mult+0x20>
 800580c:	4c25      	ldr	r4, [pc, #148]	; (80058a4 <__pow5mult+0xa8>)
 800580e:	3a01      	subs	r2, #1
 8005810:	2300      	movs	r3, #0
 8005812:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005816:	f7ff fe55 	bl	80054c4 <__multadd>
 800581a:	4607      	mov	r7, r0
 800581c:	10ad      	asrs	r5, r5, #2
 800581e:	d03d      	beq.n	800589c <__pow5mult+0xa0>
 8005820:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005822:	b97c      	cbnz	r4, 8005844 <__pow5mult+0x48>
 8005824:	2010      	movs	r0, #16
 8005826:	f000 fbb3 	bl	8005f90 <malloc>
 800582a:	4602      	mov	r2, r0
 800582c:	6270      	str	r0, [r6, #36]	; 0x24
 800582e:	b928      	cbnz	r0, 800583c <__pow5mult+0x40>
 8005830:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005834:	4b1c      	ldr	r3, [pc, #112]	; (80058a8 <__pow5mult+0xac>)
 8005836:	481d      	ldr	r0, [pc, #116]	; (80058ac <__pow5mult+0xb0>)
 8005838:	f000 fb7a 	bl	8005f30 <__assert_func>
 800583c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005840:	6004      	str	r4, [r0, #0]
 8005842:	60c4      	str	r4, [r0, #12]
 8005844:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005848:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800584c:	b94c      	cbnz	r4, 8005862 <__pow5mult+0x66>
 800584e:	f240 2171 	movw	r1, #625	; 0x271
 8005852:	4630      	mov	r0, r6
 8005854:	f7ff ff14 	bl	8005680 <__i2b>
 8005858:	2300      	movs	r3, #0
 800585a:	4604      	mov	r4, r0
 800585c:	f8c8 0008 	str.w	r0, [r8, #8]
 8005860:	6003      	str	r3, [r0, #0]
 8005862:	f04f 0900 	mov.w	r9, #0
 8005866:	07eb      	lsls	r3, r5, #31
 8005868:	d50a      	bpl.n	8005880 <__pow5mult+0x84>
 800586a:	4639      	mov	r1, r7
 800586c:	4622      	mov	r2, r4
 800586e:	4630      	mov	r0, r6
 8005870:	f7ff ff1c 	bl	80056ac <__multiply>
 8005874:	4680      	mov	r8, r0
 8005876:	4639      	mov	r1, r7
 8005878:	4630      	mov	r0, r6
 800587a:	f7ff fe01 	bl	8005480 <_Bfree>
 800587e:	4647      	mov	r7, r8
 8005880:	106d      	asrs	r5, r5, #1
 8005882:	d00b      	beq.n	800589c <__pow5mult+0xa0>
 8005884:	6820      	ldr	r0, [r4, #0]
 8005886:	b938      	cbnz	r0, 8005898 <__pow5mult+0x9c>
 8005888:	4622      	mov	r2, r4
 800588a:	4621      	mov	r1, r4
 800588c:	4630      	mov	r0, r6
 800588e:	f7ff ff0d 	bl	80056ac <__multiply>
 8005892:	6020      	str	r0, [r4, #0]
 8005894:	f8c0 9000 	str.w	r9, [r0]
 8005898:	4604      	mov	r4, r0
 800589a:	e7e4      	b.n	8005866 <__pow5mult+0x6a>
 800589c:	4638      	mov	r0, r7
 800589e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058a2:	bf00      	nop
 80058a4:	08007178 	.word	0x08007178
 80058a8:	08007014 	.word	0x08007014
 80058ac:	0800702b 	.word	0x0800702b

080058b0 <__lshift>:
 80058b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058b4:	460c      	mov	r4, r1
 80058b6:	4607      	mov	r7, r0
 80058b8:	4691      	mov	r9, r2
 80058ba:	6923      	ldr	r3, [r4, #16]
 80058bc:	6849      	ldr	r1, [r1, #4]
 80058be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80058c2:	68a3      	ldr	r3, [r4, #8]
 80058c4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80058c8:	f108 0601 	add.w	r6, r8, #1
 80058cc:	42b3      	cmp	r3, r6
 80058ce:	db0b      	blt.n	80058e8 <__lshift+0x38>
 80058d0:	4638      	mov	r0, r7
 80058d2:	f7ff fd95 	bl	8005400 <_Balloc>
 80058d6:	4605      	mov	r5, r0
 80058d8:	b948      	cbnz	r0, 80058ee <__lshift+0x3e>
 80058da:	4602      	mov	r2, r0
 80058dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80058e0:	4b29      	ldr	r3, [pc, #164]	; (8005988 <__lshift+0xd8>)
 80058e2:	482a      	ldr	r0, [pc, #168]	; (800598c <__lshift+0xdc>)
 80058e4:	f000 fb24 	bl	8005f30 <__assert_func>
 80058e8:	3101      	adds	r1, #1
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	e7ee      	b.n	80058cc <__lshift+0x1c>
 80058ee:	2300      	movs	r3, #0
 80058f0:	f100 0114 	add.w	r1, r0, #20
 80058f4:	f100 0210 	add.w	r2, r0, #16
 80058f8:	4618      	mov	r0, r3
 80058fa:	4553      	cmp	r3, sl
 80058fc:	db37      	blt.n	800596e <__lshift+0xbe>
 80058fe:	6920      	ldr	r0, [r4, #16]
 8005900:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005904:	f104 0314 	add.w	r3, r4, #20
 8005908:	f019 091f 	ands.w	r9, r9, #31
 800590c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005910:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005914:	d02f      	beq.n	8005976 <__lshift+0xc6>
 8005916:	468a      	mov	sl, r1
 8005918:	f04f 0c00 	mov.w	ip, #0
 800591c:	f1c9 0e20 	rsb	lr, r9, #32
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	fa02 f209 	lsl.w	r2, r2, r9
 8005926:	ea42 020c 	orr.w	r2, r2, ip
 800592a:	f84a 2b04 	str.w	r2, [sl], #4
 800592e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005932:	4298      	cmp	r0, r3
 8005934:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005938:	d8f2      	bhi.n	8005920 <__lshift+0x70>
 800593a:	1b03      	subs	r3, r0, r4
 800593c:	3b15      	subs	r3, #21
 800593e:	f023 0303 	bic.w	r3, r3, #3
 8005942:	3304      	adds	r3, #4
 8005944:	f104 0215 	add.w	r2, r4, #21
 8005948:	4290      	cmp	r0, r2
 800594a:	bf38      	it	cc
 800594c:	2304      	movcc	r3, #4
 800594e:	f841 c003 	str.w	ip, [r1, r3]
 8005952:	f1bc 0f00 	cmp.w	ip, #0
 8005956:	d001      	beq.n	800595c <__lshift+0xac>
 8005958:	f108 0602 	add.w	r6, r8, #2
 800595c:	3e01      	subs	r6, #1
 800595e:	4638      	mov	r0, r7
 8005960:	4621      	mov	r1, r4
 8005962:	612e      	str	r6, [r5, #16]
 8005964:	f7ff fd8c 	bl	8005480 <_Bfree>
 8005968:	4628      	mov	r0, r5
 800596a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800596e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005972:	3301      	adds	r3, #1
 8005974:	e7c1      	b.n	80058fa <__lshift+0x4a>
 8005976:	3904      	subs	r1, #4
 8005978:	f853 2b04 	ldr.w	r2, [r3], #4
 800597c:	4298      	cmp	r0, r3
 800597e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005982:	d8f9      	bhi.n	8005978 <__lshift+0xc8>
 8005984:	e7ea      	b.n	800595c <__lshift+0xac>
 8005986:	bf00      	nop
 8005988:	08006f89 	.word	0x08006f89
 800598c:	0800702b 	.word	0x0800702b

08005990 <__mcmp>:
 8005990:	4603      	mov	r3, r0
 8005992:	690a      	ldr	r2, [r1, #16]
 8005994:	6900      	ldr	r0, [r0, #16]
 8005996:	b530      	push	{r4, r5, lr}
 8005998:	1a80      	subs	r0, r0, r2
 800599a:	d10d      	bne.n	80059b8 <__mcmp+0x28>
 800599c:	3314      	adds	r3, #20
 800599e:	3114      	adds	r1, #20
 80059a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80059a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80059a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80059ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80059b0:	4295      	cmp	r5, r2
 80059b2:	d002      	beq.n	80059ba <__mcmp+0x2a>
 80059b4:	d304      	bcc.n	80059c0 <__mcmp+0x30>
 80059b6:	2001      	movs	r0, #1
 80059b8:	bd30      	pop	{r4, r5, pc}
 80059ba:	42a3      	cmp	r3, r4
 80059bc:	d3f4      	bcc.n	80059a8 <__mcmp+0x18>
 80059be:	e7fb      	b.n	80059b8 <__mcmp+0x28>
 80059c0:	f04f 30ff 	mov.w	r0, #4294967295
 80059c4:	e7f8      	b.n	80059b8 <__mcmp+0x28>
	...

080059c8 <__mdiff>:
 80059c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059cc:	460d      	mov	r5, r1
 80059ce:	4607      	mov	r7, r0
 80059d0:	4611      	mov	r1, r2
 80059d2:	4628      	mov	r0, r5
 80059d4:	4614      	mov	r4, r2
 80059d6:	f7ff ffdb 	bl	8005990 <__mcmp>
 80059da:	1e06      	subs	r6, r0, #0
 80059dc:	d111      	bne.n	8005a02 <__mdiff+0x3a>
 80059de:	4631      	mov	r1, r6
 80059e0:	4638      	mov	r0, r7
 80059e2:	f7ff fd0d 	bl	8005400 <_Balloc>
 80059e6:	4602      	mov	r2, r0
 80059e8:	b928      	cbnz	r0, 80059f6 <__mdiff+0x2e>
 80059ea:	f240 2132 	movw	r1, #562	; 0x232
 80059ee:	4b3a      	ldr	r3, [pc, #232]	; (8005ad8 <__mdiff+0x110>)
 80059f0:	483a      	ldr	r0, [pc, #232]	; (8005adc <__mdiff+0x114>)
 80059f2:	f000 fa9d 	bl	8005f30 <__assert_func>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80059fc:	4610      	mov	r0, r2
 80059fe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a02:	bfa4      	itt	ge
 8005a04:	4623      	movge	r3, r4
 8005a06:	462c      	movge	r4, r5
 8005a08:	4638      	mov	r0, r7
 8005a0a:	6861      	ldr	r1, [r4, #4]
 8005a0c:	bfa6      	itte	ge
 8005a0e:	461d      	movge	r5, r3
 8005a10:	2600      	movge	r6, #0
 8005a12:	2601      	movlt	r6, #1
 8005a14:	f7ff fcf4 	bl	8005400 <_Balloc>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	b918      	cbnz	r0, 8005a24 <__mdiff+0x5c>
 8005a1c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005a20:	4b2d      	ldr	r3, [pc, #180]	; (8005ad8 <__mdiff+0x110>)
 8005a22:	e7e5      	b.n	80059f0 <__mdiff+0x28>
 8005a24:	f102 0814 	add.w	r8, r2, #20
 8005a28:	46c2      	mov	sl, r8
 8005a2a:	f04f 0c00 	mov.w	ip, #0
 8005a2e:	6927      	ldr	r7, [r4, #16]
 8005a30:	60c6      	str	r6, [r0, #12]
 8005a32:	692e      	ldr	r6, [r5, #16]
 8005a34:	f104 0014 	add.w	r0, r4, #20
 8005a38:	f105 0914 	add.w	r9, r5, #20
 8005a3c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005a40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005a44:	3410      	adds	r4, #16
 8005a46:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005a4a:	f859 3b04 	ldr.w	r3, [r9], #4
 8005a4e:	fa1f f18b 	uxth.w	r1, fp
 8005a52:	448c      	add	ip, r1
 8005a54:	b299      	uxth	r1, r3
 8005a56:	0c1b      	lsrs	r3, r3, #16
 8005a58:	ebac 0101 	sub.w	r1, ip, r1
 8005a5c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005a60:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005a64:	b289      	uxth	r1, r1
 8005a66:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005a6a:	454e      	cmp	r6, r9
 8005a6c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005a70:	f84a 3b04 	str.w	r3, [sl], #4
 8005a74:	d8e7      	bhi.n	8005a46 <__mdiff+0x7e>
 8005a76:	1b73      	subs	r3, r6, r5
 8005a78:	3b15      	subs	r3, #21
 8005a7a:	f023 0303 	bic.w	r3, r3, #3
 8005a7e:	3515      	adds	r5, #21
 8005a80:	3304      	adds	r3, #4
 8005a82:	42ae      	cmp	r6, r5
 8005a84:	bf38      	it	cc
 8005a86:	2304      	movcc	r3, #4
 8005a88:	4418      	add	r0, r3
 8005a8a:	4443      	add	r3, r8
 8005a8c:	461e      	mov	r6, r3
 8005a8e:	4605      	mov	r5, r0
 8005a90:	4575      	cmp	r5, lr
 8005a92:	d30e      	bcc.n	8005ab2 <__mdiff+0xea>
 8005a94:	f10e 0103 	add.w	r1, lr, #3
 8005a98:	1a09      	subs	r1, r1, r0
 8005a9a:	f021 0103 	bic.w	r1, r1, #3
 8005a9e:	3803      	subs	r0, #3
 8005aa0:	4586      	cmp	lr, r0
 8005aa2:	bf38      	it	cc
 8005aa4:	2100      	movcc	r1, #0
 8005aa6:	4419      	add	r1, r3
 8005aa8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005aac:	b18b      	cbz	r3, 8005ad2 <__mdiff+0x10a>
 8005aae:	6117      	str	r7, [r2, #16]
 8005ab0:	e7a4      	b.n	80059fc <__mdiff+0x34>
 8005ab2:	f855 8b04 	ldr.w	r8, [r5], #4
 8005ab6:	fa1f f188 	uxth.w	r1, r8
 8005aba:	4461      	add	r1, ip
 8005abc:	140c      	asrs	r4, r1, #16
 8005abe:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005ac2:	b289      	uxth	r1, r1
 8005ac4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005ac8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005acc:	f846 1b04 	str.w	r1, [r6], #4
 8005ad0:	e7de      	b.n	8005a90 <__mdiff+0xc8>
 8005ad2:	3f01      	subs	r7, #1
 8005ad4:	e7e8      	b.n	8005aa8 <__mdiff+0xe0>
 8005ad6:	bf00      	nop
 8005ad8:	08006f89 	.word	0x08006f89
 8005adc:	0800702b 	.word	0x0800702b

08005ae0 <__ulp>:
 8005ae0:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <__ulp+0x48>)
 8005ae2:	400b      	ands	r3, r1
 8005ae4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	dd02      	ble.n	8005af2 <__ulp+0x12>
 8005aec:	2000      	movs	r0, #0
 8005aee:	4619      	mov	r1, r3
 8005af0:	4770      	bx	lr
 8005af2:	425b      	negs	r3, r3
 8005af4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005af8:	f04f 0000 	mov.w	r0, #0
 8005afc:	f04f 0100 	mov.w	r1, #0
 8005b00:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005b04:	da04      	bge.n	8005b10 <__ulp+0x30>
 8005b06:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005b0a:	fa43 f102 	asr.w	r1, r3, r2
 8005b0e:	4770      	bx	lr
 8005b10:	f1a2 0314 	sub.w	r3, r2, #20
 8005b14:	2b1e      	cmp	r3, #30
 8005b16:	bfd6      	itet	le
 8005b18:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8005b1c:	2301      	movgt	r3, #1
 8005b1e:	fa22 f303 	lsrle.w	r3, r2, r3
 8005b22:	4618      	mov	r0, r3
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	7ff00000 	.word	0x7ff00000

08005b2c <__b2d>:
 8005b2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b30:	6907      	ldr	r7, [r0, #16]
 8005b32:	f100 0914 	add.w	r9, r0, #20
 8005b36:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8005b3a:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8005b3e:	f1a7 0804 	sub.w	r8, r7, #4
 8005b42:	4630      	mov	r0, r6
 8005b44:	f7ff fd4e 	bl	80055e4 <__hi0bits>
 8005b48:	f1c0 0320 	rsb	r3, r0, #32
 8005b4c:	280a      	cmp	r0, #10
 8005b4e:	600b      	str	r3, [r1, #0]
 8005b50:	491f      	ldr	r1, [pc, #124]	; (8005bd0 <__b2d+0xa4>)
 8005b52:	dc17      	bgt.n	8005b84 <__b2d+0x58>
 8005b54:	45c1      	cmp	r9, r8
 8005b56:	bf28      	it	cs
 8005b58:	2200      	movcs	r2, #0
 8005b5a:	f1c0 0c0b 	rsb	ip, r0, #11
 8005b5e:	fa26 f30c 	lsr.w	r3, r6, ip
 8005b62:	bf38      	it	cc
 8005b64:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005b68:	ea43 0501 	orr.w	r5, r3, r1
 8005b6c:	f100 0315 	add.w	r3, r0, #21
 8005b70:	fa06 f303 	lsl.w	r3, r6, r3
 8005b74:	fa22 f20c 	lsr.w	r2, r2, ip
 8005b78:	ea43 0402 	orr.w	r4, r3, r2
 8005b7c:	4620      	mov	r0, r4
 8005b7e:	4629      	mov	r1, r5
 8005b80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b84:	45c1      	cmp	r9, r8
 8005b86:	bf2e      	itee	cs
 8005b88:	2200      	movcs	r2, #0
 8005b8a:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8005b8e:	f1a7 0808 	subcc.w	r8, r7, #8
 8005b92:	f1b0 030b 	subs.w	r3, r0, #11
 8005b96:	d016      	beq.n	8005bc6 <__b2d+0x9a>
 8005b98:	f1c3 0720 	rsb	r7, r3, #32
 8005b9c:	fa22 f107 	lsr.w	r1, r2, r7
 8005ba0:	45c8      	cmp	r8, r9
 8005ba2:	fa06 f603 	lsl.w	r6, r6, r3
 8005ba6:	ea46 0601 	orr.w	r6, r6, r1
 8005baa:	bf94      	ite	ls
 8005bac:	2100      	movls	r1, #0
 8005bae:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8005bb2:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8005bb6:	fa02 f003 	lsl.w	r0, r2, r3
 8005bba:	40f9      	lsrs	r1, r7
 8005bbc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005bc0:	ea40 0401 	orr.w	r4, r0, r1
 8005bc4:	e7da      	b.n	8005b7c <__b2d+0x50>
 8005bc6:	4614      	mov	r4, r2
 8005bc8:	ea46 0501 	orr.w	r5, r6, r1
 8005bcc:	e7d6      	b.n	8005b7c <__b2d+0x50>
 8005bce:	bf00      	nop
 8005bd0:	3ff00000 	.word	0x3ff00000

08005bd4 <__d2b>:
 8005bd4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005bd8:	2101      	movs	r1, #1
 8005bda:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005bde:	4690      	mov	r8, r2
 8005be0:	461d      	mov	r5, r3
 8005be2:	f7ff fc0d 	bl	8005400 <_Balloc>
 8005be6:	4604      	mov	r4, r0
 8005be8:	b930      	cbnz	r0, 8005bf8 <__d2b+0x24>
 8005bea:	4602      	mov	r2, r0
 8005bec:	f240 310a 	movw	r1, #778	; 0x30a
 8005bf0:	4b24      	ldr	r3, [pc, #144]	; (8005c84 <__d2b+0xb0>)
 8005bf2:	4825      	ldr	r0, [pc, #148]	; (8005c88 <__d2b+0xb4>)
 8005bf4:	f000 f99c 	bl	8005f30 <__assert_func>
 8005bf8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005bfc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005c00:	bb2d      	cbnz	r5, 8005c4e <__d2b+0x7a>
 8005c02:	9301      	str	r3, [sp, #4]
 8005c04:	f1b8 0300 	subs.w	r3, r8, #0
 8005c08:	d026      	beq.n	8005c58 <__d2b+0x84>
 8005c0a:	4668      	mov	r0, sp
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	f7ff fd09 	bl	8005624 <__lo0bits>
 8005c12:	9900      	ldr	r1, [sp, #0]
 8005c14:	b1f0      	cbz	r0, 8005c54 <__d2b+0x80>
 8005c16:	9a01      	ldr	r2, [sp, #4]
 8005c18:	f1c0 0320 	rsb	r3, r0, #32
 8005c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c20:	430b      	orrs	r3, r1
 8005c22:	40c2      	lsrs	r2, r0
 8005c24:	6163      	str	r3, [r4, #20]
 8005c26:	9201      	str	r2, [sp, #4]
 8005c28:	9b01      	ldr	r3, [sp, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	bf14      	ite	ne
 8005c2e:	2102      	movne	r1, #2
 8005c30:	2101      	moveq	r1, #1
 8005c32:	61a3      	str	r3, [r4, #24]
 8005c34:	6121      	str	r1, [r4, #16]
 8005c36:	b1c5      	cbz	r5, 8005c6a <__d2b+0x96>
 8005c38:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005c3c:	4405      	add	r5, r0
 8005c3e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005c42:	603d      	str	r5, [r7, #0]
 8005c44:	6030      	str	r0, [r6, #0]
 8005c46:	4620      	mov	r0, r4
 8005c48:	b002      	add	sp, #8
 8005c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c52:	e7d6      	b.n	8005c02 <__d2b+0x2e>
 8005c54:	6161      	str	r1, [r4, #20]
 8005c56:	e7e7      	b.n	8005c28 <__d2b+0x54>
 8005c58:	a801      	add	r0, sp, #4
 8005c5a:	f7ff fce3 	bl	8005624 <__lo0bits>
 8005c5e:	2101      	movs	r1, #1
 8005c60:	9b01      	ldr	r3, [sp, #4]
 8005c62:	6121      	str	r1, [r4, #16]
 8005c64:	6163      	str	r3, [r4, #20]
 8005c66:	3020      	adds	r0, #32
 8005c68:	e7e5      	b.n	8005c36 <__d2b+0x62>
 8005c6a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005c6e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005c72:	6038      	str	r0, [r7, #0]
 8005c74:	6918      	ldr	r0, [r3, #16]
 8005c76:	f7ff fcb5 	bl	80055e4 <__hi0bits>
 8005c7a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005c7e:	6031      	str	r1, [r6, #0]
 8005c80:	e7e1      	b.n	8005c46 <__d2b+0x72>
 8005c82:	bf00      	nop
 8005c84:	08006f89 	.word	0x08006f89
 8005c88:	0800702b 	.word	0x0800702b

08005c8c <__ratio>:
 8005c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c90:	4688      	mov	r8, r1
 8005c92:	4669      	mov	r1, sp
 8005c94:	4681      	mov	r9, r0
 8005c96:	f7ff ff49 	bl	8005b2c <__b2d>
 8005c9a:	460f      	mov	r7, r1
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	460d      	mov	r5, r1
 8005ca0:	4640      	mov	r0, r8
 8005ca2:	a901      	add	r1, sp, #4
 8005ca4:	f7ff ff42 	bl	8005b2c <__b2d>
 8005ca8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005cac:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005cb0:	468b      	mov	fp, r1
 8005cb2:	eba3 0c02 	sub.w	ip, r3, r2
 8005cb6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005cba:	1a9b      	subs	r3, r3, r2
 8005cbc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	bfd5      	itete	le
 8005cc4:	460a      	movle	r2, r1
 8005cc6:	462a      	movgt	r2, r5
 8005cc8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005ccc:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005cd0:	bfd8      	it	le
 8005cd2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8005cd6:	465b      	mov	r3, fp
 8005cd8:	4602      	mov	r2, r0
 8005cda:	4639      	mov	r1, r7
 8005cdc:	4620      	mov	r0, r4
 8005cde:	f7fa fd25 	bl	800072c <__aeabi_ddiv>
 8005ce2:	b003      	add	sp, #12
 8005ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005ce8 <__copybits>:
 8005ce8:	3901      	subs	r1, #1
 8005cea:	b570      	push	{r4, r5, r6, lr}
 8005cec:	1149      	asrs	r1, r1, #5
 8005cee:	6914      	ldr	r4, [r2, #16]
 8005cf0:	3101      	adds	r1, #1
 8005cf2:	f102 0314 	add.w	r3, r2, #20
 8005cf6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005cfa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005cfe:	1f05      	subs	r5, r0, #4
 8005d00:	42a3      	cmp	r3, r4
 8005d02:	d30c      	bcc.n	8005d1e <__copybits+0x36>
 8005d04:	1aa3      	subs	r3, r4, r2
 8005d06:	3b11      	subs	r3, #17
 8005d08:	f023 0303 	bic.w	r3, r3, #3
 8005d0c:	3211      	adds	r2, #17
 8005d0e:	42a2      	cmp	r2, r4
 8005d10:	bf88      	it	hi
 8005d12:	2300      	movhi	r3, #0
 8005d14:	4418      	add	r0, r3
 8005d16:	2300      	movs	r3, #0
 8005d18:	4288      	cmp	r0, r1
 8005d1a:	d305      	bcc.n	8005d28 <__copybits+0x40>
 8005d1c:	bd70      	pop	{r4, r5, r6, pc}
 8005d1e:	f853 6b04 	ldr.w	r6, [r3], #4
 8005d22:	f845 6f04 	str.w	r6, [r5, #4]!
 8005d26:	e7eb      	b.n	8005d00 <__copybits+0x18>
 8005d28:	f840 3b04 	str.w	r3, [r0], #4
 8005d2c:	e7f4      	b.n	8005d18 <__copybits+0x30>

08005d2e <__any_on>:
 8005d2e:	f100 0214 	add.w	r2, r0, #20
 8005d32:	6900      	ldr	r0, [r0, #16]
 8005d34:	114b      	asrs	r3, r1, #5
 8005d36:	4298      	cmp	r0, r3
 8005d38:	b510      	push	{r4, lr}
 8005d3a:	db11      	blt.n	8005d60 <__any_on+0x32>
 8005d3c:	dd0a      	ble.n	8005d54 <__any_on+0x26>
 8005d3e:	f011 011f 	ands.w	r1, r1, #31
 8005d42:	d007      	beq.n	8005d54 <__any_on+0x26>
 8005d44:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005d48:	fa24 f001 	lsr.w	r0, r4, r1
 8005d4c:	fa00 f101 	lsl.w	r1, r0, r1
 8005d50:	428c      	cmp	r4, r1
 8005d52:	d10b      	bne.n	8005d6c <__any_on+0x3e>
 8005d54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d803      	bhi.n	8005d64 <__any_on+0x36>
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	bd10      	pop	{r4, pc}
 8005d60:	4603      	mov	r3, r0
 8005d62:	e7f7      	b.n	8005d54 <__any_on+0x26>
 8005d64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005d68:	2900      	cmp	r1, #0
 8005d6a:	d0f5      	beq.n	8005d58 <__any_on+0x2a>
 8005d6c:	2001      	movs	r0, #1
 8005d6e:	e7f6      	b.n	8005d5e <__any_on+0x30>

08005d70 <_calloc_r>:
 8005d70:	b570      	push	{r4, r5, r6, lr}
 8005d72:	fba1 5402 	umull	r5, r4, r1, r2
 8005d76:	b934      	cbnz	r4, 8005d86 <_calloc_r+0x16>
 8005d78:	4629      	mov	r1, r5
 8005d7a:	f000 f82d 	bl	8005dd8 <_malloc_r>
 8005d7e:	4606      	mov	r6, r0
 8005d80:	b928      	cbnz	r0, 8005d8e <_calloc_r+0x1e>
 8005d82:	4630      	mov	r0, r6
 8005d84:	bd70      	pop	{r4, r5, r6, pc}
 8005d86:	220c      	movs	r2, #12
 8005d88:	2600      	movs	r6, #0
 8005d8a:	6002      	str	r2, [r0, #0]
 8005d8c:	e7f9      	b.n	8005d82 <_calloc_r+0x12>
 8005d8e:	462a      	mov	r2, r5
 8005d90:	4621      	mov	r1, r4
 8005d92:	f7fe f90b 	bl	8003fac <memset>
 8005d96:	e7f4      	b.n	8005d82 <_calloc_r+0x12>

08005d98 <sbrk_aligned>:
 8005d98:	b570      	push	{r4, r5, r6, lr}
 8005d9a:	4e0e      	ldr	r6, [pc, #56]	; (8005dd4 <sbrk_aligned+0x3c>)
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	6831      	ldr	r1, [r6, #0]
 8005da0:	4605      	mov	r5, r0
 8005da2:	b911      	cbnz	r1, 8005daa <sbrk_aligned+0x12>
 8005da4:	f000 f892 	bl	8005ecc <_sbrk_r>
 8005da8:	6030      	str	r0, [r6, #0]
 8005daa:	4621      	mov	r1, r4
 8005dac:	4628      	mov	r0, r5
 8005dae:	f000 f88d 	bl	8005ecc <_sbrk_r>
 8005db2:	1c43      	adds	r3, r0, #1
 8005db4:	d00a      	beq.n	8005dcc <sbrk_aligned+0x34>
 8005db6:	1cc4      	adds	r4, r0, #3
 8005db8:	f024 0403 	bic.w	r4, r4, #3
 8005dbc:	42a0      	cmp	r0, r4
 8005dbe:	d007      	beq.n	8005dd0 <sbrk_aligned+0x38>
 8005dc0:	1a21      	subs	r1, r4, r0
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	f000 f882 	bl	8005ecc <_sbrk_r>
 8005dc8:	3001      	adds	r0, #1
 8005dca:	d101      	bne.n	8005dd0 <sbrk_aligned+0x38>
 8005dcc:	f04f 34ff 	mov.w	r4, #4294967295
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	bd70      	pop	{r4, r5, r6, pc}
 8005dd4:	20000334 	.word	0x20000334

08005dd8 <_malloc_r>:
 8005dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ddc:	1ccd      	adds	r5, r1, #3
 8005dde:	f025 0503 	bic.w	r5, r5, #3
 8005de2:	3508      	adds	r5, #8
 8005de4:	2d0c      	cmp	r5, #12
 8005de6:	bf38      	it	cc
 8005de8:	250c      	movcc	r5, #12
 8005dea:	2d00      	cmp	r5, #0
 8005dec:	4607      	mov	r7, r0
 8005dee:	db01      	blt.n	8005df4 <_malloc_r+0x1c>
 8005df0:	42a9      	cmp	r1, r5
 8005df2:	d905      	bls.n	8005e00 <_malloc_r+0x28>
 8005df4:	230c      	movs	r3, #12
 8005df6:	2600      	movs	r6, #0
 8005df8:	603b      	str	r3, [r7, #0]
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e00:	4e2e      	ldr	r6, [pc, #184]	; (8005ebc <_malloc_r+0xe4>)
 8005e02:	f000 f8cd 	bl	8005fa0 <__malloc_lock>
 8005e06:	6833      	ldr	r3, [r6, #0]
 8005e08:	461c      	mov	r4, r3
 8005e0a:	bb34      	cbnz	r4, 8005e5a <_malloc_r+0x82>
 8005e0c:	4629      	mov	r1, r5
 8005e0e:	4638      	mov	r0, r7
 8005e10:	f7ff ffc2 	bl	8005d98 <sbrk_aligned>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	4604      	mov	r4, r0
 8005e18:	d14d      	bne.n	8005eb6 <_malloc_r+0xde>
 8005e1a:	6834      	ldr	r4, [r6, #0]
 8005e1c:	4626      	mov	r6, r4
 8005e1e:	2e00      	cmp	r6, #0
 8005e20:	d140      	bne.n	8005ea4 <_malloc_r+0xcc>
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	4631      	mov	r1, r6
 8005e26:	4638      	mov	r0, r7
 8005e28:	eb04 0803 	add.w	r8, r4, r3
 8005e2c:	f000 f84e 	bl	8005ecc <_sbrk_r>
 8005e30:	4580      	cmp	r8, r0
 8005e32:	d13a      	bne.n	8005eaa <_malloc_r+0xd2>
 8005e34:	6821      	ldr	r1, [r4, #0]
 8005e36:	3503      	adds	r5, #3
 8005e38:	1a6d      	subs	r5, r5, r1
 8005e3a:	f025 0503 	bic.w	r5, r5, #3
 8005e3e:	3508      	adds	r5, #8
 8005e40:	2d0c      	cmp	r5, #12
 8005e42:	bf38      	it	cc
 8005e44:	250c      	movcc	r5, #12
 8005e46:	4638      	mov	r0, r7
 8005e48:	4629      	mov	r1, r5
 8005e4a:	f7ff ffa5 	bl	8005d98 <sbrk_aligned>
 8005e4e:	3001      	adds	r0, #1
 8005e50:	d02b      	beq.n	8005eaa <_malloc_r+0xd2>
 8005e52:	6823      	ldr	r3, [r4, #0]
 8005e54:	442b      	add	r3, r5
 8005e56:	6023      	str	r3, [r4, #0]
 8005e58:	e00e      	b.n	8005e78 <_malloc_r+0xa0>
 8005e5a:	6822      	ldr	r2, [r4, #0]
 8005e5c:	1b52      	subs	r2, r2, r5
 8005e5e:	d41e      	bmi.n	8005e9e <_malloc_r+0xc6>
 8005e60:	2a0b      	cmp	r2, #11
 8005e62:	d916      	bls.n	8005e92 <_malloc_r+0xba>
 8005e64:	1961      	adds	r1, r4, r5
 8005e66:	42a3      	cmp	r3, r4
 8005e68:	6025      	str	r5, [r4, #0]
 8005e6a:	bf18      	it	ne
 8005e6c:	6059      	strne	r1, [r3, #4]
 8005e6e:	6863      	ldr	r3, [r4, #4]
 8005e70:	bf08      	it	eq
 8005e72:	6031      	streq	r1, [r6, #0]
 8005e74:	5162      	str	r2, [r4, r5]
 8005e76:	604b      	str	r3, [r1, #4]
 8005e78:	4638      	mov	r0, r7
 8005e7a:	f104 060b 	add.w	r6, r4, #11
 8005e7e:	f000 f895 	bl	8005fac <__malloc_unlock>
 8005e82:	f026 0607 	bic.w	r6, r6, #7
 8005e86:	1d23      	adds	r3, r4, #4
 8005e88:	1af2      	subs	r2, r6, r3
 8005e8a:	d0b6      	beq.n	8005dfa <_malloc_r+0x22>
 8005e8c:	1b9b      	subs	r3, r3, r6
 8005e8e:	50a3      	str	r3, [r4, r2]
 8005e90:	e7b3      	b.n	8005dfa <_malloc_r+0x22>
 8005e92:	6862      	ldr	r2, [r4, #4]
 8005e94:	42a3      	cmp	r3, r4
 8005e96:	bf0c      	ite	eq
 8005e98:	6032      	streq	r2, [r6, #0]
 8005e9a:	605a      	strne	r2, [r3, #4]
 8005e9c:	e7ec      	b.n	8005e78 <_malloc_r+0xa0>
 8005e9e:	4623      	mov	r3, r4
 8005ea0:	6864      	ldr	r4, [r4, #4]
 8005ea2:	e7b2      	b.n	8005e0a <_malloc_r+0x32>
 8005ea4:	4634      	mov	r4, r6
 8005ea6:	6876      	ldr	r6, [r6, #4]
 8005ea8:	e7b9      	b.n	8005e1e <_malloc_r+0x46>
 8005eaa:	230c      	movs	r3, #12
 8005eac:	4638      	mov	r0, r7
 8005eae:	603b      	str	r3, [r7, #0]
 8005eb0:	f000 f87c 	bl	8005fac <__malloc_unlock>
 8005eb4:	e7a1      	b.n	8005dfa <_malloc_r+0x22>
 8005eb6:	6025      	str	r5, [r4, #0]
 8005eb8:	e7de      	b.n	8005e78 <_malloc_r+0xa0>
 8005eba:	bf00      	nop
 8005ebc:	20000330 	.word	0x20000330

08005ec0 <nan>:
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	4901      	ldr	r1, [pc, #4]	; (8005ec8 <nan+0x8>)
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	7ff80000 	.word	0x7ff80000

08005ecc <_sbrk_r>:
 8005ecc:	b538      	push	{r3, r4, r5, lr}
 8005ece:	2300      	movs	r3, #0
 8005ed0:	4d05      	ldr	r5, [pc, #20]	; (8005ee8 <_sbrk_r+0x1c>)
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	4608      	mov	r0, r1
 8005ed6:	602b      	str	r3, [r5, #0]
 8005ed8:	f7fb fa72 	bl	80013c0 <_sbrk>
 8005edc:	1c43      	adds	r3, r0, #1
 8005ede:	d102      	bne.n	8005ee6 <_sbrk_r+0x1a>
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	b103      	cbz	r3, 8005ee6 <_sbrk_r+0x1a>
 8005ee4:	6023      	str	r3, [r4, #0]
 8005ee6:	bd38      	pop	{r3, r4, r5, pc}
 8005ee8:	20000338 	.word	0x20000338

08005eec <strncmp>:
 8005eec:	4603      	mov	r3, r0
 8005eee:	b510      	push	{r4, lr}
 8005ef0:	b172      	cbz	r2, 8005f10 <strncmp+0x24>
 8005ef2:	3901      	subs	r1, #1
 8005ef4:	1884      	adds	r4, r0, r2
 8005ef6:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005efa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005efe:	4290      	cmp	r0, r2
 8005f00:	d101      	bne.n	8005f06 <strncmp+0x1a>
 8005f02:	42a3      	cmp	r3, r4
 8005f04:	d101      	bne.n	8005f0a <strncmp+0x1e>
 8005f06:	1a80      	subs	r0, r0, r2
 8005f08:	bd10      	pop	{r4, pc}
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	d1f3      	bne.n	8005ef6 <strncmp+0xa>
 8005f0e:	e7fa      	b.n	8005f06 <strncmp+0x1a>
 8005f10:	4610      	mov	r0, r2
 8005f12:	e7f9      	b.n	8005f08 <strncmp+0x1c>

08005f14 <__ascii_wctomb>:
 8005f14:	4603      	mov	r3, r0
 8005f16:	4608      	mov	r0, r1
 8005f18:	b141      	cbz	r1, 8005f2c <__ascii_wctomb+0x18>
 8005f1a:	2aff      	cmp	r2, #255	; 0xff
 8005f1c:	d904      	bls.n	8005f28 <__ascii_wctomb+0x14>
 8005f1e:	228a      	movs	r2, #138	; 0x8a
 8005f20:	f04f 30ff 	mov.w	r0, #4294967295
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	4770      	bx	lr
 8005f28:	2001      	movs	r0, #1
 8005f2a:	700a      	strb	r2, [r1, #0]
 8005f2c:	4770      	bx	lr
	...

08005f30 <__assert_func>:
 8005f30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f32:	4614      	mov	r4, r2
 8005f34:	461a      	mov	r2, r3
 8005f36:	4b09      	ldr	r3, [pc, #36]	; (8005f5c <__assert_func+0x2c>)
 8005f38:	4605      	mov	r5, r0
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68d8      	ldr	r0, [r3, #12]
 8005f3e:	b14c      	cbz	r4, 8005f54 <__assert_func+0x24>
 8005f40:	4b07      	ldr	r3, [pc, #28]	; (8005f60 <__assert_func+0x30>)
 8005f42:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f46:	9100      	str	r1, [sp, #0]
 8005f48:	462b      	mov	r3, r5
 8005f4a:	4906      	ldr	r1, [pc, #24]	; (8005f64 <__assert_func+0x34>)
 8005f4c:	f000 f80e 	bl	8005f6c <fiprintf>
 8005f50:	f000 fc28 	bl	80067a4 <abort>
 8005f54:	4b04      	ldr	r3, [pc, #16]	; (8005f68 <__assert_func+0x38>)
 8005f56:	461c      	mov	r4, r3
 8005f58:	e7f3      	b.n	8005f42 <__assert_func+0x12>
 8005f5a:	bf00      	nop
 8005f5c:	20000010 	.word	0x20000010
 8005f60:	08007184 	.word	0x08007184
 8005f64:	08007191 	.word	0x08007191
 8005f68:	080071bf 	.word	0x080071bf

08005f6c <fiprintf>:
 8005f6c:	b40e      	push	{r1, r2, r3}
 8005f6e:	b503      	push	{r0, r1, lr}
 8005f70:	4601      	mov	r1, r0
 8005f72:	ab03      	add	r3, sp, #12
 8005f74:	4805      	ldr	r0, [pc, #20]	; (8005f8c <fiprintf+0x20>)
 8005f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f7a:	6800      	ldr	r0, [r0, #0]
 8005f7c:	9301      	str	r3, [sp, #4]
 8005f7e:	f000 f88b 	bl	8006098 <_vfiprintf_r>
 8005f82:	b002      	add	sp, #8
 8005f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f88:	b003      	add	sp, #12
 8005f8a:	4770      	bx	lr
 8005f8c:	20000010 	.word	0x20000010

08005f90 <malloc>:
 8005f90:	4b02      	ldr	r3, [pc, #8]	; (8005f9c <malloc+0xc>)
 8005f92:	4601      	mov	r1, r0
 8005f94:	6818      	ldr	r0, [r3, #0]
 8005f96:	f7ff bf1f 	b.w	8005dd8 <_malloc_r>
 8005f9a:	bf00      	nop
 8005f9c:	20000010 	.word	0x20000010

08005fa0 <__malloc_lock>:
 8005fa0:	4801      	ldr	r0, [pc, #4]	; (8005fa8 <__malloc_lock+0x8>)
 8005fa2:	f000 bdbb 	b.w	8006b1c <__retarget_lock_acquire_recursive>
 8005fa6:	bf00      	nop
 8005fa8:	2000033c 	.word	0x2000033c

08005fac <__malloc_unlock>:
 8005fac:	4801      	ldr	r0, [pc, #4]	; (8005fb4 <__malloc_unlock+0x8>)
 8005fae:	f000 bdb6 	b.w	8006b1e <__retarget_lock_release_recursive>
 8005fb2:	bf00      	nop
 8005fb4:	2000033c 	.word	0x2000033c

08005fb8 <_free_r>:
 8005fb8:	b538      	push	{r3, r4, r5, lr}
 8005fba:	4605      	mov	r5, r0
 8005fbc:	2900      	cmp	r1, #0
 8005fbe:	d040      	beq.n	8006042 <_free_r+0x8a>
 8005fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fc4:	1f0c      	subs	r4, r1, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	bfb8      	it	lt
 8005fca:	18e4      	addlt	r4, r4, r3
 8005fcc:	f7ff ffe8 	bl	8005fa0 <__malloc_lock>
 8005fd0:	4a1c      	ldr	r2, [pc, #112]	; (8006044 <_free_r+0x8c>)
 8005fd2:	6813      	ldr	r3, [r2, #0]
 8005fd4:	b933      	cbnz	r3, 8005fe4 <_free_r+0x2c>
 8005fd6:	6063      	str	r3, [r4, #4]
 8005fd8:	6014      	str	r4, [r2, #0]
 8005fda:	4628      	mov	r0, r5
 8005fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fe0:	f7ff bfe4 	b.w	8005fac <__malloc_unlock>
 8005fe4:	42a3      	cmp	r3, r4
 8005fe6:	d908      	bls.n	8005ffa <_free_r+0x42>
 8005fe8:	6820      	ldr	r0, [r4, #0]
 8005fea:	1821      	adds	r1, r4, r0
 8005fec:	428b      	cmp	r3, r1
 8005fee:	bf01      	itttt	eq
 8005ff0:	6819      	ldreq	r1, [r3, #0]
 8005ff2:	685b      	ldreq	r3, [r3, #4]
 8005ff4:	1809      	addeq	r1, r1, r0
 8005ff6:	6021      	streq	r1, [r4, #0]
 8005ff8:	e7ed      	b.n	8005fd6 <_free_r+0x1e>
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	b10b      	cbz	r3, 8006004 <_free_r+0x4c>
 8006000:	42a3      	cmp	r3, r4
 8006002:	d9fa      	bls.n	8005ffa <_free_r+0x42>
 8006004:	6811      	ldr	r1, [r2, #0]
 8006006:	1850      	adds	r0, r2, r1
 8006008:	42a0      	cmp	r0, r4
 800600a:	d10b      	bne.n	8006024 <_free_r+0x6c>
 800600c:	6820      	ldr	r0, [r4, #0]
 800600e:	4401      	add	r1, r0
 8006010:	1850      	adds	r0, r2, r1
 8006012:	4283      	cmp	r3, r0
 8006014:	6011      	str	r1, [r2, #0]
 8006016:	d1e0      	bne.n	8005fda <_free_r+0x22>
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	4401      	add	r1, r0
 800601e:	6011      	str	r1, [r2, #0]
 8006020:	6053      	str	r3, [r2, #4]
 8006022:	e7da      	b.n	8005fda <_free_r+0x22>
 8006024:	d902      	bls.n	800602c <_free_r+0x74>
 8006026:	230c      	movs	r3, #12
 8006028:	602b      	str	r3, [r5, #0]
 800602a:	e7d6      	b.n	8005fda <_free_r+0x22>
 800602c:	6820      	ldr	r0, [r4, #0]
 800602e:	1821      	adds	r1, r4, r0
 8006030:	428b      	cmp	r3, r1
 8006032:	bf01      	itttt	eq
 8006034:	6819      	ldreq	r1, [r3, #0]
 8006036:	685b      	ldreq	r3, [r3, #4]
 8006038:	1809      	addeq	r1, r1, r0
 800603a:	6021      	streq	r1, [r4, #0]
 800603c:	6063      	str	r3, [r4, #4]
 800603e:	6054      	str	r4, [r2, #4]
 8006040:	e7cb      	b.n	8005fda <_free_r+0x22>
 8006042:	bd38      	pop	{r3, r4, r5, pc}
 8006044:	20000330 	.word	0x20000330

08006048 <__sfputc_r>:
 8006048:	6893      	ldr	r3, [r2, #8]
 800604a:	b410      	push	{r4}
 800604c:	3b01      	subs	r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	6093      	str	r3, [r2, #8]
 8006052:	da07      	bge.n	8006064 <__sfputc_r+0x1c>
 8006054:	6994      	ldr	r4, [r2, #24]
 8006056:	42a3      	cmp	r3, r4
 8006058:	db01      	blt.n	800605e <__sfputc_r+0x16>
 800605a:	290a      	cmp	r1, #10
 800605c:	d102      	bne.n	8006064 <__sfputc_r+0x1c>
 800605e:	bc10      	pop	{r4}
 8006060:	f000 bae0 	b.w	8006624 <__swbuf_r>
 8006064:	6813      	ldr	r3, [r2, #0]
 8006066:	1c58      	adds	r0, r3, #1
 8006068:	6010      	str	r0, [r2, #0]
 800606a:	7019      	strb	r1, [r3, #0]
 800606c:	4608      	mov	r0, r1
 800606e:	bc10      	pop	{r4}
 8006070:	4770      	bx	lr

08006072 <__sfputs_r>:
 8006072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006074:	4606      	mov	r6, r0
 8006076:	460f      	mov	r7, r1
 8006078:	4614      	mov	r4, r2
 800607a:	18d5      	adds	r5, r2, r3
 800607c:	42ac      	cmp	r4, r5
 800607e:	d101      	bne.n	8006084 <__sfputs_r+0x12>
 8006080:	2000      	movs	r0, #0
 8006082:	e007      	b.n	8006094 <__sfputs_r+0x22>
 8006084:	463a      	mov	r2, r7
 8006086:	4630      	mov	r0, r6
 8006088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800608c:	f7ff ffdc 	bl	8006048 <__sfputc_r>
 8006090:	1c43      	adds	r3, r0, #1
 8006092:	d1f3      	bne.n	800607c <__sfputs_r+0xa>
 8006094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006098 <_vfiprintf_r>:
 8006098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609c:	460d      	mov	r5, r1
 800609e:	4614      	mov	r4, r2
 80060a0:	4698      	mov	r8, r3
 80060a2:	4606      	mov	r6, r0
 80060a4:	b09d      	sub	sp, #116	; 0x74
 80060a6:	b118      	cbz	r0, 80060b0 <_vfiprintf_r+0x18>
 80060a8:	6983      	ldr	r3, [r0, #24]
 80060aa:	b90b      	cbnz	r3, 80060b0 <_vfiprintf_r+0x18>
 80060ac:	f000 fc98 	bl	80069e0 <__sinit>
 80060b0:	4b89      	ldr	r3, [pc, #548]	; (80062d8 <_vfiprintf_r+0x240>)
 80060b2:	429d      	cmp	r5, r3
 80060b4:	d11b      	bne.n	80060ee <_vfiprintf_r+0x56>
 80060b6:	6875      	ldr	r5, [r6, #4]
 80060b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060ba:	07d9      	lsls	r1, r3, #31
 80060bc:	d405      	bmi.n	80060ca <_vfiprintf_r+0x32>
 80060be:	89ab      	ldrh	r3, [r5, #12]
 80060c0:	059a      	lsls	r2, r3, #22
 80060c2:	d402      	bmi.n	80060ca <_vfiprintf_r+0x32>
 80060c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060c6:	f000 fd29 	bl	8006b1c <__retarget_lock_acquire_recursive>
 80060ca:	89ab      	ldrh	r3, [r5, #12]
 80060cc:	071b      	lsls	r3, r3, #28
 80060ce:	d501      	bpl.n	80060d4 <_vfiprintf_r+0x3c>
 80060d0:	692b      	ldr	r3, [r5, #16]
 80060d2:	b9eb      	cbnz	r3, 8006110 <_vfiprintf_r+0x78>
 80060d4:	4629      	mov	r1, r5
 80060d6:	4630      	mov	r0, r6
 80060d8:	f000 faf6 	bl	80066c8 <__swsetup_r>
 80060dc:	b1c0      	cbz	r0, 8006110 <_vfiprintf_r+0x78>
 80060de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060e0:	07dc      	lsls	r4, r3, #31
 80060e2:	d50e      	bpl.n	8006102 <_vfiprintf_r+0x6a>
 80060e4:	f04f 30ff 	mov.w	r0, #4294967295
 80060e8:	b01d      	add	sp, #116	; 0x74
 80060ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ee:	4b7b      	ldr	r3, [pc, #492]	; (80062dc <_vfiprintf_r+0x244>)
 80060f0:	429d      	cmp	r5, r3
 80060f2:	d101      	bne.n	80060f8 <_vfiprintf_r+0x60>
 80060f4:	68b5      	ldr	r5, [r6, #8]
 80060f6:	e7df      	b.n	80060b8 <_vfiprintf_r+0x20>
 80060f8:	4b79      	ldr	r3, [pc, #484]	; (80062e0 <_vfiprintf_r+0x248>)
 80060fa:	429d      	cmp	r5, r3
 80060fc:	bf08      	it	eq
 80060fe:	68f5      	ldreq	r5, [r6, #12]
 8006100:	e7da      	b.n	80060b8 <_vfiprintf_r+0x20>
 8006102:	89ab      	ldrh	r3, [r5, #12]
 8006104:	0598      	lsls	r0, r3, #22
 8006106:	d4ed      	bmi.n	80060e4 <_vfiprintf_r+0x4c>
 8006108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800610a:	f000 fd08 	bl	8006b1e <__retarget_lock_release_recursive>
 800610e:	e7e9      	b.n	80060e4 <_vfiprintf_r+0x4c>
 8006110:	2300      	movs	r3, #0
 8006112:	9309      	str	r3, [sp, #36]	; 0x24
 8006114:	2320      	movs	r3, #32
 8006116:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800611a:	2330      	movs	r3, #48	; 0x30
 800611c:	f04f 0901 	mov.w	r9, #1
 8006120:	f8cd 800c 	str.w	r8, [sp, #12]
 8006124:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80062e4 <_vfiprintf_r+0x24c>
 8006128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800612c:	4623      	mov	r3, r4
 800612e:	469a      	mov	sl, r3
 8006130:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006134:	b10a      	cbz	r2, 800613a <_vfiprintf_r+0xa2>
 8006136:	2a25      	cmp	r2, #37	; 0x25
 8006138:	d1f9      	bne.n	800612e <_vfiprintf_r+0x96>
 800613a:	ebba 0b04 	subs.w	fp, sl, r4
 800613e:	d00b      	beq.n	8006158 <_vfiprintf_r+0xc0>
 8006140:	465b      	mov	r3, fp
 8006142:	4622      	mov	r2, r4
 8006144:	4629      	mov	r1, r5
 8006146:	4630      	mov	r0, r6
 8006148:	f7ff ff93 	bl	8006072 <__sfputs_r>
 800614c:	3001      	adds	r0, #1
 800614e:	f000 80aa 	beq.w	80062a6 <_vfiprintf_r+0x20e>
 8006152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006154:	445a      	add	r2, fp
 8006156:	9209      	str	r2, [sp, #36]	; 0x24
 8006158:	f89a 3000 	ldrb.w	r3, [sl]
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 80a2 	beq.w	80062a6 <_vfiprintf_r+0x20e>
 8006162:	2300      	movs	r3, #0
 8006164:	f04f 32ff 	mov.w	r2, #4294967295
 8006168:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800616c:	f10a 0a01 	add.w	sl, sl, #1
 8006170:	9304      	str	r3, [sp, #16]
 8006172:	9307      	str	r3, [sp, #28]
 8006174:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006178:	931a      	str	r3, [sp, #104]	; 0x68
 800617a:	4654      	mov	r4, sl
 800617c:	2205      	movs	r2, #5
 800617e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006182:	4858      	ldr	r0, [pc, #352]	; (80062e4 <_vfiprintf_r+0x24c>)
 8006184:	f000 fd32 	bl	8006bec <memchr>
 8006188:	9a04      	ldr	r2, [sp, #16]
 800618a:	b9d8      	cbnz	r0, 80061c4 <_vfiprintf_r+0x12c>
 800618c:	06d1      	lsls	r1, r2, #27
 800618e:	bf44      	itt	mi
 8006190:	2320      	movmi	r3, #32
 8006192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006196:	0713      	lsls	r3, r2, #28
 8006198:	bf44      	itt	mi
 800619a:	232b      	movmi	r3, #43	; 0x2b
 800619c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061a0:	f89a 3000 	ldrb.w	r3, [sl]
 80061a4:	2b2a      	cmp	r3, #42	; 0x2a
 80061a6:	d015      	beq.n	80061d4 <_vfiprintf_r+0x13c>
 80061a8:	4654      	mov	r4, sl
 80061aa:	2000      	movs	r0, #0
 80061ac:	f04f 0c0a 	mov.w	ip, #10
 80061b0:	9a07      	ldr	r2, [sp, #28]
 80061b2:	4621      	mov	r1, r4
 80061b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061b8:	3b30      	subs	r3, #48	; 0x30
 80061ba:	2b09      	cmp	r3, #9
 80061bc:	d94e      	bls.n	800625c <_vfiprintf_r+0x1c4>
 80061be:	b1b0      	cbz	r0, 80061ee <_vfiprintf_r+0x156>
 80061c0:	9207      	str	r2, [sp, #28]
 80061c2:	e014      	b.n	80061ee <_vfiprintf_r+0x156>
 80061c4:	eba0 0308 	sub.w	r3, r0, r8
 80061c8:	fa09 f303 	lsl.w	r3, r9, r3
 80061cc:	4313      	orrs	r3, r2
 80061ce:	46a2      	mov	sl, r4
 80061d0:	9304      	str	r3, [sp, #16]
 80061d2:	e7d2      	b.n	800617a <_vfiprintf_r+0xe2>
 80061d4:	9b03      	ldr	r3, [sp, #12]
 80061d6:	1d19      	adds	r1, r3, #4
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	9103      	str	r1, [sp, #12]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	bfbb      	ittet	lt
 80061e0:	425b      	neglt	r3, r3
 80061e2:	f042 0202 	orrlt.w	r2, r2, #2
 80061e6:	9307      	strge	r3, [sp, #28]
 80061e8:	9307      	strlt	r3, [sp, #28]
 80061ea:	bfb8      	it	lt
 80061ec:	9204      	strlt	r2, [sp, #16]
 80061ee:	7823      	ldrb	r3, [r4, #0]
 80061f0:	2b2e      	cmp	r3, #46	; 0x2e
 80061f2:	d10c      	bne.n	800620e <_vfiprintf_r+0x176>
 80061f4:	7863      	ldrb	r3, [r4, #1]
 80061f6:	2b2a      	cmp	r3, #42	; 0x2a
 80061f8:	d135      	bne.n	8006266 <_vfiprintf_r+0x1ce>
 80061fa:	9b03      	ldr	r3, [sp, #12]
 80061fc:	3402      	adds	r4, #2
 80061fe:	1d1a      	adds	r2, r3, #4
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	9203      	str	r2, [sp, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	bfb8      	it	lt
 8006208:	f04f 33ff 	movlt.w	r3, #4294967295
 800620c:	9305      	str	r3, [sp, #20]
 800620e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80062e8 <_vfiprintf_r+0x250>
 8006212:	2203      	movs	r2, #3
 8006214:	4650      	mov	r0, sl
 8006216:	7821      	ldrb	r1, [r4, #0]
 8006218:	f000 fce8 	bl	8006bec <memchr>
 800621c:	b140      	cbz	r0, 8006230 <_vfiprintf_r+0x198>
 800621e:	2340      	movs	r3, #64	; 0x40
 8006220:	eba0 000a 	sub.w	r0, r0, sl
 8006224:	fa03 f000 	lsl.w	r0, r3, r0
 8006228:	9b04      	ldr	r3, [sp, #16]
 800622a:	3401      	adds	r4, #1
 800622c:	4303      	orrs	r3, r0
 800622e:	9304      	str	r3, [sp, #16]
 8006230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006234:	2206      	movs	r2, #6
 8006236:	482d      	ldr	r0, [pc, #180]	; (80062ec <_vfiprintf_r+0x254>)
 8006238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800623c:	f000 fcd6 	bl	8006bec <memchr>
 8006240:	2800      	cmp	r0, #0
 8006242:	d03f      	beq.n	80062c4 <_vfiprintf_r+0x22c>
 8006244:	4b2a      	ldr	r3, [pc, #168]	; (80062f0 <_vfiprintf_r+0x258>)
 8006246:	bb1b      	cbnz	r3, 8006290 <_vfiprintf_r+0x1f8>
 8006248:	9b03      	ldr	r3, [sp, #12]
 800624a:	3307      	adds	r3, #7
 800624c:	f023 0307 	bic.w	r3, r3, #7
 8006250:	3308      	adds	r3, #8
 8006252:	9303      	str	r3, [sp, #12]
 8006254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006256:	443b      	add	r3, r7
 8006258:	9309      	str	r3, [sp, #36]	; 0x24
 800625a:	e767      	b.n	800612c <_vfiprintf_r+0x94>
 800625c:	460c      	mov	r4, r1
 800625e:	2001      	movs	r0, #1
 8006260:	fb0c 3202 	mla	r2, ip, r2, r3
 8006264:	e7a5      	b.n	80061b2 <_vfiprintf_r+0x11a>
 8006266:	2300      	movs	r3, #0
 8006268:	f04f 0c0a 	mov.w	ip, #10
 800626c:	4619      	mov	r1, r3
 800626e:	3401      	adds	r4, #1
 8006270:	9305      	str	r3, [sp, #20]
 8006272:	4620      	mov	r0, r4
 8006274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006278:	3a30      	subs	r2, #48	; 0x30
 800627a:	2a09      	cmp	r2, #9
 800627c:	d903      	bls.n	8006286 <_vfiprintf_r+0x1ee>
 800627e:	2b00      	cmp	r3, #0
 8006280:	d0c5      	beq.n	800620e <_vfiprintf_r+0x176>
 8006282:	9105      	str	r1, [sp, #20]
 8006284:	e7c3      	b.n	800620e <_vfiprintf_r+0x176>
 8006286:	4604      	mov	r4, r0
 8006288:	2301      	movs	r3, #1
 800628a:	fb0c 2101 	mla	r1, ip, r1, r2
 800628e:	e7f0      	b.n	8006272 <_vfiprintf_r+0x1da>
 8006290:	ab03      	add	r3, sp, #12
 8006292:	9300      	str	r3, [sp, #0]
 8006294:	462a      	mov	r2, r5
 8006296:	4630      	mov	r0, r6
 8006298:	4b16      	ldr	r3, [pc, #88]	; (80062f4 <_vfiprintf_r+0x25c>)
 800629a:	a904      	add	r1, sp, #16
 800629c:	f3af 8000 	nop.w
 80062a0:	4607      	mov	r7, r0
 80062a2:	1c78      	adds	r0, r7, #1
 80062a4:	d1d6      	bne.n	8006254 <_vfiprintf_r+0x1bc>
 80062a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062a8:	07d9      	lsls	r1, r3, #31
 80062aa:	d405      	bmi.n	80062b8 <_vfiprintf_r+0x220>
 80062ac:	89ab      	ldrh	r3, [r5, #12]
 80062ae:	059a      	lsls	r2, r3, #22
 80062b0:	d402      	bmi.n	80062b8 <_vfiprintf_r+0x220>
 80062b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062b4:	f000 fc33 	bl	8006b1e <__retarget_lock_release_recursive>
 80062b8:	89ab      	ldrh	r3, [r5, #12]
 80062ba:	065b      	lsls	r3, r3, #25
 80062bc:	f53f af12 	bmi.w	80060e4 <_vfiprintf_r+0x4c>
 80062c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062c2:	e711      	b.n	80060e8 <_vfiprintf_r+0x50>
 80062c4:	ab03      	add	r3, sp, #12
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	462a      	mov	r2, r5
 80062ca:	4630      	mov	r0, r6
 80062cc:	4b09      	ldr	r3, [pc, #36]	; (80062f4 <_vfiprintf_r+0x25c>)
 80062ce:	a904      	add	r1, sp, #16
 80062d0:	f000 f882 	bl	80063d8 <_printf_i>
 80062d4:	e7e4      	b.n	80062a0 <_vfiprintf_r+0x208>
 80062d6:	bf00      	nop
 80062d8:	08007214 	.word	0x08007214
 80062dc:	08007234 	.word	0x08007234
 80062e0:	080071f4 	.word	0x080071f4
 80062e4:	080071c0 	.word	0x080071c0
 80062e8:	080071c6 	.word	0x080071c6
 80062ec:	080071ca 	.word	0x080071ca
 80062f0:	00000000 	.word	0x00000000
 80062f4:	08006073 	.word	0x08006073

080062f8 <_printf_common>:
 80062f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062fc:	4616      	mov	r6, r2
 80062fe:	4699      	mov	r9, r3
 8006300:	688a      	ldr	r2, [r1, #8]
 8006302:	690b      	ldr	r3, [r1, #16]
 8006304:	4607      	mov	r7, r0
 8006306:	4293      	cmp	r3, r2
 8006308:	bfb8      	it	lt
 800630a:	4613      	movlt	r3, r2
 800630c:	6033      	str	r3, [r6, #0]
 800630e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006312:	460c      	mov	r4, r1
 8006314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006318:	b10a      	cbz	r2, 800631e <_printf_common+0x26>
 800631a:	3301      	adds	r3, #1
 800631c:	6033      	str	r3, [r6, #0]
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	0699      	lsls	r1, r3, #26
 8006322:	bf42      	ittt	mi
 8006324:	6833      	ldrmi	r3, [r6, #0]
 8006326:	3302      	addmi	r3, #2
 8006328:	6033      	strmi	r3, [r6, #0]
 800632a:	6825      	ldr	r5, [r4, #0]
 800632c:	f015 0506 	ands.w	r5, r5, #6
 8006330:	d106      	bne.n	8006340 <_printf_common+0x48>
 8006332:	f104 0a19 	add.w	sl, r4, #25
 8006336:	68e3      	ldr	r3, [r4, #12]
 8006338:	6832      	ldr	r2, [r6, #0]
 800633a:	1a9b      	subs	r3, r3, r2
 800633c:	42ab      	cmp	r3, r5
 800633e:	dc28      	bgt.n	8006392 <_printf_common+0x9a>
 8006340:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006344:	1e13      	subs	r3, r2, #0
 8006346:	6822      	ldr	r2, [r4, #0]
 8006348:	bf18      	it	ne
 800634a:	2301      	movne	r3, #1
 800634c:	0692      	lsls	r2, r2, #26
 800634e:	d42d      	bmi.n	80063ac <_printf_common+0xb4>
 8006350:	4649      	mov	r1, r9
 8006352:	4638      	mov	r0, r7
 8006354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006358:	47c0      	blx	r8
 800635a:	3001      	adds	r0, #1
 800635c:	d020      	beq.n	80063a0 <_printf_common+0xa8>
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	68e5      	ldr	r5, [r4, #12]
 8006362:	f003 0306 	and.w	r3, r3, #6
 8006366:	2b04      	cmp	r3, #4
 8006368:	bf18      	it	ne
 800636a:	2500      	movne	r5, #0
 800636c:	6832      	ldr	r2, [r6, #0]
 800636e:	f04f 0600 	mov.w	r6, #0
 8006372:	68a3      	ldr	r3, [r4, #8]
 8006374:	bf08      	it	eq
 8006376:	1aad      	subeq	r5, r5, r2
 8006378:	6922      	ldr	r2, [r4, #16]
 800637a:	bf08      	it	eq
 800637c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006380:	4293      	cmp	r3, r2
 8006382:	bfc4      	itt	gt
 8006384:	1a9b      	subgt	r3, r3, r2
 8006386:	18ed      	addgt	r5, r5, r3
 8006388:	341a      	adds	r4, #26
 800638a:	42b5      	cmp	r5, r6
 800638c:	d11a      	bne.n	80063c4 <_printf_common+0xcc>
 800638e:	2000      	movs	r0, #0
 8006390:	e008      	b.n	80063a4 <_printf_common+0xac>
 8006392:	2301      	movs	r3, #1
 8006394:	4652      	mov	r2, sl
 8006396:	4649      	mov	r1, r9
 8006398:	4638      	mov	r0, r7
 800639a:	47c0      	blx	r8
 800639c:	3001      	adds	r0, #1
 800639e:	d103      	bne.n	80063a8 <_printf_common+0xb0>
 80063a0:	f04f 30ff 	mov.w	r0, #4294967295
 80063a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063a8:	3501      	adds	r5, #1
 80063aa:	e7c4      	b.n	8006336 <_printf_common+0x3e>
 80063ac:	2030      	movs	r0, #48	; 0x30
 80063ae:	18e1      	adds	r1, r4, r3
 80063b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063ba:	4422      	add	r2, r4
 80063bc:	3302      	adds	r3, #2
 80063be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063c2:	e7c5      	b.n	8006350 <_printf_common+0x58>
 80063c4:	2301      	movs	r3, #1
 80063c6:	4622      	mov	r2, r4
 80063c8:	4649      	mov	r1, r9
 80063ca:	4638      	mov	r0, r7
 80063cc:	47c0      	blx	r8
 80063ce:	3001      	adds	r0, #1
 80063d0:	d0e6      	beq.n	80063a0 <_printf_common+0xa8>
 80063d2:	3601      	adds	r6, #1
 80063d4:	e7d9      	b.n	800638a <_printf_common+0x92>
	...

080063d8 <_printf_i>:
 80063d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063dc:	7e0f      	ldrb	r7, [r1, #24]
 80063de:	4691      	mov	r9, r2
 80063e0:	2f78      	cmp	r7, #120	; 0x78
 80063e2:	4680      	mov	r8, r0
 80063e4:	460c      	mov	r4, r1
 80063e6:	469a      	mov	sl, r3
 80063e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063ee:	d807      	bhi.n	8006400 <_printf_i+0x28>
 80063f0:	2f62      	cmp	r7, #98	; 0x62
 80063f2:	d80a      	bhi.n	800640a <_printf_i+0x32>
 80063f4:	2f00      	cmp	r7, #0
 80063f6:	f000 80d9 	beq.w	80065ac <_printf_i+0x1d4>
 80063fa:	2f58      	cmp	r7, #88	; 0x58
 80063fc:	f000 80a4 	beq.w	8006548 <_printf_i+0x170>
 8006400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006408:	e03a      	b.n	8006480 <_printf_i+0xa8>
 800640a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800640e:	2b15      	cmp	r3, #21
 8006410:	d8f6      	bhi.n	8006400 <_printf_i+0x28>
 8006412:	a101      	add	r1, pc, #4	; (adr r1, 8006418 <_printf_i+0x40>)
 8006414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006418:	08006471 	.word	0x08006471
 800641c:	08006485 	.word	0x08006485
 8006420:	08006401 	.word	0x08006401
 8006424:	08006401 	.word	0x08006401
 8006428:	08006401 	.word	0x08006401
 800642c:	08006401 	.word	0x08006401
 8006430:	08006485 	.word	0x08006485
 8006434:	08006401 	.word	0x08006401
 8006438:	08006401 	.word	0x08006401
 800643c:	08006401 	.word	0x08006401
 8006440:	08006401 	.word	0x08006401
 8006444:	08006593 	.word	0x08006593
 8006448:	080064b5 	.word	0x080064b5
 800644c:	08006575 	.word	0x08006575
 8006450:	08006401 	.word	0x08006401
 8006454:	08006401 	.word	0x08006401
 8006458:	080065b5 	.word	0x080065b5
 800645c:	08006401 	.word	0x08006401
 8006460:	080064b5 	.word	0x080064b5
 8006464:	08006401 	.word	0x08006401
 8006468:	08006401 	.word	0x08006401
 800646c:	0800657d 	.word	0x0800657d
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	1d1a      	adds	r2, r3, #4
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	602a      	str	r2, [r5, #0]
 8006478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800647c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006480:	2301      	movs	r3, #1
 8006482:	e0a4      	b.n	80065ce <_printf_i+0x1f6>
 8006484:	6820      	ldr	r0, [r4, #0]
 8006486:	6829      	ldr	r1, [r5, #0]
 8006488:	0606      	lsls	r6, r0, #24
 800648a:	f101 0304 	add.w	r3, r1, #4
 800648e:	d50a      	bpl.n	80064a6 <_printf_i+0xce>
 8006490:	680e      	ldr	r6, [r1, #0]
 8006492:	602b      	str	r3, [r5, #0]
 8006494:	2e00      	cmp	r6, #0
 8006496:	da03      	bge.n	80064a0 <_printf_i+0xc8>
 8006498:	232d      	movs	r3, #45	; 0x2d
 800649a:	4276      	negs	r6, r6
 800649c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064a0:	230a      	movs	r3, #10
 80064a2:	485e      	ldr	r0, [pc, #376]	; (800661c <_printf_i+0x244>)
 80064a4:	e019      	b.n	80064da <_printf_i+0x102>
 80064a6:	680e      	ldr	r6, [r1, #0]
 80064a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064ac:	602b      	str	r3, [r5, #0]
 80064ae:	bf18      	it	ne
 80064b0:	b236      	sxthne	r6, r6
 80064b2:	e7ef      	b.n	8006494 <_printf_i+0xbc>
 80064b4:	682b      	ldr	r3, [r5, #0]
 80064b6:	6820      	ldr	r0, [r4, #0]
 80064b8:	1d19      	adds	r1, r3, #4
 80064ba:	6029      	str	r1, [r5, #0]
 80064bc:	0601      	lsls	r1, r0, #24
 80064be:	d501      	bpl.n	80064c4 <_printf_i+0xec>
 80064c0:	681e      	ldr	r6, [r3, #0]
 80064c2:	e002      	b.n	80064ca <_printf_i+0xf2>
 80064c4:	0646      	lsls	r6, r0, #25
 80064c6:	d5fb      	bpl.n	80064c0 <_printf_i+0xe8>
 80064c8:	881e      	ldrh	r6, [r3, #0]
 80064ca:	2f6f      	cmp	r7, #111	; 0x6f
 80064cc:	bf0c      	ite	eq
 80064ce:	2308      	moveq	r3, #8
 80064d0:	230a      	movne	r3, #10
 80064d2:	4852      	ldr	r0, [pc, #328]	; (800661c <_printf_i+0x244>)
 80064d4:	2100      	movs	r1, #0
 80064d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064da:	6865      	ldr	r5, [r4, #4]
 80064dc:	2d00      	cmp	r5, #0
 80064de:	bfa8      	it	ge
 80064e0:	6821      	ldrge	r1, [r4, #0]
 80064e2:	60a5      	str	r5, [r4, #8]
 80064e4:	bfa4      	itt	ge
 80064e6:	f021 0104 	bicge.w	r1, r1, #4
 80064ea:	6021      	strge	r1, [r4, #0]
 80064ec:	b90e      	cbnz	r6, 80064f2 <_printf_i+0x11a>
 80064ee:	2d00      	cmp	r5, #0
 80064f0:	d04d      	beq.n	800658e <_printf_i+0x1b6>
 80064f2:	4615      	mov	r5, r2
 80064f4:	fbb6 f1f3 	udiv	r1, r6, r3
 80064f8:	fb03 6711 	mls	r7, r3, r1, r6
 80064fc:	5dc7      	ldrb	r7, [r0, r7]
 80064fe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006502:	4637      	mov	r7, r6
 8006504:	42bb      	cmp	r3, r7
 8006506:	460e      	mov	r6, r1
 8006508:	d9f4      	bls.n	80064f4 <_printf_i+0x11c>
 800650a:	2b08      	cmp	r3, #8
 800650c:	d10b      	bne.n	8006526 <_printf_i+0x14e>
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	07de      	lsls	r6, r3, #31
 8006512:	d508      	bpl.n	8006526 <_printf_i+0x14e>
 8006514:	6923      	ldr	r3, [r4, #16]
 8006516:	6861      	ldr	r1, [r4, #4]
 8006518:	4299      	cmp	r1, r3
 800651a:	bfde      	ittt	le
 800651c:	2330      	movle	r3, #48	; 0x30
 800651e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006522:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006526:	1b52      	subs	r2, r2, r5
 8006528:	6122      	str	r2, [r4, #16]
 800652a:	464b      	mov	r3, r9
 800652c:	4621      	mov	r1, r4
 800652e:	4640      	mov	r0, r8
 8006530:	f8cd a000 	str.w	sl, [sp]
 8006534:	aa03      	add	r2, sp, #12
 8006536:	f7ff fedf 	bl	80062f8 <_printf_common>
 800653a:	3001      	adds	r0, #1
 800653c:	d14c      	bne.n	80065d8 <_printf_i+0x200>
 800653e:	f04f 30ff 	mov.w	r0, #4294967295
 8006542:	b004      	add	sp, #16
 8006544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006548:	4834      	ldr	r0, [pc, #208]	; (800661c <_printf_i+0x244>)
 800654a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800654e:	6829      	ldr	r1, [r5, #0]
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	f851 6b04 	ldr.w	r6, [r1], #4
 8006556:	6029      	str	r1, [r5, #0]
 8006558:	061d      	lsls	r5, r3, #24
 800655a:	d514      	bpl.n	8006586 <_printf_i+0x1ae>
 800655c:	07df      	lsls	r7, r3, #31
 800655e:	bf44      	itt	mi
 8006560:	f043 0320 	orrmi.w	r3, r3, #32
 8006564:	6023      	strmi	r3, [r4, #0]
 8006566:	b91e      	cbnz	r6, 8006570 <_printf_i+0x198>
 8006568:	6823      	ldr	r3, [r4, #0]
 800656a:	f023 0320 	bic.w	r3, r3, #32
 800656e:	6023      	str	r3, [r4, #0]
 8006570:	2310      	movs	r3, #16
 8006572:	e7af      	b.n	80064d4 <_printf_i+0xfc>
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	f043 0320 	orr.w	r3, r3, #32
 800657a:	6023      	str	r3, [r4, #0]
 800657c:	2378      	movs	r3, #120	; 0x78
 800657e:	4828      	ldr	r0, [pc, #160]	; (8006620 <_printf_i+0x248>)
 8006580:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006584:	e7e3      	b.n	800654e <_printf_i+0x176>
 8006586:	0659      	lsls	r1, r3, #25
 8006588:	bf48      	it	mi
 800658a:	b2b6      	uxthmi	r6, r6
 800658c:	e7e6      	b.n	800655c <_printf_i+0x184>
 800658e:	4615      	mov	r5, r2
 8006590:	e7bb      	b.n	800650a <_printf_i+0x132>
 8006592:	682b      	ldr	r3, [r5, #0]
 8006594:	6826      	ldr	r6, [r4, #0]
 8006596:	1d18      	adds	r0, r3, #4
 8006598:	6961      	ldr	r1, [r4, #20]
 800659a:	6028      	str	r0, [r5, #0]
 800659c:	0635      	lsls	r5, r6, #24
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	d501      	bpl.n	80065a6 <_printf_i+0x1ce>
 80065a2:	6019      	str	r1, [r3, #0]
 80065a4:	e002      	b.n	80065ac <_printf_i+0x1d4>
 80065a6:	0670      	lsls	r0, r6, #25
 80065a8:	d5fb      	bpl.n	80065a2 <_printf_i+0x1ca>
 80065aa:	8019      	strh	r1, [r3, #0]
 80065ac:	2300      	movs	r3, #0
 80065ae:	4615      	mov	r5, r2
 80065b0:	6123      	str	r3, [r4, #16]
 80065b2:	e7ba      	b.n	800652a <_printf_i+0x152>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	2100      	movs	r1, #0
 80065b8:	1d1a      	adds	r2, r3, #4
 80065ba:	602a      	str	r2, [r5, #0]
 80065bc:	681d      	ldr	r5, [r3, #0]
 80065be:	6862      	ldr	r2, [r4, #4]
 80065c0:	4628      	mov	r0, r5
 80065c2:	f000 fb13 	bl	8006bec <memchr>
 80065c6:	b108      	cbz	r0, 80065cc <_printf_i+0x1f4>
 80065c8:	1b40      	subs	r0, r0, r5
 80065ca:	6060      	str	r0, [r4, #4]
 80065cc:	6863      	ldr	r3, [r4, #4]
 80065ce:	6123      	str	r3, [r4, #16]
 80065d0:	2300      	movs	r3, #0
 80065d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065d6:	e7a8      	b.n	800652a <_printf_i+0x152>
 80065d8:	462a      	mov	r2, r5
 80065da:	4649      	mov	r1, r9
 80065dc:	4640      	mov	r0, r8
 80065de:	6923      	ldr	r3, [r4, #16]
 80065e0:	47d0      	blx	sl
 80065e2:	3001      	adds	r0, #1
 80065e4:	d0ab      	beq.n	800653e <_printf_i+0x166>
 80065e6:	6823      	ldr	r3, [r4, #0]
 80065e8:	079b      	lsls	r3, r3, #30
 80065ea:	d413      	bmi.n	8006614 <_printf_i+0x23c>
 80065ec:	68e0      	ldr	r0, [r4, #12]
 80065ee:	9b03      	ldr	r3, [sp, #12]
 80065f0:	4298      	cmp	r0, r3
 80065f2:	bfb8      	it	lt
 80065f4:	4618      	movlt	r0, r3
 80065f6:	e7a4      	b.n	8006542 <_printf_i+0x16a>
 80065f8:	2301      	movs	r3, #1
 80065fa:	4632      	mov	r2, r6
 80065fc:	4649      	mov	r1, r9
 80065fe:	4640      	mov	r0, r8
 8006600:	47d0      	blx	sl
 8006602:	3001      	adds	r0, #1
 8006604:	d09b      	beq.n	800653e <_printf_i+0x166>
 8006606:	3501      	adds	r5, #1
 8006608:	68e3      	ldr	r3, [r4, #12]
 800660a:	9903      	ldr	r1, [sp, #12]
 800660c:	1a5b      	subs	r3, r3, r1
 800660e:	42ab      	cmp	r3, r5
 8006610:	dcf2      	bgt.n	80065f8 <_printf_i+0x220>
 8006612:	e7eb      	b.n	80065ec <_printf_i+0x214>
 8006614:	2500      	movs	r5, #0
 8006616:	f104 0619 	add.w	r6, r4, #25
 800661a:	e7f5      	b.n	8006608 <_printf_i+0x230>
 800661c:	080071d1 	.word	0x080071d1
 8006620:	080071e2 	.word	0x080071e2

08006624 <__swbuf_r>:
 8006624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006626:	460e      	mov	r6, r1
 8006628:	4614      	mov	r4, r2
 800662a:	4605      	mov	r5, r0
 800662c:	b118      	cbz	r0, 8006636 <__swbuf_r+0x12>
 800662e:	6983      	ldr	r3, [r0, #24]
 8006630:	b90b      	cbnz	r3, 8006636 <__swbuf_r+0x12>
 8006632:	f000 f9d5 	bl	80069e0 <__sinit>
 8006636:	4b21      	ldr	r3, [pc, #132]	; (80066bc <__swbuf_r+0x98>)
 8006638:	429c      	cmp	r4, r3
 800663a:	d12b      	bne.n	8006694 <__swbuf_r+0x70>
 800663c:	686c      	ldr	r4, [r5, #4]
 800663e:	69a3      	ldr	r3, [r4, #24]
 8006640:	60a3      	str	r3, [r4, #8]
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	071a      	lsls	r2, r3, #28
 8006646:	d52f      	bpl.n	80066a8 <__swbuf_r+0x84>
 8006648:	6923      	ldr	r3, [r4, #16]
 800664a:	b36b      	cbz	r3, 80066a8 <__swbuf_r+0x84>
 800664c:	6923      	ldr	r3, [r4, #16]
 800664e:	6820      	ldr	r0, [r4, #0]
 8006650:	b2f6      	uxtb	r6, r6
 8006652:	1ac0      	subs	r0, r0, r3
 8006654:	6963      	ldr	r3, [r4, #20]
 8006656:	4637      	mov	r7, r6
 8006658:	4283      	cmp	r3, r0
 800665a:	dc04      	bgt.n	8006666 <__swbuf_r+0x42>
 800665c:	4621      	mov	r1, r4
 800665e:	4628      	mov	r0, r5
 8006660:	f000 f92a 	bl	80068b8 <_fflush_r>
 8006664:	bb30      	cbnz	r0, 80066b4 <__swbuf_r+0x90>
 8006666:	68a3      	ldr	r3, [r4, #8]
 8006668:	3001      	adds	r0, #1
 800666a:	3b01      	subs	r3, #1
 800666c:	60a3      	str	r3, [r4, #8]
 800666e:	6823      	ldr	r3, [r4, #0]
 8006670:	1c5a      	adds	r2, r3, #1
 8006672:	6022      	str	r2, [r4, #0]
 8006674:	701e      	strb	r6, [r3, #0]
 8006676:	6963      	ldr	r3, [r4, #20]
 8006678:	4283      	cmp	r3, r0
 800667a:	d004      	beq.n	8006686 <__swbuf_r+0x62>
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	07db      	lsls	r3, r3, #31
 8006680:	d506      	bpl.n	8006690 <__swbuf_r+0x6c>
 8006682:	2e0a      	cmp	r6, #10
 8006684:	d104      	bne.n	8006690 <__swbuf_r+0x6c>
 8006686:	4621      	mov	r1, r4
 8006688:	4628      	mov	r0, r5
 800668a:	f000 f915 	bl	80068b8 <_fflush_r>
 800668e:	b988      	cbnz	r0, 80066b4 <__swbuf_r+0x90>
 8006690:	4638      	mov	r0, r7
 8006692:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006694:	4b0a      	ldr	r3, [pc, #40]	; (80066c0 <__swbuf_r+0x9c>)
 8006696:	429c      	cmp	r4, r3
 8006698:	d101      	bne.n	800669e <__swbuf_r+0x7a>
 800669a:	68ac      	ldr	r4, [r5, #8]
 800669c:	e7cf      	b.n	800663e <__swbuf_r+0x1a>
 800669e:	4b09      	ldr	r3, [pc, #36]	; (80066c4 <__swbuf_r+0xa0>)
 80066a0:	429c      	cmp	r4, r3
 80066a2:	bf08      	it	eq
 80066a4:	68ec      	ldreq	r4, [r5, #12]
 80066a6:	e7ca      	b.n	800663e <__swbuf_r+0x1a>
 80066a8:	4621      	mov	r1, r4
 80066aa:	4628      	mov	r0, r5
 80066ac:	f000 f80c 	bl	80066c8 <__swsetup_r>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d0cb      	beq.n	800664c <__swbuf_r+0x28>
 80066b4:	f04f 37ff 	mov.w	r7, #4294967295
 80066b8:	e7ea      	b.n	8006690 <__swbuf_r+0x6c>
 80066ba:	bf00      	nop
 80066bc:	08007214 	.word	0x08007214
 80066c0:	08007234 	.word	0x08007234
 80066c4:	080071f4 	.word	0x080071f4

080066c8 <__swsetup_r>:
 80066c8:	4b32      	ldr	r3, [pc, #200]	; (8006794 <__swsetup_r+0xcc>)
 80066ca:	b570      	push	{r4, r5, r6, lr}
 80066cc:	681d      	ldr	r5, [r3, #0]
 80066ce:	4606      	mov	r6, r0
 80066d0:	460c      	mov	r4, r1
 80066d2:	b125      	cbz	r5, 80066de <__swsetup_r+0x16>
 80066d4:	69ab      	ldr	r3, [r5, #24]
 80066d6:	b913      	cbnz	r3, 80066de <__swsetup_r+0x16>
 80066d8:	4628      	mov	r0, r5
 80066da:	f000 f981 	bl	80069e0 <__sinit>
 80066de:	4b2e      	ldr	r3, [pc, #184]	; (8006798 <__swsetup_r+0xd0>)
 80066e0:	429c      	cmp	r4, r3
 80066e2:	d10f      	bne.n	8006704 <__swsetup_r+0x3c>
 80066e4:	686c      	ldr	r4, [r5, #4]
 80066e6:	89a3      	ldrh	r3, [r4, #12]
 80066e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80066ec:	0719      	lsls	r1, r3, #28
 80066ee:	d42c      	bmi.n	800674a <__swsetup_r+0x82>
 80066f0:	06dd      	lsls	r5, r3, #27
 80066f2:	d411      	bmi.n	8006718 <__swsetup_r+0x50>
 80066f4:	2309      	movs	r3, #9
 80066f6:	6033      	str	r3, [r6, #0]
 80066f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80066fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006700:	81a3      	strh	r3, [r4, #12]
 8006702:	e03e      	b.n	8006782 <__swsetup_r+0xba>
 8006704:	4b25      	ldr	r3, [pc, #148]	; (800679c <__swsetup_r+0xd4>)
 8006706:	429c      	cmp	r4, r3
 8006708:	d101      	bne.n	800670e <__swsetup_r+0x46>
 800670a:	68ac      	ldr	r4, [r5, #8]
 800670c:	e7eb      	b.n	80066e6 <__swsetup_r+0x1e>
 800670e:	4b24      	ldr	r3, [pc, #144]	; (80067a0 <__swsetup_r+0xd8>)
 8006710:	429c      	cmp	r4, r3
 8006712:	bf08      	it	eq
 8006714:	68ec      	ldreq	r4, [r5, #12]
 8006716:	e7e6      	b.n	80066e6 <__swsetup_r+0x1e>
 8006718:	0758      	lsls	r0, r3, #29
 800671a:	d512      	bpl.n	8006742 <__swsetup_r+0x7a>
 800671c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800671e:	b141      	cbz	r1, 8006732 <__swsetup_r+0x6a>
 8006720:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006724:	4299      	cmp	r1, r3
 8006726:	d002      	beq.n	800672e <__swsetup_r+0x66>
 8006728:	4630      	mov	r0, r6
 800672a:	f7ff fc45 	bl	8005fb8 <_free_r>
 800672e:	2300      	movs	r3, #0
 8006730:	6363      	str	r3, [r4, #52]	; 0x34
 8006732:	89a3      	ldrh	r3, [r4, #12]
 8006734:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006738:	81a3      	strh	r3, [r4, #12]
 800673a:	2300      	movs	r3, #0
 800673c:	6063      	str	r3, [r4, #4]
 800673e:	6923      	ldr	r3, [r4, #16]
 8006740:	6023      	str	r3, [r4, #0]
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	f043 0308 	orr.w	r3, r3, #8
 8006748:	81a3      	strh	r3, [r4, #12]
 800674a:	6923      	ldr	r3, [r4, #16]
 800674c:	b94b      	cbnz	r3, 8006762 <__swsetup_r+0x9a>
 800674e:	89a3      	ldrh	r3, [r4, #12]
 8006750:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006754:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006758:	d003      	beq.n	8006762 <__swsetup_r+0x9a>
 800675a:	4621      	mov	r1, r4
 800675c:	4630      	mov	r0, r6
 800675e:	f000 fa05 	bl	8006b6c <__smakebuf_r>
 8006762:	89a0      	ldrh	r0, [r4, #12]
 8006764:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006768:	f010 0301 	ands.w	r3, r0, #1
 800676c:	d00a      	beq.n	8006784 <__swsetup_r+0xbc>
 800676e:	2300      	movs	r3, #0
 8006770:	60a3      	str	r3, [r4, #8]
 8006772:	6963      	ldr	r3, [r4, #20]
 8006774:	425b      	negs	r3, r3
 8006776:	61a3      	str	r3, [r4, #24]
 8006778:	6923      	ldr	r3, [r4, #16]
 800677a:	b943      	cbnz	r3, 800678e <__swsetup_r+0xc6>
 800677c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006780:	d1ba      	bne.n	80066f8 <__swsetup_r+0x30>
 8006782:	bd70      	pop	{r4, r5, r6, pc}
 8006784:	0781      	lsls	r1, r0, #30
 8006786:	bf58      	it	pl
 8006788:	6963      	ldrpl	r3, [r4, #20]
 800678a:	60a3      	str	r3, [r4, #8]
 800678c:	e7f4      	b.n	8006778 <__swsetup_r+0xb0>
 800678e:	2000      	movs	r0, #0
 8006790:	e7f7      	b.n	8006782 <__swsetup_r+0xba>
 8006792:	bf00      	nop
 8006794:	20000010 	.word	0x20000010
 8006798:	08007214 	.word	0x08007214
 800679c:	08007234 	.word	0x08007234
 80067a0:	080071f4 	.word	0x080071f4

080067a4 <abort>:
 80067a4:	2006      	movs	r0, #6
 80067a6:	b508      	push	{r3, lr}
 80067a8:	f000 fa56 	bl	8006c58 <raise>
 80067ac:	2001      	movs	r0, #1
 80067ae:	f7fa fd94 	bl	80012da <_exit>
	...

080067b4 <__sflush_r>:
 80067b4:	898a      	ldrh	r2, [r1, #12]
 80067b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b8:	4605      	mov	r5, r0
 80067ba:	0710      	lsls	r0, r2, #28
 80067bc:	460c      	mov	r4, r1
 80067be:	d457      	bmi.n	8006870 <__sflush_r+0xbc>
 80067c0:	684b      	ldr	r3, [r1, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	dc04      	bgt.n	80067d0 <__sflush_r+0x1c>
 80067c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	dc01      	bgt.n	80067d0 <__sflush_r+0x1c>
 80067cc:	2000      	movs	r0, #0
 80067ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067d2:	2e00      	cmp	r6, #0
 80067d4:	d0fa      	beq.n	80067cc <__sflush_r+0x18>
 80067d6:	2300      	movs	r3, #0
 80067d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067dc:	682f      	ldr	r7, [r5, #0]
 80067de:	602b      	str	r3, [r5, #0]
 80067e0:	d032      	beq.n	8006848 <__sflush_r+0x94>
 80067e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067e4:	89a3      	ldrh	r3, [r4, #12]
 80067e6:	075a      	lsls	r2, r3, #29
 80067e8:	d505      	bpl.n	80067f6 <__sflush_r+0x42>
 80067ea:	6863      	ldr	r3, [r4, #4]
 80067ec:	1ac0      	subs	r0, r0, r3
 80067ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067f0:	b10b      	cbz	r3, 80067f6 <__sflush_r+0x42>
 80067f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067f4:	1ac0      	subs	r0, r0, r3
 80067f6:	2300      	movs	r3, #0
 80067f8:	4602      	mov	r2, r0
 80067fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067fc:	4628      	mov	r0, r5
 80067fe:	6a21      	ldr	r1, [r4, #32]
 8006800:	47b0      	blx	r6
 8006802:	1c43      	adds	r3, r0, #1
 8006804:	89a3      	ldrh	r3, [r4, #12]
 8006806:	d106      	bne.n	8006816 <__sflush_r+0x62>
 8006808:	6829      	ldr	r1, [r5, #0]
 800680a:	291d      	cmp	r1, #29
 800680c:	d82c      	bhi.n	8006868 <__sflush_r+0xb4>
 800680e:	4a29      	ldr	r2, [pc, #164]	; (80068b4 <__sflush_r+0x100>)
 8006810:	40ca      	lsrs	r2, r1
 8006812:	07d6      	lsls	r6, r2, #31
 8006814:	d528      	bpl.n	8006868 <__sflush_r+0xb4>
 8006816:	2200      	movs	r2, #0
 8006818:	6062      	str	r2, [r4, #4]
 800681a:	6922      	ldr	r2, [r4, #16]
 800681c:	04d9      	lsls	r1, r3, #19
 800681e:	6022      	str	r2, [r4, #0]
 8006820:	d504      	bpl.n	800682c <__sflush_r+0x78>
 8006822:	1c42      	adds	r2, r0, #1
 8006824:	d101      	bne.n	800682a <__sflush_r+0x76>
 8006826:	682b      	ldr	r3, [r5, #0]
 8006828:	b903      	cbnz	r3, 800682c <__sflush_r+0x78>
 800682a:	6560      	str	r0, [r4, #84]	; 0x54
 800682c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800682e:	602f      	str	r7, [r5, #0]
 8006830:	2900      	cmp	r1, #0
 8006832:	d0cb      	beq.n	80067cc <__sflush_r+0x18>
 8006834:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006838:	4299      	cmp	r1, r3
 800683a:	d002      	beq.n	8006842 <__sflush_r+0x8e>
 800683c:	4628      	mov	r0, r5
 800683e:	f7ff fbbb 	bl	8005fb8 <_free_r>
 8006842:	2000      	movs	r0, #0
 8006844:	6360      	str	r0, [r4, #52]	; 0x34
 8006846:	e7c2      	b.n	80067ce <__sflush_r+0x1a>
 8006848:	6a21      	ldr	r1, [r4, #32]
 800684a:	2301      	movs	r3, #1
 800684c:	4628      	mov	r0, r5
 800684e:	47b0      	blx	r6
 8006850:	1c41      	adds	r1, r0, #1
 8006852:	d1c7      	bne.n	80067e4 <__sflush_r+0x30>
 8006854:	682b      	ldr	r3, [r5, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d0c4      	beq.n	80067e4 <__sflush_r+0x30>
 800685a:	2b1d      	cmp	r3, #29
 800685c:	d001      	beq.n	8006862 <__sflush_r+0xae>
 800685e:	2b16      	cmp	r3, #22
 8006860:	d101      	bne.n	8006866 <__sflush_r+0xb2>
 8006862:	602f      	str	r7, [r5, #0]
 8006864:	e7b2      	b.n	80067cc <__sflush_r+0x18>
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	e7ae      	b.n	80067ce <__sflush_r+0x1a>
 8006870:	690f      	ldr	r7, [r1, #16]
 8006872:	2f00      	cmp	r7, #0
 8006874:	d0aa      	beq.n	80067cc <__sflush_r+0x18>
 8006876:	0793      	lsls	r3, r2, #30
 8006878:	bf18      	it	ne
 800687a:	2300      	movne	r3, #0
 800687c:	680e      	ldr	r6, [r1, #0]
 800687e:	bf08      	it	eq
 8006880:	694b      	ldreq	r3, [r1, #20]
 8006882:	1bf6      	subs	r6, r6, r7
 8006884:	600f      	str	r7, [r1, #0]
 8006886:	608b      	str	r3, [r1, #8]
 8006888:	2e00      	cmp	r6, #0
 800688a:	dd9f      	ble.n	80067cc <__sflush_r+0x18>
 800688c:	4633      	mov	r3, r6
 800688e:	463a      	mov	r2, r7
 8006890:	4628      	mov	r0, r5
 8006892:	6a21      	ldr	r1, [r4, #32]
 8006894:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006898:	47e0      	blx	ip
 800689a:	2800      	cmp	r0, #0
 800689c:	dc06      	bgt.n	80068ac <__sflush_r+0xf8>
 800689e:	89a3      	ldrh	r3, [r4, #12]
 80068a0:	f04f 30ff 	mov.w	r0, #4294967295
 80068a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068a8:	81a3      	strh	r3, [r4, #12]
 80068aa:	e790      	b.n	80067ce <__sflush_r+0x1a>
 80068ac:	4407      	add	r7, r0
 80068ae:	1a36      	subs	r6, r6, r0
 80068b0:	e7ea      	b.n	8006888 <__sflush_r+0xd4>
 80068b2:	bf00      	nop
 80068b4:	20400001 	.word	0x20400001

080068b8 <_fflush_r>:
 80068b8:	b538      	push	{r3, r4, r5, lr}
 80068ba:	690b      	ldr	r3, [r1, #16]
 80068bc:	4605      	mov	r5, r0
 80068be:	460c      	mov	r4, r1
 80068c0:	b913      	cbnz	r3, 80068c8 <_fflush_r+0x10>
 80068c2:	2500      	movs	r5, #0
 80068c4:	4628      	mov	r0, r5
 80068c6:	bd38      	pop	{r3, r4, r5, pc}
 80068c8:	b118      	cbz	r0, 80068d2 <_fflush_r+0x1a>
 80068ca:	6983      	ldr	r3, [r0, #24]
 80068cc:	b90b      	cbnz	r3, 80068d2 <_fflush_r+0x1a>
 80068ce:	f000 f887 	bl	80069e0 <__sinit>
 80068d2:	4b14      	ldr	r3, [pc, #80]	; (8006924 <_fflush_r+0x6c>)
 80068d4:	429c      	cmp	r4, r3
 80068d6:	d11b      	bne.n	8006910 <_fflush_r+0x58>
 80068d8:	686c      	ldr	r4, [r5, #4]
 80068da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d0ef      	beq.n	80068c2 <_fflush_r+0xa>
 80068e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068e4:	07d0      	lsls	r0, r2, #31
 80068e6:	d404      	bmi.n	80068f2 <_fflush_r+0x3a>
 80068e8:	0599      	lsls	r1, r3, #22
 80068ea:	d402      	bmi.n	80068f2 <_fflush_r+0x3a>
 80068ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ee:	f000 f915 	bl	8006b1c <__retarget_lock_acquire_recursive>
 80068f2:	4628      	mov	r0, r5
 80068f4:	4621      	mov	r1, r4
 80068f6:	f7ff ff5d 	bl	80067b4 <__sflush_r>
 80068fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068fc:	4605      	mov	r5, r0
 80068fe:	07da      	lsls	r2, r3, #31
 8006900:	d4e0      	bmi.n	80068c4 <_fflush_r+0xc>
 8006902:	89a3      	ldrh	r3, [r4, #12]
 8006904:	059b      	lsls	r3, r3, #22
 8006906:	d4dd      	bmi.n	80068c4 <_fflush_r+0xc>
 8006908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800690a:	f000 f908 	bl	8006b1e <__retarget_lock_release_recursive>
 800690e:	e7d9      	b.n	80068c4 <_fflush_r+0xc>
 8006910:	4b05      	ldr	r3, [pc, #20]	; (8006928 <_fflush_r+0x70>)
 8006912:	429c      	cmp	r4, r3
 8006914:	d101      	bne.n	800691a <_fflush_r+0x62>
 8006916:	68ac      	ldr	r4, [r5, #8]
 8006918:	e7df      	b.n	80068da <_fflush_r+0x22>
 800691a:	4b04      	ldr	r3, [pc, #16]	; (800692c <_fflush_r+0x74>)
 800691c:	429c      	cmp	r4, r3
 800691e:	bf08      	it	eq
 8006920:	68ec      	ldreq	r4, [r5, #12]
 8006922:	e7da      	b.n	80068da <_fflush_r+0x22>
 8006924:	08007214 	.word	0x08007214
 8006928:	08007234 	.word	0x08007234
 800692c:	080071f4 	.word	0x080071f4

08006930 <std>:
 8006930:	2300      	movs	r3, #0
 8006932:	b510      	push	{r4, lr}
 8006934:	4604      	mov	r4, r0
 8006936:	e9c0 3300 	strd	r3, r3, [r0]
 800693a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800693e:	6083      	str	r3, [r0, #8]
 8006940:	8181      	strh	r1, [r0, #12]
 8006942:	6643      	str	r3, [r0, #100]	; 0x64
 8006944:	81c2      	strh	r2, [r0, #14]
 8006946:	6183      	str	r3, [r0, #24]
 8006948:	4619      	mov	r1, r3
 800694a:	2208      	movs	r2, #8
 800694c:	305c      	adds	r0, #92	; 0x5c
 800694e:	f7fd fb2d 	bl	8003fac <memset>
 8006952:	4b05      	ldr	r3, [pc, #20]	; (8006968 <std+0x38>)
 8006954:	6224      	str	r4, [r4, #32]
 8006956:	6263      	str	r3, [r4, #36]	; 0x24
 8006958:	4b04      	ldr	r3, [pc, #16]	; (800696c <std+0x3c>)
 800695a:	62a3      	str	r3, [r4, #40]	; 0x28
 800695c:	4b04      	ldr	r3, [pc, #16]	; (8006970 <std+0x40>)
 800695e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006960:	4b04      	ldr	r3, [pc, #16]	; (8006974 <std+0x44>)
 8006962:	6323      	str	r3, [r4, #48]	; 0x30
 8006964:	bd10      	pop	{r4, pc}
 8006966:	bf00      	nop
 8006968:	08006c91 	.word	0x08006c91
 800696c:	08006cb3 	.word	0x08006cb3
 8006970:	08006ceb 	.word	0x08006ceb
 8006974:	08006d0f 	.word	0x08006d0f

08006978 <_cleanup_r>:
 8006978:	4901      	ldr	r1, [pc, #4]	; (8006980 <_cleanup_r+0x8>)
 800697a:	f000 b8af 	b.w	8006adc <_fwalk_reent>
 800697e:	bf00      	nop
 8006980:	080068b9 	.word	0x080068b9

08006984 <__sfmoreglue>:
 8006984:	2268      	movs	r2, #104	; 0x68
 8006986:	b570      	push	{r4, r5, r6, lr}
 8006988:	1e4d      	subs	r5, r1, #1
 800698a:	4355      	muls	r5, r2
 800698c:	460e      	mov	r6, r1
 800698e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006992:	f7ff fa21 	bl	8005dd8 <_malloc_r>
 8006996:	4604      	mov	r4, r0
 8006998:	b140      	cbz	r0, 80069ac <__sfmoreglue+0x28>
 800699a:	2100      	movs	r1, #0
 800699c:	e9c0 1600 	strd	r1, r6, [r0]
 80069a0:	300c      	adds	r0, #12
 80069a2:	60a0      	str	r0, [r4, #8]
 80069a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80069a8:	f7fd fb00 	bl	8003fac <memset>
 80069ac:	4620      	mov	r0, r4
 80069ae:	bd70      	pop	{r4, r5, r6, pc}

080069b0 <__sfp_lock_acquire>:
 80069b0:	4801      	ldr	r0, [pc, #4]	; (80069b8 <__sfp_lock_acquire+0x8>)
 80069b2:	f000 b8b3 	b.w	8006b1c <__retarget_lock_acquire_recursive>
 80069b6:	bf00      	nop
 80069b8:	2000033d 	.word	0x2000033d

080069bc <__sfp_lock_release>:
 80069bc:	4801      	ldr	r0, [pc, #4]	; (80069c4 <__sfp_lock_release+0x8>)
 80069be:	f000 b8ae 	b.w	8006b1e <__retarget_lock_release_recursive>
 80069c2:	bf00      	nop
 80069c4:	2000033d 	.word	0x2000033d

080069c8 <__sinit_lock_acquire>:
 80069c8:	4801      	ldr	r0, [pc, #4]	; (80069d0 <__sinit_lock_acquire+0x8>)
 80069ca:	f000 b8a7 	b.w	8006b1c <__retarget_lock_acquire_recursive>
 80069ce:	bf00      	nop
 80069d0:	2000033e 	.word	0x2000033e

080069d4 <__sinit_lock_release>:
 80069d4:	4801      	ldr	r0, [pc, #4]	; (80069dc <__sinit_lock_release+0x8>)
 80069d6:	f000 b8a2 	b.w	8006b1e <__retarget_lock_release_recursive>
 80069da:	bf00      	nop
 80069dc:	2000033e 	.word	0x2000033e

080069e0 <__sinit>:
 80069e0:	b510      	push	{r4, lr}
 80069e2:	4604      	mov	r4, r0
 80069e4:	f7ff fff0 	bl	80069c8 <__sinit_lock_acquire>
 80069e8:	69a3      	ldr	r3, [r4, #24]
 80069ea:	b11b      	cbz	r3, 80069f4 <__sinit+0x14>
 80069ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069f0:	f7ff bff0 	b.w	80069d4 <__sinit_lock_release>
 80069f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80069f8:	6523      	str	r3, [r4, #80]	; 0x50
 80069fa:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <__sinit+0x68>)
 80069fc:	4a13      	ldr	r2, [pc, #76]	; (8006a4c <__sinit+0x6c>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	62a2      	str	r2, [r4, #40]	; 0x28
 8006a02:	42a3      	cmp	r3, r4
 8006a04:	bf08      	it	eq
 8006a06:	2301      	moveq	r3, #1
 8006a08:	4620      	mov	r0, r4
 8006a0a:	bf08      	it	eq
 8006a0c:	61a3      	streq	r3, [r4, #24]
 8006a0e:	f000 f81f 	bl	8006a50 <__sfp>
 8006a12:	6060      	str	r0, [r4, #4]
 8006a14:	4620      	mov	r0, r4
 8006a16:	f000 f81b 	bl	8006a50 <__sfp>
 8006a1a:	60a0      	str	r0, [r4, #8]
 8006a1c:	4620      	mov	r0, r4
 8006a1e:	f000 f817 	bl	8006a50 <__sfp>
 8006a22:	2200      	movs	r2, #0
 8006a24:	2104      	movs	r1, #4
 8006a26:	60e0      	str	r0, [r4, #12]
 8006a28:	6860      	ldr	r0, [r4, #4]
 8006a2a:	f7ff ff81 	bl	8006930 <std>
 8006a2e:	2201      	movs	r2, #1
 8006a30:	2109      	movs	r1, #9
 8006a32:	68a0      	ldr	r0, [r4, #8]
 8006a34:	f7ff ff7c 	bl	8006930 <std>
 8006a38:	2202      	movs	r2, #2
 8006a3a:	2112      	movs	r1, #18
 8006a3c:	68e0      	ldr	r0, [r4, #12]
 8006a3e:	f7ff ff77 	bl	8006930 <std>
 8006a42:	2301      	movs	r3, #1
 8006a44:	61a3      	str	r3, [r4, #24]
 8006a46:	e7d1      	b.n	80069ec <__sinit+0xc>
 8006a48:	08006e28 	.word	0x08006e28
 8006a4c:	08006979 	.word	0x08006979

08006a50 <__sfp>:
 8006a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a52:	4607      	mov	r7, r0
 8006a54:	f7ff ffac 	bl	80069b0 <__sfp_lock_acquire>
 8006a58:	4b1e      	ldr	r3, [pc, #120]	; (8006ad4 <__sfp+0x84>)
 8006a5a:	681e      	ldr	r6, [r3, #0]
 8006a5c:	69b3      	ldr	r3, [r6, #24]
 8006a5e:	b913      	cbnz	r3, 8006a66 <__sfp+0x16>
 8006a60:	4630      	mov	r0, r6
 8006a62:	f7ff ffbd 	bl	80069e0 <__sinit>
 8006a66:	3648      	adds	r6, #72	; 0x48
 8006a68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	d503      	bpl.n	8006a78 <__sfp+0x28>
 8006a70:	6833      	ldr	r3, [r6, #0]
 8006a72:	b30b      	cbz	r3, 8006ab8 <__sfp+0x68>
 8006a74:	6836      	ldr	r6, [r6, #0]
 8006a76:	e7f7      	b.n	8006a68 <__sfp+0x18>
 8006a78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a7c:	b9d5      	cbnz	r5, 8006ab4 <__sfp+0x64>
 8006a7e:	4b16      	ldr	r3, [pc, #88]	; (8006ad8 <__sfp+0x88>)
 8006a80:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a84:	60e3      	str	r3, [r4, #12]
 8006a86:	6665      	str	r5, [r4, #100]	; 0x64
 8006a88:	f000 f847 	bl	8006b1a <__retarget_lock_init_recursive>
 8006a8c:	f7ff ff96 	bl	80069bc <__sfp_lock_release>
 8006a90:	2208      	movs	r2, #8
 8006a92:	4629      	mov	r1, r5
 8006a94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a9c:	6025      	str	r5, [r4, #0]
 8006a9e:	61a5      	str	r5, [r4, #24]
 8006aa0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006aa4:	f7fd fa82 	bl	8003fac <memset>
 8006aa8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006aac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab4:	3468      	adds	r4, #104	; 0x68
 8006ab6:	e7d9      	b.n	8006a6c <__sfp+0x1c>
 8006ab8:	2104      	movs	r1, #4
 8006aba:	4638      	mov	r0, r7
 8006abc:	f7ff ff62 	bl	8006984 <__sfmoreglue>
 8006ac0:	4604      	mov	r4, r0
 8006ac2:	6030      	str	r0, [r6, #0]
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d1d5      	bne.n	8006a74 <__sfp+0x24>
 8006ac8:	f7ff ff78 	bl	80069bc <__sfp_lock_release>
 8006acc:	230c      	movs	r3, #12
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	e7ee      	b.n	8006ab0 <__sfp+0x60>
 8006ad2:	bf00      	nop
 8006ad4:	08006e28 	.word	0x08006e28
 8006ad8:	ffff0001 	.word	0xffff0001

08006adc <_fwalk_reent>:
 8006adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ae0:	4606      	mov	r6, r0
 8006ae2:	4688      	mov	r8, r1
 8006ae4:	2700      	movs	r7, #0
 8006ae6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006aea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006aee:	f1b9 0901 	subs.w	r9, r9, #1
 8006af2:	d505      	bpl.n	8006b00 <_fwalk_reent+0x24>
 8006af4:	6824      	ldr	r4, [r4, #0]
 8006af6:	2c00      	cmp	r4, #0
 8006af8:	d1f7      	bne.n	8006aea <_fwalk_reent+0xe>
 8006afa:	4638      	mov	r0, r7
 8006afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b00:	89ab      	ldrh	r3, [r5, #12]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d907      	bls.n	8006b16 <_fwalk_reent+0x3a>
 8006b06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	d003      	beq.n	8006b16 <_fwalk_reent+0x3a>
 8006b0e:	4629      	mov	r1, r5
 8006b10:	4630      	mov	r0, r6
 8006b12:	47c0      	blx	r8
 8006b14:	4307      	orrs	r7, r0
 8006b16:	3568      	adds	r5, #104	; 0x68
 8006b18:	e7e9      	b.n	8006aee <_fwalk_reent+0x12>

08006b1a <__retarget_lock_init_recursive>:
 8006b1a:	4770      	bx	lr

08006b1c <__retarget_lock_acquire_recursive>:
 8006b1c:	4770      	bx	lr

08006b1e <__retarget_lock_release_recursive>:
 8006b1e:	4770      	bx	lr

08006b20 <__swhatbuf_r>:
 8006b20:	b570      	push	{r4, r5, r6, lr}
 8006b22:	460e      	mov	r6, r1
 8006b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b28:	4614      	mov	r4, r2
 8006b2a:	2900      	cmp	r1, #0
 8006b2c:	461d      	mov	r5, r3
 8006b2e:	b096      	sub	sp, #88	; 0x58
 8006b30:	da08      	bge.n	8006b44 <__swhatbuf_r+0x24>
 8006b32:	2200      	movs	r2, #0
 8006b34:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006b38:	602a      	str	r2, [r5, #0]
 8006b3a:	061a      	lsls	r2, r3, #24
 8006b3c:	d410      	bmi.n	8006b60 <__swhatbuf_r+0x40>
 8006b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b42:	e00e      	b.n	8006b62 <__swhatbuf_r+0x42>
 8006b44:	466a      	mov	r2, sp
 8006b46:	f000 f909 	bl	8006d5c <_fstat_r>
 8006b4a:	2800      	cmp	r0, #0
 8006b4c:	dbf1      	blt.n	8006b32 <__swhatbuf_r+0x12>
 8006b4e:	9a01      	ldr	r2, [sp, #4]
 8006b50:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b54:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b58:	425a      	negs	r2, r3
 8006b5a:	415a      	adcs	r2, r3
 8006b5c:	602a      	str	r2, [r5, #0]
 8006b5e:	e7ee      	b.n	8006b3e <__swhatbuf_r+0x1e>
 8006b60:	2340      	movs	r3, #64	; 0x40
 8006b62:	2000      	movs	r0, #0
 8006b64:	6023      	str	r3, [r4, #0]
 8006b66:	b016      	add	sp, #88	; 0x58
 8006b68:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b6c <__smakebuf_r>:
 8006b6c:	898b      	ldrh	r3, [r1, #12]
 8006b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b70:	079d      	lsls	r5, r3, #30
 8006b72:	4606      	mov	r6, r0
 8006b74:	460c      	mov	r4, r1
 8006b76:	d507      	bpl.n	8006b88 <__smakebuf_r+0x1c>
 8006b78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	6123      	str	r3, [r4, #16]
 8006b80:	2301      	movs	r3, #1
 8006b82:	6163      	str	r3, [r4, #20]
 8006b84:	b002      	add	sp, #8
 8006b86:	bd70      	pop	{r4, r5, r6, pc}
 8006b88:	466a      	mov	r2, sp
 8006b8a:	ab01      	add	r3, sp, #4
 8006b8c:	f7ff ffc8 	bl	8006b20 <__swhatbuf_r>
 8006b90:	9900      	ldr	r1, [sp, #0]
 8006b92:	4605      	mov	r5, r0
 8006b94:	4630      	mov	r0, r6
 8006b96:	f7ff f91f 	bl	8005dd8 <_malloc_r>
 8006b9a:	b948      	cbnz	r0, 8006bb0 <__smakebuf_r+0x44>
 8006b9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ba0:	059a      	lsls	r2, r3, #22
 8006ba2:	d4ef      	bmi.n	8006b84 <__smakebuf_r+0x18>
 8006ba4:	f023 0303 	bic.w	r3, r3, #3
 8006ba8:	f043 0302 	orr.w	r3, r3, #2
 8006bac:	81a3      	strh	r3, [r4, #12]
 8006bae:	e7e3      	b.n	8006b78 <__smakebuf_r+0xc>
 8006bb0:	4b0d      	ldr	r3, [pc, #52]	; (8006be8 <__smakebuf_r+0x7c>)
 8006bb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8006bb4:	89a3      	ldrh	r3, [r4, #12]
 8006bb6:	6020      	str	r0, [r4, #0]
 8006bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bbc:	81a3      	strh	r3, [r4, #12]
 8006bbe:	9b00      	ldr	r3, [sp, #0]
 8006bc0:	6120      	str	r0, [r4, #16]
 8006bc2:	6163      	str	r3, [r4, #20]
 8006bc4:	9b01      	ldr	r3, [sp, #4]
 8006bc6:	b15b      	cbz	r3, 8006be0 <__smakebuf_r+0x74>
 8006bc8:	4630      	mov	r0, r6
 8006bca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bce:	f000 f8d7 	bl	8006d80 <_isatty_r>
 8006bd2:	b128      	cbz	r0, 8006be0 <__smakebuf_r+0x74>
 8006bd4:	89a3      	ldrh	r3, [r4, #12]
 8006bd6:	f023 0303 	bic.w	r3, r3, #3
 8006bda:	f043 0301 	orr.w	r3, r3, #1
 8006bde:	81a3      	strh	r3, [r4, #12]
 8006be0:	89a0      	ldrh	r0, [r4, #12]
 8006be2:	4305      	orrs	r5, r0
 8006be4:	81a5      	strh	r5, [r4, #12]
 8006be6:	e7cd      	b.n	8006b84 <__smakebuf_r+0x18>
 8006be8:	08006979 	.word	0x08006979

08006bec <memchr>:
 8006bec:	4603      	mov	r3, r0
 8006bee:	b510      	push	{r4, lr}
 8006bf0:	b2c9      	uxtb	r1, r1
 8006bf2:	4402      	add	r2, r0
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	d101      	bne.n	8006bfe <memchr+0x12>
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	e003      	b.n	8006c06 <memchr+0x1a>
 8006bfe:	7804      	ldrb	r4, [r0, #0]
 8006c00:	3301      	adds	r3, #1
 8006c02:	428c      	cmp	r4, r1
 8006c04:	d1f6      	bne.n	8006bf4 <memchr+0x8>
 8006c06:	bd10      	pop	{r4, pc}

08006c08 <_raise_r>:
 8006c08:	291f      	cmp	r1, #31
 8006c0a:	b538      	push	{r3, r4, r5, lr}
 8006c0c:	4604      	mov	r4, r0
 8006c0e:	460d      	mov	r5, r1
 8006c10:	d904      	bls.n	8006c1c <_raise_r+0x14>
 8006c12:	2316      	movs	r3, #22
 8006c14:	6003      	str	r3, [r0, #0]
 8006c16:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1a:	bd38      	pop	{r3, r4, r5, pc}
 8006c1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006c1e:	b112      	cbz	r2, 8006c26 <_raise_r+0x1e>
 8006c20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c24:	b94b      	cbnz	r3, 8006c3a <_raise_r+0x32>
 8006c26:	4620      	mov	r0, r4
 8006c28:	f000 f830 	bl	8006c8c <_getpid_r>
 8006c2c:	462a      	mov	r2, r5
 8006c2e:	4601      	mov	r1, r0
 8006c30:	4620      	mov	r0, r4
 8006c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c36:	f000 b817 	b.w	8006c68 <_kill_r>
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d00a      	beq.n	8006c54 <_raise_r+0x4c>
 8006c3e:	1c59      	adds	r1, r3, #1
 8006c40:	d103      	bne.n	8006c4a <_raise_r+0x42>
 8006c42:	2316      	movs	r3, #22
 8006c44:	6003      	str	r3, [r0, #0]
 8006c46:	2001      	movs	r0, #1
 8006c48:	e7e7      	b.n	8006c1a <_raise_r+0x12>
 8006c4a:	2400      	movs	r4, #0
 8006c4c:	4628      	mov	r0, r5
 8006c4e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c52:	4798      	blx	r3
 8006c54:	2000      	movs	r0, #0
 8006c56:	e7e0      	b.n	8006c1a <_raise_r+0x12>

08006c58 <raise>:
 8006c58:	4b02      	ldr	r3, [pc, #8]	; (8006c64 <raise+0xc>)
 8006c5a:	4601      	mov	r1, r0
 8006c5c:	6818      	ldr	r0, [r3, #0]
 8006c5e:	f7ff bfd3 	b.w	8006c08 <_raise_r>
 8006c62:	bf00      	nop
 8006c64:	20000010 	.word	0x20000010

08006c68 <_kill_r>:
 8006c68:	b538      	push	{r3, r4, r5, lr}
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	4d06      	ldr	r5, [pc, #24]	; (8006c88 <_kill_r+0x20>)
 8006c6e:	4604      	mov	r4, r0
 8006c70:	4608      	mov	r0, r1
 8006c72:	4611      	mov	r1, r2
 8006c74:	602b      	str	r3, [r5, #0]
 8006c76:	f7fa fb20 	bl	80012ba <_kill>
 8006c7a:	1c43      	adds	r3, r0, #1
 8006c7c:	d102      	bne.n	8006c84 <_kill_r+0x1c>
 8006c7e:	682b      	ldr	r3, [r5, #0]
 8006c80:	b103      	cbz	r3, 8006c84 <_kill_r+0x1c>
 8006c82:	6023      	str	r3, [r4, #0]
 8006c84:	bd38      	pop	{r3, r4, r5, pc}
 8006c86:	bf00      	nop
 8006c88:	20000338 	.word	0x20000338

08006c8c <_getpid_r>:
 8006c8c:	f7fa bb0e 	b.w	80012ac <_getpid>

08006c90 <__sread>:
 8006c90:	b510      	push	{r4, lr}
 8006c92:	460c      	mov	r4, r1
 8006c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c98:	f000 f894 	bl	8006dc4 <_read_r>
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	bfab      	itete	ge
 8006ca0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ca4:	181b      	addge	r3, r3, r0
 8006ca6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006caa:	bfac      	ite	ge
 8006cac:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cae:	81a3      	strhlt	r3, [r4, #12]
 8006cb0:	bd10      	pop	{r4, pc}

08006cb2 <__swrite>:
 8006cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cb6:	461f      	mov	r7, r3
 8006cb8:	898b      	ldrh	r3, [r1, #12]
 8006cba:	4605      	mov	r5, r0
 8006cbc:	05db      	lsls	r3, r3, #23
 8006cbe:	460c      	mov	r4, r1
 8006cc0:	4616      	mov	r6, r2
 8006cc2:	d505      	bpl.n	8006cd0 <__swrite+0x1e>
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ccc:	f000 f868 	bl	8006da0 <_lseek_r>
 8006cd0:	89a3      	ldrh	r3, [r4, #12]
 8006cd2:	4632      	mov	r2, r6
 8006cd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cd8:	81a3      	strh	r3, [r4, #12]
 8006cda:	4628      	mov	r0, r5
 8006cdc:	463b      	mov	r3, r7
 8006cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ce6:	f000 b817 	b.w	8006d18 <_write_r>

08006cea <__sseek>:
 8006cea:	b510      	push	{r4, lr}
 8006cec:	460c      	mov	r4, r1
 8006cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cf2:	f000 f855 	bl	8006da0 <_lseek_r>
 8006cf6:	1c43      	adds	r3, r0, #1
 8006cf8:	89a3      	ldrh	r3, [r4, #12]
 8006cfa:	bf15      	itete	ne
 8006cfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8006cfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d06:	81a3      	strheq	r3, [r4, #12]
 8006d08:	bf18      	it	ne
 8006d0a:	81a3      	strhne	r3, [r4, #12]
 8006d0c:	bd10      	pop	{r4, pc}

08006d0e <__sclose>:
 8006d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d12:	f000 b813 	b.w	8006d3c <_close_r>
	...

08006d18 <_write_r>:
 8006d18:	b538      	push	{r3, r4, r5, lr}
 8006d1a:	4604      	mov	r4, r0
 8006d1c:	4608      	mov	r0, r1
 8006d1e:	4611      	mov	r1, r2
 8006d20:	2200      	movs	r2, #0
 8006d22:	4d05      	ldr	r5, [pc, #20]	; (8006d38 <_write_r+0x20>)
 8006d24:	602a      	str	r2, [r5, #0]
 8006d26:	461a      	mov	r2, r3
 8006d28:	f7fa fafe 	bl	8001328 <_write>
 8006d2c:	1c43      	adds	r3, r0, #1
 8006d2e:	d102      	bne.n	8006d36 <_write_r+0x1e>
 8006d30:	682b      	ldr	r3, [r5, #0]
 8006d32:	b103      	cbz	r3, 8006d36 <_write_r+0x1e>
 8006d34:	6023      	str	r3, [r4, #0]
 8006d36:	bd38      	pop	{r3, r4, r5, pc}
 8006d38:	20000338 	.word	0x20000338

08006d3c <_close_r>:
 8006d3c:	b538      	push	{r3, r4, r5, lr}
 8006d3e:	2300      	movs	r3, #0
 8006d40:	4d05      	ldr	r5, [pc, #20]	; (8006d58 <_close_r+0x1c>)
 8006d42:	4604      	mov	r4, r0
 8006d44:	4608      	mov	r0, r1
 8006d46:	602b      	str	r3, [r5, #0]
 8006d48:	f7fa fb0a 	bl	8001360 <_close>
 8006d4c:	1c43      	adds	r3, r0, #1
 8006d4e:	d102      	bne.n	8006d56 <_close_r+0x1a>
 8006d50:	682b      	ldr	r3, [r5, #0]
 8006d52:	b103      	cbz	r3, 8006d56 <_close_r+0x1a>
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	bd38      	pop	{r3, r4, r5, pc}
 8006d58:	20000338 	.word	0x20000338

08006d5c <_fstat_r>:
 8006d5c:	b538      	push	{r3, r4, r5, lr}
 8006d5e:	2300      	movs	r3, #0
 8006d60:	4d06      	ldr	r5, [pc, #24]	; (8006d7c <_fstat_r+0x20>)
 8006d62:	4604      	mov	r4, r0
 8006d64:	4608      	mov	r0, r1
 8006d66:	4611      	mov	r1, r2
 8006d68:	602b      	str	r3, [r5, #0]
 8006d6a:	f7fa fb04 	bl	8001376 <_fstat>
 8006d6e:	1c43      	adds	r3, r0, #1
 8006d70:	d102      	bne.n	8006d78 <_fstat_r+0x1c>
 8006d72:	682b      	ldr	r3, [r5, #0]
 8006d74:	b103      	cbz	r3, 8006d78 <_fstat_r+0x1c>
 8006d76:	6023      	str	r3, [r4, #0]
 8006d78:	bd38      	pop	{r3, r4, r5, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20000338 	.word	0x20000338

08006d80 <_isatty_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	2300      	movs	r3, #0
 8006d84:	4d05      	ldr	r5, [pc, #20]	; (8006d9c <_isatty_r+0x1c>)
 8006d86:	4604      	mov	r4, r0
 8006d88:	4608      	mov	r0, r1
 8006d8a:	602b      	str	r3, [r5, #0]
 8006d8c:	f7fa fb02 	bl	8001394 <_isatty>
 8006d90:	1c43      	adds	r3, r0, #1
 8006d92:	d102      	bne.n	8006d9a <_isatty_r+0x1a>
 8006d94:	682b      	ldr	r3, [r5, #0]
 8006d96:	b103      	cbz	r3, 8006d9a <_isatty_r+0x1a>
 8006d98:	6023      	str	r3, [r4, #0]
 8006d9a:	bd38      	pop	{r3, r4, r5, pc}
 8006d9c:	20000338 	.word	0x20000338

08006da0 <_lseek_r>:
 8006da0:	b538      	push	{r3, r4, r5, lr}
 8006da2:	4604      	mov	r4, r0
 8006da4:	4608      	mov	r0, r1
 8006da6:	4611      	mov	r1, r2
 8006da8:	2200      	movs	r2, #0
 8006daa:	4d05      	ldr	r5, [pc, #20]	; (8006dc0 <_lseek_r+0x20>)
 8006dac:	602a      	str	r2, [r5, #0]
 8006dae:	461a      	mov	r2, r3
 8006db0:	f7fa fafa 	bl	80013a8 <_lseek>
 8006db4:	1c43      	adds	r3, r0, #1
 8006db6:	d102      	bne.n	8006dbe <_lseek_r+0x1e>
 8006db8:	682b      	ldr	r3, [r5, #0]
 8006dba:	b103      	cbz	r3, 8006dbe <_lseek_r+0x1e>
 8006dbc:	6023      	str	r3, [r4, #0]
 8006dbe:	bd38      	pop	{r3, r4, r5, pc}
 8006dc0:	20000338 	.word	0x20000338

08006dc4 <_read_r>:
 8006dc4:	b538      	push	{r3, r4, r5, lr}
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	4608      	mov	r0, r1
 8006dca:	4611      	mov	r1, r2
 8006dcc:	2200      	movs	r2, #0
 8006dce:	4d05      	ldr	r5, [pc, #20]	; (8006de4 <_read_r+0x20>)
 8006dd0:	602a      	str	r2, [r5, #0]
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	f7fa fa8b 	bl	80012ee <_read>
 8006dd8:	1c43      	adds	r3, r0, #1
 8006dda:	d102      	bne.n	8006de2 <_read_r+0x1e>
 8006ddc:	682b      	ldr	r3, [r5, #0]
 8006dde:	b103      	cbz	r3, 8006de2 <_read_r+0x1e>
 8006de0:	6023      	str	r3, [r4, #0]
 8006de2:	bd38      	pop	{r3, r4, r5, pc}
 8006de4:	20000338 	.word	0x20000338

08006de8 <_init>:
 8006de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dea:	bf00      	nop
 8006dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dee:	bc08      	pop	{r3}
 8006df0:	469e      	mov	lr, r3
 8006df2:	4770      	bx	lr

08006df4 <_fini>:
 8006df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006df6:	bf00      	nop
 8006df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dfa:	bc08      	pop	{r3}
 8006dfc:	469e      	mov	lr, r3
 8006dfe:	4770      	bx	lr
